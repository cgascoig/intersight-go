// Code generated by go-swagger; DO NOT EDIT.

package aaa_audit_record

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetAaaAuditRecordsMoidReader is a Reader for the GetAaaAuditRecordsMoid structure.
type GetAaaAuditRecordsMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAaaAuditRecordsMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAaaAuditRecordsMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetAaaAuditRecordsMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetAaaAuditRecordsMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetAaaAuditRecordsMoidOK creates a GetAaaAuditRecordsMoidOK with default headers values
func NewGetAaaAuditRecordsMoidOK() *GetAaaAuditRecordsMoidOK {
	return &GetAaaAuditRecordsMoidOK{}
}

/*GetAaaAuditRecordsMoidOK handles this case with default header values.

An instance of aaaAuditRecord
*/
type GetAaaAuditRecordsMoidOK struct {
	Payload *models.AaaAuditRecord
}

func (o *GetAaaAuditRecordsMoidOK) Error() string {
	return fmt.Sprintf("[GET /aaa/AuditRecords/{moid}][%d] getAaaAuditRecordsMoidOK  %+v", 200, o.Payload)
}

func (o *GetAaaAuditRecordsMoidOK) GetPayload() *models.AaaAuditRecord {
	return o.Payload
}

func (o *GetAaaAuditRecordsMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AaaAuditRecord)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAaaAuditRecordsMoidNotFound creates a GetAaaAuditRecordsMoidNotFound with default headers values
func NewGetAaaAuditRecordsMoidNotFound() *GetAaaAuditRecordsMoidNotFound {
	return &GetAaaAuditRecordsMoidNotFound{}
}

/*GetAaaAuditRecordsMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetAaaAuditRecordsMoidNotFound struct {
}

func (o *GetAaaAuditRecordsMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /aaa/AuditRecords/{moid}][%d] getAaaAuditRecordsMoidNotFound ", 404)
}

func (o *GetAaaAuditRecordsMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAaaAuditRecordsMoidDefault creates a GetAaaAuditRecordsMoidDefault with default headers values
func NewGetAaaAuditRecordsMoidDefault(code int) *GetAaaAuditRecordsMoidDefault {
	return &GetAaaAuditRecordsMoidDefault{
		_statusCode: code,
	}
}

/*GetAaaAuditRecordsMoidDefault handles this case with default header values.

Unexpected error
*/
type GetAaaAuditRecordsMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get aaa audit records moid default response
func (o *GetAaaAuditRecordsMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetAaaAuditRecordsMoidDefault) Error() string {
	return fmt.Sprintf("[GET /aaa/AuditRecords/{moid}][%d] GetAaaAuditRecordsMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetAaaAuditRecordsMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAaaAuditRecordsMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
