// Code generated by go-swagger; DO NOT EDIT.

package appliance_device_claim

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new appliance device claim API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for appliance device claim API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetApplianceDeviceClaims gets a list of appliance device claim instances
*/
func (a *Client) GetApplianceDeviceClaims(params *GetApplianceDeviceClaimsParams) (*GetApplianceDeviceClaimsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplianceDeviceClaimsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetApplianceDeviceClaims",
		Method:             "GET",
		PathPattern:        "/appliance/DeviceClaims",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApplianceDeviceClaimsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplianceDeviceClaimsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetApplianceDeviceClaimsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetApplianceDeviceClaimsMoid gets a specific instance of appliance device claim
*/
func (a *Client) GetApplianceDeviceClaimsMoid(params *GetApplianceDeviceClaimsMoidParams) (*GetApplianceDeviceClaimsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplianceDeviceClaimsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetApplianceDeviceClaimsMoid",
		Method:             "GET",
		PathPattern:        "/appliance/DeviceClaims/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApplianceDeviceClaimsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplianceDeviceClaimsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetApplianceDeviceClaimsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostApplianceDeviceClaims creates an instance of appliance device claim
*/
func (a *Client) PostApplianceDeviceClaims(params *PostApplianceDeviceClaimsParams) (*PostApplianceDeviceClaimsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostApplianceDeviceClaimsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostApplianceDeviceClaims",
		Method:             "POST",
		PathPattern:        "/appliance/DeviceClaims",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostApplianceDeviceClaimsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostApplianceDeviceClaimsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostApplianceDeviceClaimsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
