// Code generated by go-swagger; DO NOT EDIT.

package appliance_node_info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetApplianceNodeInfosMoidReader is a Reader for the GetApplianceNodeInfosMoid structure.
type GetApplianceNodeInfosMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetApplianceNodeInfosMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetApplianceNodeInfosMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetApplianceNodeInfosMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetApplianceNodeInfosMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetApplianceNodeInfosMoidOK creates a GetApplianceNodeInfosMoidOK with default headers values
func NewGetApplianceNodeInfosMoidOK() *GetApplianceNodeInfosMoidOK {
	return &GetApplianceNodeInfosMoidOK{}
}

/*GetApplianceNodeInfosMoidOK handles this case with default header values.

An instance of applianceNodeInfo
*/
type GetApplianceNodeInfosMoidOK struct {
	Payload *models.ApplianceNodeInfo
}

func (o *GetApplianceNodeInfosMoidOK) Error() string {
	return fmt.Sprintf("[GET /appliance/NodeInfos/{moid}][%d] getApplianceNodeInfosMoidOK  %+v", 200, o.Payload)
}

func (o *GetApplianceNodeInfosMoidOK) GetPayload() *models.ApplianceNodeInfo {
	return o.Payload
}

func (o *GetApplianceNodeInfosMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ApplianceNodeInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetApplianceNodeInfosMoidNotFound creates a GetApplianceNodeInfosMoidNotFound with default headers values
func NewGetApplianceNodeInfosMoidNotFound() *GetApplianceNodeInfosMoidNotFound {
	return &GetApplianceNodeInfosMoidNotFound{}
}

/*GetApplianceNodeInfosMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetApplianceNodeInfosMoidNotFound struct {
}

func (o *GetApplianceNodeInfosMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /appliance/NodeInfos/{moid}][%d] getApplianceNodeInfosMoidNotFound ", 404)
}

func (o *GetApplianceNodeInfosMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetApplianceNodeInfosMoidDefault creates a GetApplianceNodeInfosMoidDefault with default headers values
func NewGetApplianceNodeInfosMoidDefault(code int) *GetApplianceNodeInfosMoidDefault {
	return &GetApplianceNodeInfosMoidDefault{
		_statusCode: code,
	}
}

/*GetApplianceNodeInfosMoidDefault handles this case with default header values.

Unexpected error
*/
type GetApplianceNodeInfosMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get appliance node infos moid default response
func (o *GetApplianceNodeInfosMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetApplianceNodeInfosMoidDefault) Error() string {
	return fmt.Sprintf("[GET /appliance/NodeInfos/{moid}][%d] GetApplianceNodeInfosMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetApplianceNodeInfosMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetApplianceNodeInfosMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
