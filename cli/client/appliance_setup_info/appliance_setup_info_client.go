// Code generated by go-swagger; DO NOT EDIT.

package appliance_setup_info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new appliance setup info API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for appliance setup info API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetApplianceSetupInfos gets a list of appliance setup info instances
*/
func (a *Client) GetApplianceSetupInfos(params *GetApplianceSetupInfosParams) (*GetApplianceSetupInfosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplianceSetupInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetApplianceSetupInfos",
		Method:             "GET",
		PathPattern:        "/appliance/SetupInfos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApplianceSetupInfosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplianceSetupInfosOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetApplianceSetupInfosDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetApplianceSetupInfosMoid gets a specific instance of appliance setup info
*/
func (a *Client) GetApplianceSetupInfosMoid(params *GetApplianceSetupInfosMoidParams) (*GetApplianceSetupInfosMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplianceSetupInfosMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetApplianceSetupInfosMoid",
		Method:             "GET",
		PathPattern:        "/appliance/SetupInfos/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApplianceSetupInfosMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplianceSetupInfosMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetApplianceSetupInfosMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchApplianceSetupInfosMoid updates an instance of appliance setup info
*/
func (a *Client) PatchApplianceSetupInfosMoid(params *PatchApplianceSetupInfosMoidParams) (*PatchApplianceSetupInfosMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchApplianceSetupInfosMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchApplianceSetupInfosMoid",
		Method:             "PATCH",
		PathPattern:        "/appliance/SetupInfos/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchApplianceSetupInfosMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchApplianceSetupInfosMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchApplianceSetupInfosMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostApplianceSetupInfosMoid updates an instance of appliance setup info
*/
func (a *Client) PostApplianceSetupInfosMoid(params *PostApplianceSetupInfosMoidParams) (*PostApplianceSetupInfosMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostApplianceSetupInfosMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostApplianceSetupInfosMoid",
		Method:             "POST",
		PathPattern:        "/appliance/SetupInfos/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostApplianceSetupInfosMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostApplianceSetupInfosMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostApplianceSetupInfosMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
