// Code generated by go-swagger; DO NOT EDIT.

package appliance_setup_info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetApplianceSetupInfosMoidReader is a Reader for the GetApplianceSetupInfosMoid structure.
type GetApplianceSetupInfosMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetApplianceSetupInfosMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetApplianceSetupInfosMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetApplianceSetupInfosMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetApplianceSetupInfosMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetApplianceSetupInfosMoidOK creates a GetApplianceSetupInfosMoidOK with default headers values
func NewGetApplianceSetupInfosMoidOK() *GetApplianceSetupInfosMoidOK {
	return &GetApplianceSetupInfosMoidOK{}
}

/*GetApplianceSetupInfosMoidOK handles this case with default header values.

An instance of applianceSetupInfo
*/
type GetApplianceSetupInfosMoidOK struct {
	Payload *models.ApplianceSetupInfo
}

func (o *GetApplianceSetupInfosMoidOK) Error() string {
	return fmt.Sprintf("[GET /appliance/SetupInfos/{moid}][%d] getApplianceSetupInfosMoidOK  %+v", 200, o.Payload)
}

func (o *GetApplianceSetupInfosMoidOK) GetPayload() *models.ApplianceSetupInfo {
	return o.Payload
}

func (o *GetApplianceSetupInfosMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ApplianceSetupInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetApplianceSetupInfosMoidNotFound creates a GetApplianceSetupInfosMoidNotFound with default headers values
func NewGetApplianceSetupInfosMoidNotFound() *GetApplianceSetupInfosMoidNotFound {
	return &GetApplianceSetupInfosMoidNotFound{}
}

/*GetApplianceSetupInfosMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetApplianceSetupInfosMoidNotFound struct {
}

func (o *GetApplianceSetupInfosMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /appliance/SetupInfos/{moid}][%d] getApplianceSetupInfosMoidNotFound ", 404)
}

func (o *GetApplianceSetupInfosMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetApplianceSetupInfosMoidDefault creates a GetApplianceSetupInfosMoidDefault with default headers values
func NewGetApplianceSetupInfosMoidDefault(code int) *GetApplianceSetupInfosMoidDefault {
	return &GetApplianceSetupInfosMoidDefault{
		_statusCode: code,
	}
}

/*GetApplianceSetupInfosMoidDefault handles this case with default header values.

Unexpected error
*/
type GetApplianceSetupInfosMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get appliance setup infos moid default response
func (o *GetApplianceSetupInfosMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetApplianceSetupInfosMoidDefault) Error() string {
	return fmt.Sprintf("[GET /appliance/SetupInfos/{moid}][%d] GetApplianceSetupInfosMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetApplianceSetupInfosMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetApplianceSetupInfosMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
