// Code generated by go-swagger; DO NOT EDIT.

package appliance_upgrade

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetApplianceUpgradesMoidReader is a Reader for the GetApplianceUpgradesMoid structure.
type GetApplianceUpgradesMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetApplianceUpgradesMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetApplianceUpgradesMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetApplianceUpgradesMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetApplianceUpgradesMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetApplianceUpgradesMoidOK creates a GetApplianceUpgradesMoidOK with default headers values
func NewGetApplianceUpgradesMoidOK() *GetApplianceUpgradesMoidOK {
	return &GetApplianceUpgradesMoidOK{}
}

/*GetApplianceUpgradesMoidOK handles this case with default header values.

An instance of applianceUpgrade
*/
type GetApplianceUpgradesMoidOK struct {
	Payload *models.ApplianceUpgrade
}

func (o *GetApplianceUpgradesMoidOK) Error() string {
	return fmt.Sprintf("[GET /appliance/Upgrades/{moid}][%d] getApplianceUpgradesMoidOK  %+v", 200, o.Payload)
}

func (o *GetApplianceUpgradesMoidOK) GetPayload() *models.ApplianceUpgrade {
	return o.Payload
}

func (o *GetApplianceUpgradesMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ApplianceUpgrade)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetApplianceUpgradesMoidNotFound creates a GetApplianceUpgradesMoidNotFound with default headers values
func NewGetApplianceUpgradesMoidNotFound() *GetApplianceUpgradesMoidNotFound {
	return &GetApplianceUpgradesMoidNotFound{}
}

/*GetApplianceUpgradesMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetApplianceUpgradesMoidNotFound struct {
}

func (o *GetApplianceUpgradesMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /appliance/Upgrades/{moid}][%d] getApplianceUpgradesMoidNotFound ", 404)
}

func (o *GetApplianceUpgradesMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetApplianceUpgradesMoidDefault creates a GetApplianceUpgradesMoidDefault with default headers values
func NewGetApplianceUpgradesMoidDefault(code int) *GetApplianceUpgradesMoidDefault {
	return &GetApplianceUpgradesMoidDefault{
		_statusCode: code,
	}
}

/*GetApplianceUpgradesMoidDefault handles this case with default header values.

Unexpected error
*/
type GetApplianceUpgradesMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get appliance upgrades moid default response
func (o *GetApplianceUpgradesMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetApplianceUpgradesMoidDefault) Error() string {
	return fmt.Sprintf("[GET /appliance/Upgrades/{moid}][%d] GetApplianceUpgradesMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetApplianceUpgradesMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetApplianceUpgradesMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
