// Code generated by go-swagger; DO NOT EDIT.

package appliance_upgrade_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new appliance upgrade policy API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for appliance upgrade policy API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetApplianceUpgradePolicies gets a list of appliance upgrade policy instances
*/
func (a *Client) GetApplianceUpgradePolicies(params *GetApplianceUpgradePoliciesParams) (*GetApplianceUpgradePoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplianceUpgradePoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetApplianceUpgradePolicies",
		Method:             "GET",
		PathPattern:        "/appliance/UpgradePolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApplianceUpgradePoliciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplianceUpgradePoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetApplianceUpgradePoliciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetApplianceUpgradePoliciesMoid gets a specific instance of appliance upgrade policy
*/
func (a *Client) GetApplianceUpgradePoliciesMoid(params *GetApplianceUpgradePoliciesMoidParams) (*GetApplianceUpgradePoliciesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplianceUpgradePoliciesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetApplianceUpgradePoliciesMoid",
		Method:             "GET",
		PathPattern:        "/appliance/UpgradePolicies/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApplianceUpgradePoliciesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplianceUpgradePoliciesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetApplianceUpgradePoliciesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchApplianceUpgradePoliciesMoid updates an instance of appliance upgrade policy
*/
func (a *Client) PatchApplianceUpgradePoliciesMoid(params *PatchApplianceUpgradePoliciesMoidParams) (*PatchApplianceUpgradePoliciesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchApplianceUpgradePoliciesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchApplianceUpgradePoliciesMoid",
		Method:             "PATCH",
		PathPattern:        "/appliance/UpgradePolicies/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchApplianceUpgradePoliciesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchApplianceUpgradePoliciesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchApplianceUpgradePoliciesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostApplianceUpgradePoliciesMoid updates an instance of appliance upgrade policy
*/
func (a *Client) PostApplianceUpgradePoliciesMoid(params *PostApplianceUpgradePoliciesMoidParams) (*PostApplianceUpgradePoliciesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostApplianceUpgradePoliciesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostApplianceUpgradePoliciesMoid",
		Method:             "POST",
		PathPattern:        "/appliance/UpgradePolicies/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostApplianceUpgradePoliciesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostApplianceUpgradePoliciesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostApplianceUpgradePoliciesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
