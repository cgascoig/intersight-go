// Code generated by go-swagger; DO NOT EDIT.

package asset_managed_device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new asset managed device API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for asset managed device API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAssetManagedDevicesMoid deletes an instance of asset managed device
*/
func (a *Client) DeleteAssetManagedDevicesMoid(params *DeleteAssetManagedDevicesMoidParams) (*DeleteAssetManagedDevicesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAssetManagedDevicesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAssetManagedDevicesMoid",
		Method:             "DELETE",
		PathPattern:        "/asset/ManagedDevices/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAssetManagedDevicesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAssetManagedDevicesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAssetManagedDevicesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAssetManagedDevices gets a list of asset managed device instances
*/
func (a *Client) GetAssetManagedDevices(params *GetAssetManagedDevicesParams) (*GetAssetManagedDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssetManagedDevicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAssetManagedDevices",
		Method:             "GET",
		PathPattern:        "/asset/ManagedDevices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAssetManagedDevicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssetManagedDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAssetManagedDevicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAssetManagedDevicesMoid gets a specific instance of asset managed device
*/
func (a *Client) GetAssetManagedDevicesMoid(params *GetAssetManagedDevicesMoidParams) (*GetAssetManagedDevicesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssetManagedDevicesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAssetManagedDevicesMoid",
		Method:             "GET",
		PathPattern:        "/asset/ManagedDevices/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAssetManagedDevicesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssetManagedDevicesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAssetManagedDevicesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchAssetManagedDevicesMoid updates an instance of asset managed device
*/
func (a *Client) PatchAssetManagedDevicesMoid(params *PatchAssetManagedDevicesMoidParams) (*PatchAssetManagedDevicesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAssetManagedDevicesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAssetManagedDevicesMoid",
		Method:             "PATCH",
		PathPattern:        "/asset/ManagedDevices/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAssetManagedDevicesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAssetManagedDevicesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchAssetManagedDevicesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostAssetManagedDevices creates an instance of asset managed device
*/
func (a *Client) PostAssetManagedDevices(params *PostAssetManagedDevicesParams) (*PostAssetManagedDevicesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAssetManagedDevicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAssetManagedDevices",
		Method:             "POST",
		PathPattern:        "/asset/ManagedDevices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAssetManagedDevicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAssetManagedDevicesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostAssetManagedDevicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostAssetManagedDevicesMoid updates an instance of asset managed device
*/
func (a *Client) PostAssetManagedDevicesMoid(params *PostAssetManagedDevicesMoidParams) (*PostAssetManagedDevicesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAssetManagedDevicesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAssetManagedDevicesMoid",
		Method:             "POST",
		PathPattern:        "/asset/ManagedDevices/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAssetManagedDevicesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAssetManagedDevicesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostAssetManagedDevicesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
