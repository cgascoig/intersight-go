// Code generated by go-swagger; DO NOT EDIT.

package asset_managed_device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetAssetManagedDevicesMoidReader is a Reader for the GetAssetManagedDevicesMoid structure.
type GetAssetManagedDevicesMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAssetManagedDevicesMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAssetManagedDevicesMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetAssetManagedDevicesMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetAssetManagedDevicesMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetAssetManagedDevicesMoidOK creates a GetAssetManagedDevicesMoidOK with default headers values
func NewGetAssetManagedDevicesMoidOK() *GetAssetManagedDevicesMoidOK {
	return &GetAssetManagedDevicesMoidOK{}
}

/*GetAssetManagedDevicesMoidOK handles this case with default header values.

An instance of assetManagedDevice
*/
type GetAssetManagedDevicesMoidOK struct {
	Payload *models.AssetManagedDevice
}

func (o *GetAssetManagedDevicesMoidOK) Error() string {
	return fmt.Sprintf("[GET /asset/ManagedDevices/{moid}][%d] getAssetManagedDevicesMoidOK  %+v", 200, o.Payload)
}

func (o *GetAssetManagedDevicesMoidOK) GetPayload() *models.AssetManagedDevice {
	return o.Payload
}

func (o *GetAssetManagedDevicesMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AssetManagedDevice)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAssetManagedDevicesMoidNotFound creates a GetAssetManagedDevicesMoidNotFound with default headers values
func NewGetAssetManagedDevicesMoidNotFound() *GetAssetManagedDevicesMoidNotFound {
	return &GetAssetManagedDevicesMoidNotFound{}
}

/*GetAssetManagedDevicesMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetAssetManagedDevicesMoidNotFound struct {
}

func (o *GetAssetManagedDevicesMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /asset/ManagedDevices/{moid}][%d] getAssetManagedDevicesMoidNotFound ", 404)
}

func (o *GetAssetManagedDevicesMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAssetManagedDevicesMoidDefault creates a GetAssetManagedDevicesMoidDefault with default headers values
func NewGetAssetManagedDevicesMoidDefault(code int) *GetAssetManagedDevicesMoidDefault {
	return &GetAssetManagedDevicesMoidDefault{
		_statusCode: code,
	}
}

/*GetAssetManagedDevicesMoidDefault handles this case with default header values.

Unexpected error
*/
type GetAssetManagedDevicesMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get asset managed devices moid default response
func (o *GetAssetManagedDevicesMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetAssetManagedDevicesMoidDefault) Error() string {
	return fmt.Sprintf("[GET /asset/ManagedDevices/{moid}][%d] GetAssetManagedDevicesMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetAssetManagedDevicesMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAssetManagedDevicesMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
