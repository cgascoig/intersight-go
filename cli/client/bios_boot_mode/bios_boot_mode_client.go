// Code generated by go-swagger; DO NOT EDIT.

package bios_boot_mode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new bios boot mode API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for bios boot mode API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetBiosBootModes gets a list of bios boot mode instances
*/
func (a *Client) GetBiosBootModes(params *GetBiosBootModesParams) (*GetBiosBootModesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBiosBootModesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBiosBootModes",
		Method:             "GET",
		PathPattern:        "/bios/BootModes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBiosBootModesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBiosBootModesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetBiosBootModesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetBiosBootModesMoid gets a specific instance of bios boot mode
*/
func (a *Client) GetBiosBootModesMoid(params *GetBiosBootModesMoidParams) (*GetBiosBootModesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBiosBootModesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBiosBootModesMoid",
		Method:             "GET",
		PathPattern:        "/bios/BootModes/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBiosBootModesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBiosBootModesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetBiosBootModesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchBiosBootModesMoid updates an instance of bios boot mode
*/
func (a *Client) PatchBiosBootModesMoid(params *PatchBiosBootModesMoidParams) (*PatchBiosBootModesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchBiosBootModesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchBiosBootModesMoid",
		Method:             "PATCH",
		PathPattern:        "/bios/BootModes/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchBiosBootModesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchBiosBootModesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchBiosBootModesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostBiosBootModesMoid updates an instance of bios boot mode
*/
func (a *Client) PostBiosBootModesMoid(params *PostBiosBootModesMoidParams) (*PostBiosBootModesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBiosBootModesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostBiosBootModesMoid",
		Method:             "POST",
		PathPattern:        "/bios/BootModes/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostBiosBootModesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostBiosBootModesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostBiosBootModesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
