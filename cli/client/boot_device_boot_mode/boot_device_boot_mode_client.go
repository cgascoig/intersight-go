// Code generated by go-swagger; DO NOT EDIT.

package boot_device_boot_mode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new boot device boot mode API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for boot device boot mode API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetBootDeviceBootModes gets a list of boot device boot mode instances
*/
func (a *Client) GetBootDeviceBootModes(params *GetBootDeviceBootModesParams) (*GetBootDeviceBootModesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBootDeviceBootModesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBootDeviceBootModes",
		Method:             "GET",
		PathPattern:        "/boot/DeviceBootModes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBootDeviceBootModesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBootDeviceBootModesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetBootDeviceBootModesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetBootDeviceBootModesMoid gets a specific instance of boot device boot mode
*/
func (a *Client) GetBootDeviceBootModesMoid(params *GetBootDeviceBootModesMoidParams) (*GetBootDeviceBootModesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBootDeviceBootModesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBootDeviceBootModesMoid",
		Method:             "GET",
		PathPattern:        "/boot/DeviceBootModes/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBootDeviceBootModesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBootDeviceBootModesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetBootDeviceBootModesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchBootDeviceBootModesMoid updates an instance of boot device boot mode
*/
func (a *Client) PatchBootDeviceBootModesMoid(params *PatchBootDeviceBootModesMoidParams) (*PatchBootDeviceBootModesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchBootDeviceBootModesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchBootDeviceBootModesMoid",
		Method:             "PATCH",
		PathPattern:        "/boot/DeviceBootModes/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchBootDeviceBootModesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchBootDeviceBootModesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchBootDeviceBootModesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostBootDeviceBootModesMoid updates an instance of boot device boot mode
*/
func (a *Client) PostBootDeviceBootModesMoid(params *PostBootDeviceBootModesMoidParams) (*PostBootDeviceBootModesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBootDeviceBootModesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostBootDeviceBootModesMoid",
		Method:             "POST",
		PathPattern:        "/boot/DeviceBootModes/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostBootDeviceBootModesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostBootDeviceBootModesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostBootDeviceBootModesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
