// Code generated by go-swagger; DO NOT EDIT.

package boot_device_boot_mode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetBootDeviceBootModesMoidReader is a Reader for the GetBootDeviceBootModesMoid structure.
type GetBootDeviceBootModesMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBootDeviceBootModesMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBootDeviceBootModesMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetBootDeviceBootModesMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetBootDeviceBootModesMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetBootDeviceBootModesMoidOK creates a GetBootDeviceBootModesMoidOK with default headers values
func NewGetBootDeviceBootModesMoidOK() *GetBootDeviceBootModesMoidOK {
	return &GetBootDeviceBootModesMoidOK{}
}

/*GetBootDeviceBootModesMoidOK handles this case with default header values.

An instance of bootDeviceBootMode
*/
type GetBootDeviceBootModesMoidOK struct {
	Payload *models.BootDeviceBootMode
}

func (o *GetBootDeviceBootModesMoidOK) Error() string {
	return fmt.Sprintf("[GET /boot/DeviceBootModes/{moid}][%d] getBootDeviceBootModesMoidOK  %+v", 200, o.Payload)
}

func (o *GetBootDeviceBootModesMoidOK) GetPayload() *models.BootDeviceBootMode {
	return o.Payload
}

func (o *GetBootDeviceBootModesMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BootDeviceBootMode)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBootDeviceBootModesMoidNotFound creates a GetBootDeviceBootModesMoidNotFound with default headers values
func NewGetBootDeviceBootModesMoidNotFound() *GetBootDeviceBootModesMoidNotFound {
	return &GetBootDeviceBootModesMoidNotFound{}
}

/*GetBootDeviceBootModesMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetBootDeviceBootModesMoidNotFound struct {
}

func (o *GetBootDeviceBootModesMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /boot/DeviceBootModes/{moid}][%d] getBootDeviceBootModesMoidNotFound ", 404)
}

func (o *GetBootDeviceBootModesMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBootDeviceBootModesMoidDefault creates a GetBootDeviceBootModesMoidDefault with default headers values
func NewGetBootDeviceBootModesMoidDefault(code int) *GetBootDeviceBootModesMoidDefault {
	return &GetBootDeviceBootModesMoidDefault{
		_statusCode: code,
	}
}

/*GetBootDeviceBootModesMoidDefault handles this case with default header values.

Unexpected error
*/
type GetBootDeviceBootModesMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get boot device boot modes moid default response
func (o *GetBootDeviceBootModesMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetBootDeviceBootModesMoidDefault) Error() string {
	return fmt.Sprintf("[GET /boot/DeviceBootModes/{moid}][%d] GetBootDeviceBootModesMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetBootDeviceBootModesMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetBootDeviceBootModesMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
