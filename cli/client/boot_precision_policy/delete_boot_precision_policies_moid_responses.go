// Code generated by go-swagger; DO NOT EDIT.

package boot_precision_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// DeleteBootPrecisionPoliciesMoidReader is a Reader for the DeleteBootPrecisionPoliciesMoid structure.
type DeleteBootPrecisionPoliciesMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteBootPrecisionPoliciesMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteBootPrecisionPoliciesMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteBootPrecisionPoliciesMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteBootPrecisionPoliciesMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteBootPrecisionPoliciesMoidOK creates a DeleteBootPrecisionPoliciesMoidOK with default headers values
func NewDeleteBootPrecisionPoliciesMoidOK() *DeleteBootPrecisionPoliciesMoidOK {
	return &DeleteBootPrecisionPoliciesMoidOK{}
}

/*DeleteBootPrecisionPoliciesMoidOK handles this case with default header values.

Delete successful.
*/
type DeleteBootPrecisionPoliciesMoidOK struct {
}

func (o *DeleteBootPrecisionPoliciesMoidOK) Error() string {
	return fmt.Sprintf("[DELETE /boot/PrecisionPolicies/{moid}][%d] deleteBootPrecisionPoliciesMoidOK ", 200)
}

func (o *DeleteBootPrecisionPoliciesMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteBootPrecisionPoliciesMoidNotFound creates a DeleteBootPrecisionPoliciesMoidNotFound with default headers values
func NewDeleteBootPrecisionPoliciesMoidNotFound() *DeleteBootPrecisionPoliciesMoidNotFound {
	return &DeleteBootPrecisionPoliciesMoidNotFound{}
}

/*DeleteBootPrecisionPoliciesMoidNotFound handles this case with default header values.

Instance not found.
*/
type DeleteBootPrecisionPoliciesMoidNotFound struct {
}

func (o *DeleteBootPrecisionPoliciesMoidNotFound) Error() string {
	return fmt.Sprintf("[DELETE /boot/PrecisionPolicies/{moid}][%d] deleteBootPrecisionPoliciesMoidNotFound ", 404)
}

func (o *DeleteBootPrecisionPoliciesMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteBootPrecisionPoliciesMoidDefault creates a DeleteBootPrecisionPoliciesMoidDefault with default headers values
func NewDeleteBootPrecisionPoliciesMoidDefault(code int) *DeleteBootPrecisionPoliciesMoidDefault {
	return &DeleteBootPrecisionPoliciesMoidDefault{
		_statusCode: code,
	}
}

/*DeleteBootPrecisionPoliciesMoidDefault handles this case with default header values.

Unexpected error
*/
type DeleteBootPrecisionPoliciesMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the delete boot precision policies moid default response
func (o *DeleteBootPrecisionPoliciesMoidDefault) Code() int {
	return o._statusCode
}

func (o *DeleteBootPrecisionPoliciesMoidDefault) Error() string {
	return fmt.Sprintf("[DELETE /boot/PrecisionPolicies/{moid}][%d] DeleteBootPrecisionPoliciesMoid default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteBootPrecisionPoliciesMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteBootPrecisionPoliciesMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
