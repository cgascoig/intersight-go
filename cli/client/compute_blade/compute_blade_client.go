// Code generated by go-swagger; DO NOT EDIT.

package compute_blade

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new compute blade API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for compute blade API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetComputeBlades gets a list of compute blade instances
*/
func (a *Client) GetComputeBlades(params *GetComputeBladesParams) (*GetComputeBladesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComputeBladesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetComputeBlades",
		Method:             "GET",
		PathPattern:        "/compute/Blades",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComputeBladesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComputeBladesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetComputeBladesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetComputeBladesMoid gets a specific instance of compute blade
*/
func (a *Client) GetComputeBladesMoid(params *GetComputeBladesMoidParams) (*GetComputeBladesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComputeBladesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetComputeBladesMoid",
		Method:             "GET",
		PathPattern:        "/compute/Blades/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComputeBladesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComputeBladesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetComputeBladesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchComputeBladesMoid updates an instance of compute blade
*/
func (a *Client) PatchComputeBladesMoid(params *PatchComputeBladesMoidParams) (*PatchComputeBladesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchComputeBladesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchComputeBladesMoid",
		Method:             "PATCH",
		PathPattern:        "/compute/Blades/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchComputeBladesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchComputeBladesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchComputeBladesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostComputeBladesMoid updates an instance of compute blade
*/
func (a *Client) PostComputeBladesMoid(params *PostComputeBladesMoidParams) (*PostComputeBladesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostComputeBladesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostComputeBladesMoid",
		Method:             "POST",
		PathPattern:        "/compute/Blades/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostComputeBladesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostComputeBladesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostComputeBladesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
