// Code generated by go-swagger; DO NOT EDIT.

package compute_board

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new compute board API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for compute board API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetComputeBoards gets a list of compute board instances
*/
func (a *Client) GetComputeBoards(params *GetComputeBoardsParams) (*GetComputeBoardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComputeBoardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetComputeBoards",
		Method:             "GET",
		PathPattern:        "/compute/Boards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComputeBoardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComputeBoardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetComputeBoardsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetComputeBoardsMoid gets a specific instance of compute board
*/
func (a *Client) GetComputeBoardsMoid(params *GetComputeBoardsMoidParams) (*GetComputeBoardsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComputeBoardsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetComputeBoardsMoid",
		Method:             "GET",
		PathPattern:        "/compute/Boards/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComputeBoardsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComputeBoardsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetComputeBoardsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchComputeBoardsMoid updates an instance of compute board
*/
func (a *Client) PatchComputeBoardsMoid(params *PatchComputeBoardsMoidParams) (*PatchComputeBoardsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchComputeBoardsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchComputeBoardsMoid",
		Method:             "PATCH",
		PathPattern:        "/compute/Boards/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchComputeBoardsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchComputeBoardsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchComputeBoardsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostComputeBoardsMoid updates an instance of compute board
*/
func (a *Client) PostComputeBoardsMoid(params *PostComputeBoardsMoidParams) (*PostComputeBoardsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostComputeBoardsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostComputeBoardsMoid",
		Method:             "POST",
		PathPattern:        "/compute/Boards/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostComputeBoardsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostComputeBoardsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostComputeBoardsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
