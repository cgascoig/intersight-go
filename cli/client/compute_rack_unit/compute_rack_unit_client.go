// Code generated by go-swagger; DO NOT EDIT.

package compute_rack_unit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new compute rack unit API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for compute rack unit API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetComputeRackUnits gets a list of compute rack unit instances
*/
func (a *Client) GetComputeRackUnits(params *GetComputeRackUnitsParams) (*GetComputeRackUnitsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComputeRackUnitsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetComputeRackUnits",
		Method:             "GET",
		PathPattern:        "/compute/RackUnits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComputeRackUnitsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComputeRackUnitsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetComputeRackUnitsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetComputeRackUnitsMoid gets a specific instance of compute rack unit
*/
func (a *Client) GetComputeRackUnitsMoid(params *GetComputeRackUnitsMoidParams) (*GetComputeRackUnitsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComputeRackUnitsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetComputeRackUnitsMoid",
		Method:             "GET",
		PathPattern:        "/compute/RackUnits/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComputeRackUnitsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComputeRackUnitsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetComputeRackUnitsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchComputeRackUnitsMoid updates an instance of compute rack unit
*/
func (a *Client) PatchComputeRackUnitsMoid(params *PatchComputeRackUnitsMoidParams) (*PatchComputeRackUnitsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchComputeRackUnitsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchComputeRackUnitsMoid",
		Method:             "PATCH",
		PathPattern:        "/compute/RackUnits/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchComputeRackUnitsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchComputeRackUnitsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchComputeRackUnitsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostComputeRackUnitsMoid updates an instance of compute rack unit
*/
func (a *Client) PostComputeRackUnitsMoid(params *PostComputeRackUnitsMoidParams) (*PostComputeRackUnitsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostComputeRackUnitsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostComputeRackUnitsMoid",
		Method:             "POST",
		PathPattern:        "/compute/RackUnits/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostComputeRackUnitsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostComputeRackUnitsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostComputeRackUnitsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
