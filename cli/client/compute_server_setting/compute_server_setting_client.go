// Code generated by go-swagger; DO NOT EDIT.

package compute_server_setting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new compute server setting API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for compute server setting API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetComputeServerSettings gets a list of compute server setting instances
*/
func (a *Client) GetComputeServerSettings(params *GetComputeServerSettingsParams) (*GetComputeServerSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComputeServerSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetComputeServerSettings",
		Method:             "GET",
		PathPattern:        "/compute/ServerSettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComputeServerSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComputeServerSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetComputeServerSettingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetComputeServerSettingsMoid gets a specific instance of compute server setting
*/
func (a *Client) GetComputeServerSettingsMoid(params *GetComputeServerSettingsMoidParams) (*GetComputeServerSettingsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComputeServerSettingsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetComputeServerSettingsMoid",
		Method:             "GET",
		PathPattern:        "/compute/ServerSettings/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComputeServerSettingsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComputeServerSettingsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetComputeServerSettingsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchComputeServerSettingsMoid updates an instance of compute server setting
*/
func (a *Client) PatchComputeServerSettingsMoid(params *PatchComputeServerSettingsMoidParams) (*PatchComputeServerSettingsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchComputeServerSettingsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchComputeServerSettingsMoid",
		Method:             "PATCH",
		PathPattern:        "/compute/ServerSettings/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchComputeServerSettingsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchComputeServerSettingsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchComputeServerSettingsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostComputeServerSettingsMoid updates an instance of compute server setting
*/
func (a *Client) PostComputeServerSettingsMoid(params *PostComputeServerSettingsMoidParams) (*PostComputeServerSettingsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostComputeServerSettingsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostComputeServerSettingsMoid",
		Method:             "POST",
		PathPattern:        "/compute/ServerSettings/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostComputeServerSettingsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostComputeServerSettingsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostComputeServerSettingsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
