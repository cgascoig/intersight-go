// Code generated by go-swagger; DO NOT EDIT.

package cond_hcl_status_job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new cond hcl status job API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cond hcl status job API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetCondHclStatusJobs gets a list of cond hcl status job instances
*/
func (a *Client) GetCondHclStatusJobs(params *GetCondHclStatusJobsParams) (*GetCondHclStatusJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCondHclStatusJobsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCondHclStatusJobs",
		Method:             "GET",
		PathPattern:        "/cond/HclStatusJobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCondHclStatusJobsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCondHclStatusJobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCondHclStatusJobsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCondHclStatusJobsMoid gets a specific instance of cond hcl status job
*/
func (a *Client) GetCondHclStatusJobsMoid(params *GetCondHclStatusJobsMoidParams) (*GetCondHclStatusJobsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCondHclStatusJobsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCondHclStatusJobsMoid",
		Method:             "GET",
		PathPattern:        "/cond/HclStatusJobs/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCondHclStatusJobsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCondHclStatusJobsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCondHclStatusJobsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
