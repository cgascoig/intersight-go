// Code generated by go-swagger; DO NOT EDIT.

package cond_hcl_status_job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetCondHclStatusJobsMoidReader is a Reader for the GetCondHclStatusJobsMoid structure.
type GetCondHclStatusJobsMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCondHclStatusJobsMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCondHclStatusJobsMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetCondHclStatusJobsMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetCondHclStatusJobsMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetCondHclStatusJobsMoidOK creates a GetCondHclStatusJobsMoidOK with default headers values
func NewGetCondHclStatusJobsMoidOK() *GetCondHclStatusJobsMoidOK {
	return &GetCondHclStatusJobsMoidOK{}
}

/*GetCondHclStatusJobsMoidOK handles this case with default header values.

An instance of condHclStatusJob
*/
type GetCondHclStatusJobsMoidOK struct {
	Payload *models.CondHclStatusJob
}

func (o *GetCondHclStatusJobsMoidOK) Error() string {
	return fmt.Sprintf("[GET /cond/HclStatusJobs/{moid}][%d] getCondHclStatusJobsMoidOK  %+v", 200, o.Payload)
}

func (o *GetCondHclStatusJobsMoidOK) GetPayload() *models.CondHclStatusJob {
	return o.Payload
}

func (o *GetCondHclStatusJobsMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CondHclStatusJob)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCondHclStatusJobsMoidNotFound creates a GetCondHclStatusJobsMoidNotFound with default headers values
func NewGetCondHclStatusJobsMoidNotFound() *GetCondHclStatusJobsMoidNotFound {
	return &GetCondHclStatusJobsMoidNotFound{}
}

/*GetCondHclStatusJobsMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetCondHclStatusJobsMoidNotFound struct {
}

func (o *GetCondHclStatusJobsMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /cond/HclStatusJobs/{moid}][%d] getCondHclStatusJobsMoidNotFound ", 404)
}

func (o *GetCondHclStatusJobsMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCondHclStatusJobsMoidDefault creates a GetCondHclStatusJobsMoidDefault with default headers values
func NewGetCondHclStatusJobsMoidDefault(code int) *GetCondHclStatusJobsMoidDefault {
	return &GetCondHclStatusJobsMoidDefault{
		_statusCode: code,
	}
}

/*GetCondHclStatusJobsMoidDefault handles this case with default header values.

Unexpected error
*/
type GetCondHclStatusJobsMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get cond hcl status jobs moid default response
func (o *GetCondHclStatusJobsMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetCondHclStatusJobsMoidDefault) Error() string {
	return fmt.Sprintf("[GET /cond/HclStatusJobs/{moid}][%d] GetCondHclStatusJobsMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetCondHclStatusJobsMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetCondHclStatusJobsMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
