// Code generated by go-swagger; DO NOT EDIT.

package cvd_deployment_task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new cvd deployment task API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cvd deployment task API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteCvdDeploymentTasksMoid deletes an instance of cvd deployment task
*/
func (a *Client) DeleteCvdDeploymentTasksMoid(params *DeleteCvdDeploymentTasksMoidParams) (*DeleteCvdDeploymentTasksMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCvdDeploymentTasksMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCvdDeploymentTasksMoid",
		Method:             "DELETE",
		PathPattern:        "/cvd/DeploymentTasks/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCvdDeploymentTasksMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCvdDeploymentTasksMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteCvdDeploymentTasksMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCvdDeploymentTasks gets a list of cvd deployment task instances
*/
func (a *Client) GetCvdDeploymentTasks(params *GetCvdDeploymentTasksParams) (*GetCvdDeploymentTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCvdDeploymentTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCvdDeploymentTasks",
		Method:             "GET",
		PathPattern:        "/cvd/DeploymentTasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCvdDeploymentTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCvdDeploymentTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCvdDeploymentTasksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCvdDeploymentTasksMoid gets a specific instance of cvd deployment task
*/
func (a *Client) GetCvdDeploymentTasksMoid(params *GetCvdDeploymentTasksMoidParams) (*GetCvdDeploymentTasksMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCvdDeploymentTasksMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCvdDeploymentTasksMoid",
		Method:             "GET",
		PathPattern:        "/cvd/DeploymentTasks/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCvdDeploymentTasksMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCvdDeploymentTasksMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCvdDeploymentTasksMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchCvdDeploymentTasksMoid updates an instance of cvd deployment task
*/
func (a *Client) PatchCvdDeploymentTasksMoid(params *PatchCvdDeploymentTasksMoidParams) (*PatchCvdDeploymentTasksMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCvdDeploymentTasksMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchCvdDeploymentTasksMoid",
		Method:             "PATCH",
		PathPattern:        "/cvd/DeploymentTasks/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchCvdDeploymentTasksMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCvdDeploymentTasksMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchCvdDeploymentTasksMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostCvdDeploymentTasks creates an instance of cvd deployment task
*/
func (a *Client) PostCvdDeploymentTasks(params *PostCvdDeploymentTasksParams) (*PostCvdDeploymentTasksCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCvdDeploymentTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCvdDeploymentTasks",
		Method:             "POST",
		PathPattern:        "/cvd/DeploymentTasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCvdDeploymentTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCvdDeploymentTasksCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostCvdDeploymentTasksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostCvdDeploymentTasksMoid updates an instance of cvd deployment task
*/
func (a *Client) PostCvdDeploymentTasksMoid(params *PostCvdDeploymentTasksMoidParams) (*PostCvdDeploymentTasksMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCvdDeploymentTasksMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCvdDeploymentTasksMoid",
		Method:             "POST",
		PathPattern:        "/cvd/DeploymentTasks/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCvdDeploymentTasksMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCvdDeploymentTasksMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostCvdDeploymentTasksMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
