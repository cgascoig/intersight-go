// Code generated by go-swagger; DO NOT EDIT.

package cvd_deployment_task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// DeleteCvdDeploymentTasksMoidReader is a Reader for the DeleteCvdDeploymentTasksMoid structure.
type DeleteCvdDeploymentTasksMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteCvdDeploymentTasksMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteCvdDeploymentTasksMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteCvdDeploymentTasksMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteCvdDeploymentTasksMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteCvdDeploymentTasksMoidOK creates a DeleteCvdDeploymentTasksMoidOK with default headers values
func NewDeleteCvdDeploymentTasksMoidOK() *DeleteCvdDeploymentTasksMoidOK {
	return &DeleteCvdDeploymentTasksMoidOK{}
}

/*DeleteCvdDeploymentTasksMoidOK handles this case with default header values.

Delete successful.
*/
type DeleteCvdDeploymentTasksMoidOK struct {
}

func (o *DeleteCvdDeploymentTasksMoidOK) Error() string {
	return fmt.Sprintf("[DELETE /cvd/DeploymentTasks/{moid}][%d] deleteCvdDeploymentTasksMoidOK ", 200)
}

func (o *DeleteCvdDeploymentTasksMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteCvdDeploymentTasksMoidNotFound creates a DeleteCvdDeploymentTasksMoidNotFound with default headers values
func NewDeleteCvdDeploymentTasksMoidNotFound() *DeleteCvdDeploymentTasksMoidNotFound {
	return &DeleteCvdDeploymentTasksMoidNotFound{}
}

/*DeleteCvdDeploymentTasksMoidNotFound handles this case with default header values.

Instance not found.
*/
type DeleteCvdDeploymentTasksMoidNotFound struct {
}

func (o *DeleteCvdDeploymentTasksMoidNotFound) Error() string {
	return fmt.Sprintf("[DELETE /cvd/DeploymentTasks/{moid}][%d] deleteCvdDeploymentTasksMoidNotFound ", 404)
}

func (o *DeleteCvdDeploymentTasksMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteCvdDeploymentTasksMoidDefault creates a DeleteCvdDeploymentTasksMoidDefault with default headers values
func NewDeleteCvdDeploymentTasksMoidDefault(code int) *DeleteCvdDeploymentTasksMoidDefault {
	return &DeleteCvdDeploymentTasksMoidDefault{
		_statusCode: code,
	}
}

/*DeleteCvdDeploymentTasksMoidDefault handles this case with default header values.

Unexpected error
*/
type DeleteCvdDeploymentTasksMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the delete cvd deployment tasks moid default response
func (o *DeleteCvdDeploymentTasksMoidDefault) Code() int {
	return o._statusCode
}

func (o *DeleteCvdDeploymentTasksMoidDefault) Error() string {
	return fmt.Sprintf("[DELETE /cvd/DeploymentTasks/{moid}][%d] DeleteCvdDeploymentTasksMoid default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteCvdDeploymentTasksMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteCvdDeploymentTasksMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
