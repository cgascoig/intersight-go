// Code generated by go-swagger; DO NOT EDIT.

package cvd_validation_task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new cvd validation task API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cvd validation task API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteCvdValidationTasksMoid deletes an instance of cvd validation task
*/
func (a *Client) DeleteCvdValidationTasksMoid(params *DeleteCvdValidationTasksMoidParams) (*DeleteCvdValidationTasksMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCvdValidationTasksMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCvdValidationTasksMoid",
		Method:             "DELETE",
		PathPattern:        "/cvd/ValidationTasks/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCvdValidationTasksMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCvdValidationTasksMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteCvdValidationTasksMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCvdValidationTasks gets a list of cvd validation task instances
*/
func (a *Client) GetCvdValidationTasks(params *GetCvdValidationTasksParams) (*GetCvdValidationTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCvdValidationTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCvdValidationTasks",
		Method:             "GET",
		PathPattern:        "/cvd/ValidationTasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCvdValidationTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCvdValidationTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCvdValidationTasksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCvdValidationTasksMoid gets a specific instance of cvd validation task
*/
func (a *Client) GetCvdValidationTasksMoid(params *GetCvdValidationTasksMoidParams) (*GetCvdValidationTasksMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCvdValidationTasksMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCvdValidationTasksMoid",
		Method:             "GET",
		PathPattern:        "/cvd/ValidationTasks/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCvdValidationTasksMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCvdValidationTasksMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCvdValidationTasksMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchCvdValidationTasksMoid updates an instance of cvd validation task
*/
func (a *Client) PatchCvdValidationTasksMoid(params *PatchCvdValidationTasksMoidParams) (*PatchCvdValidationTasksMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCvdValidationTasksMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchCvdValidationTasksMoid",
		Method:             "PATCH",
		PathPattern:        "/cvd/ValidationTasks/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchCvdValidationTasksMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCvdValidationTasksMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchCvdValidationTasksMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostCvdValidationTasks creates an instance of cvd validation task
*/
func (a *Client) PostCvdValidationTasks(params *PostCvdValidationTasksParams) (*PostCvdValidationTasksCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCvdValidationTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCvdValidationTasks",
		Method:             "POST",
		PathPattern:        "/cvd/ValidationTasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCvdValidationTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCvdValidationTasksCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostCvdValidationTasksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostCvdValidationTasksMoid updates an instance of cvd validation task
*/
func (a *Client) PostCvdValidationTasksMoid(params *PostCvdValidationTasksMoidParams) (*PostCvdValidationTasksMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCvdValidationTasksMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCvdValidationTasksMoid",
		Method:             "POST",
		PathPattern:        "/cvd/ValidationTasks/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCvdValidationTasksMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCvdValidationTasksMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostCvdValidationTasksMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
