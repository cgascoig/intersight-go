// Code generated by go-swagger; DO NOT EDIT.

package cvd_validation_task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetCvdValidationTasksMoidReader is a Reader for the GetCvdValidationTasksMoid structure.
type GetCvdValidationTasksMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCvdValidationTasksMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCvdValidationTasksMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetCvdValidationTasksMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetCvdValidationTasksMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetCvdValidationTasksMoidOK creates a GetCvdValidationTasksMoidOK with default headers values
func NewGetCvdValidationTasksMoidOK() *GetCvdValidationTasksMoidOK {
	return &GetCvdValidationTasksMoidOK{}
}

/*GetCvdValidationTasksMoidOK handles this case with default header values.

An instance of cvdValidationTask
*/
type GetCvdValidationTasksMoidOK struct {
	Payload *models.CvdValidationTask
}

func (o *GetCvdValidationTasksMoidOK) Error() string {
	return fmt.Sprintf("[GET /cvd/ValidationTasks/{moid}][%d] getCvdValidationTasksMoidOK  %+v", 200, o.Payload)
}

func (o *GetCvdValidationTasksMoidOK) GetPayload() *models.CvdValidationTask {
	return o.Payload
}

func (o *GetCvdValidationTasksMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CvdValidationTask)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCvdValidationTasksMoidNotFound creates a GetCvdValidationTasksMoidNotFound with default headers values
func NewGetCvdValidationTasksMoidNotFound() *GetCvdValidationTasksMoidNotFound {
	return &GetCvdValidationTasksMoidNotFound{}
}

/*GetCvdValidationTasksMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetCvdValidationTasksMoidNotFound struct {
}

func (o *GetCvdValidationTasksMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /cvd/ValidationTasks/{moid}][%d] getCvdValidationTasksMoidNotFound ", 404)
}

func (o *GetCvdValidationTasksMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCvdValidationTasksMoidDefault creates a GetCvdValidationTasksMoidDefault with default headers values
func NewGetCvdValidationTasksMoidDefault(code int) *GetCvdValidationTasksMoidDefault {
	return &GetCvdValidationTasksMoidDefault{
		_statusCode: code,
	}
}

/*GetCvdValidationTasksMoidDefault handles this case with default header values.

Unexpected error
*/
type GetCvdValidationTasksMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get cvd validation tasks moid default response
func (o *GetCvdValidationTasksMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetCvdValidationTasksMoidDefault) Error() string {
	return fmt.Sprintf("[GET /cvd/ValidationTasks/{moid}][%d] GetCvdValidationTasksMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetCvdValidationTasksMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetCvdValidationTasksMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
