// Code generated by go-swagger; DO NOT EDIT.

package deviceconnector_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// DeleteDeviceconnectorPoliciesMoidReader is a Reader for the DeleteDeviceconnectorPoliciesMoid structure.
type DeleteDeviceconnectorPoliciesMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteDeviceconnectorPoliciesMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteDeviceconnectorPoliciesMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteDeviceconnectorPoliciesMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteDeviceconnectorPoliciesMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteDeviceconnectorPoliciesMoidOK creates a DeleteDeviceconnectorPoliciesMoidOK with default headers values
func NewDeleteDeviceconnectorPoliciesMoidOK() *DeleteDeviceconnectorPoliciesMoidOK {
	return &DeleteDeviceconnectorPoliciesMoidOK{}
}

/*DeleteDeviceconnectorPoliciesMoidOK handles this case with default header values.

Delete successful.
*/
type DeleteDeviceconnectorPoliciesMoidOK struct {
}

func (o *DeleteDeviceconnectorPoliciesMoidOK) Error() string {
	return fmt.Sprintf("[DELETE /deviceconnector/Policies/{moid}][%d] deleteDeviceconnectorPoliciesMoidOK ", 200)
}

func (o *DeleteDeviceconnectorPoliciesMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteDeviceconnectorPoliciesMoidNotFound creates a DeleteDeviceconnectorPoliciesMoidNotFound with default headers values
func NewDeleteDeviceconnectorPoliciesMoidNotFound() *DeleteDeviceconnectorPoliciesMoidNotFound {
	return &DeleteDeviceconnectorPoliciesMoidNotFound{}
}

/*DeleteDeviceconnectorPoliciesMoidNotFound handles this case with default header values.

Instance not found.
*/
type DeleteDeviceconnectorPoliciesMoidNotFound struct {
}

func (o *DeleteDeviceconnectorPoliciesMoidNotFound) Error() string {
	return fmt.Sprintf("[DELETE /deviceconnector/Policies/{moid}][%d] deleteDeviceconnectorPoliciesMoidNotFound ", 404)
}

func (o *DeleteDeviceconnectorPoliciesMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteDeviceconnectorPoliciesMoidDefault creates a DeleteDeviceconnectorPoliciesMoidDefault with default headers values
func NewDeleteDeviceconnectorPoliciesMoidDefault(code int) *DeleteDeviceconnectorPoliciesMoidDefault {
	return &DeleteDeviceconnectorPoliciesMoidDefault{
		_statusCode: code,
	}
}

/*DeleteDeviceconnectorPoliciesMoidDefault handles this case with default header values.

Unexpected error
*/
type DeleteDeviceconnectorPoliciesMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the delete deviceconnector policies moid default response
func (o *DeleteDeviceconnectorPoliciesMoidDefault) Code() int {
	return o._statusCode
}

func (o *DeleteDeviceconnectorPoliciesMoidDefault) Error() string {
	return fmt.Sprintf("[DELETE /deviceconnector/Policies/{moid}][%d] DeleteDeviceconnectorPoliciesMoid default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteDeviceconnectorPoliciesMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteDeviceconnectorPoliciesMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
