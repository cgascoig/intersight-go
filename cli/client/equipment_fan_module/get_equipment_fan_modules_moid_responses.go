// Code generated by go-swagger; DO NOT EDIT.

package equipment_fan_module

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetEquipmentFanModulesMoidReader is a Reader for the GetEquipmentFanModulesMoid structure.
type GetEquipmentFanModulesMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEquipmentFanModulesMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEquipmentFanModulesMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetEquipmentFanModulesMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetEquipmentFanModulesMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetEquipmentFanModulesMoidOK creates a GetEquipmentFanModulesMoidOK with default headers values
func NewGetEquipmentFanModulesMoidOK() *GetEquipmentFanModulesMoidOK {
	return &GetEquipmentFanModulesMoidOK{}
}

/*GetEquipmentFanModulesMoidOK handles this case with default header values.

An instance of equipmentFanModule
*/
type GetEquipmentFanModulesMoidOK struct {
	Payload *models.EquipmentFanModule
}

func (o *GetEquipmentFanModulesMoidOK) Error() string {
	return fmt.Sprintf("[GET /equipment/FanModules/{moid}][%d] getEquipmentFanModulesMoidOK  %+v", 200, o.Payload)
}

func (o *GetEquipmentFanModulesMoidOK) GetPayload() *models.EquipmentFanModule {
	return o.Payload
}

func (o *GetEquipmentFanModulesMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EquipmentFanModule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEquipmentFanModulesMoidNotFound creates a GetEquipmentFanModulesMoidNotFound with default headers values
func NewGetEquipmentFanModulesMoidNotFound() *GetEquipmentFanModulesMoidNotFound {
	return &GetEquipmentFanModulesMoidNotFound{}
}

/*GetEquipmentFanModulesMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetEquipmentFanModulesMoidNotFound struct {
}

func (o *GetEquipmentFanModulesMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /equipment/FanModules/{moid}][%d] getEquipmentFanModulesMoidNotFound ", 404)
}

func (o *GetEquipmentFanModulesMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetEquipmentFanModulesMoidDefault creates a GetEquipmentFanModulesMoidDefault with default headers values
func NewGetEquipmentFanModulesMoidDefault(code int) *GetEquipmentFanModulesMoidDefault {
	return &GetEquipmentFanModulesMoidDefault{
		_statusCode: code,
	}
}

/*GetEquipmentFanModulesMoidDefault handles this case with default header values.

Unexpected error
*/
type GetEquipmentFanModulesMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get equipment fan modules moid default response
func (o *GetEquipmentFanModulesMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetEquipmentFanModulesMoidDefault) Error() string {
	return fmt.Sprintf("[GET /equipment/FanModules/{moid}][%d] GetEquipmentFanModulesMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetEquipmentFanModulesMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetEquipmentFanModulesMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
