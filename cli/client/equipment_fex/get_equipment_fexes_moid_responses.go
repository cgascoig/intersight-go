// Code generated by go-swagger; DO NOT EDIT.

package equipment_fex

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetEquipmentFexesMoidReader is a Reader for the GetEquipmentFexesMoid structure.
type GetEquipmentFexesMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEquipmentFexesMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEquipmentFexesMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetEquipmentFexesMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetEquipmentFexesMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetEquipmentFexesMoidOK creates a GetEquipmentFexesMoidOK with default headers values
func NewGetEquipmentFexesMoidOK() *GetEquipmentFexesMoidOK {
	return &GetEquipmentFexesMoidOK{}
}

/*GetEquipmentFexesMoidOK handles this case with default header values.

An instance of equipmentFex
*/
type GetEquipmentFexesMoidOK struct {
	Payload *models.EquipmentFex
}

func (o *GetEquipmentFexesMoidOK) Error() string {
	return fmt.Sprintf("[GET /equipment/Fexes/{moid}][%d] getEquipmentFexesMoidOK  %+v", 200, o.Payload)
}

func (o *GetEquipmentFexesMoidOK) GetPayload() *models.EquipmentFex {
	return o.Payload
}

func (o *GetEquipmentFexesMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EquipmentFex)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEquipmentFexesMoidNotFound creates a GetEquipmentFexesMoidNotFound with default headers values
func NewGetEquipmentFexesMoidNotFound() *GetEquipmentFexesMoidNotFound {
	return &GetEquipmentFexesMoidNotFound{}
}

/*GetEquipmentFexesMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetEquipmentFexesMoidNotFound struct {
}

func (o *GetEquipmentFexesMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /equipment/Fexes/{moid}][%d] getEquipmentFexesMoidNotFound ", 404)
}

func (o *GetEquipmentFexesMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetEquipmentFexesMoidDefault creates a GetEquipmentFexesMoidDefault with default headers values
func NewGetEquipmentFexesMoidDefault(code int) *GetEquipmentFexesMoidDefault {
	return &GetEquipmentFexesMoidDefault{
		_statusCode: code,
	}
}

/*GetEquipmentFexesMoidDefault handles this case with default header values.

Unexpected error
*/
type GetEquipmentFexesMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get equipment fexes moid default response
func (o *GetEquipmentFexesMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetEquipmentFexesMoidDefault) Error() string {
	return fmt.Sprintf("[GET /equipment/Fexes/{moid}][%d] GetEquipmentFexesMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetEquipmentFexesMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetEquipmentFexesMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
