// Code generated by go-swagger; DO NOT EDIT.

package equipment_io_card

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetEquipmentIoCardsMoidReader is a Reader for the GetEquipmentIoCardsMoid structure.
type GetEquipmentIoCardsMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEquipmentIoCardsMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEquipmentIoCardsMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetEquipmentIoCardsMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetEquipmentIoCardsMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetEquipmentIoCardsMoidOK creates a GetEquipmentIoCardsMoidOK with default headers values
func NewGetEquipmentIoCardsMoidOK() *GetEquipmentIoCardsMoidOK {
	return &GetEquipmentIoCardsMoidOK{}
}

/*GetEquipmentIoCardsMoidOK handles this case with default header values.

An instance of equipmentIoCard
*/
type GetEquipmentIoCardsMoidOK struct {
	Payload *models.EquipmentIoCard
}

func (o *GetEquipmentIoCardsMoidOK) Error() string {
	return fmt.Sprintf("[GET /equipment/IoCards/{moid}][%d] getEquipmentIoCardsMoidOK  %+v", 200, o.Payload)
}

func (o *GetEquipmentIoCardsMoidOK) GetPayload() *models.EquipmentIoCard {
	return o.Payload
}

func (o *GetEquipmentIoCardsMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EquipmentIoCard)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEquipmentIoCardsMoidNotFound creates a GetEquipmentIoCardsMoidNotFound with default headers values
func NewGetEquipmentIoCardsMoidNotFound() *GetEquipmentIoCardsMoidNotFound {
	return &GetEquipmentIoCardsMoidNotFound{}
}

/*GetEquipmentIoCardsMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetEquipmentIoCardsMoidNotFound struct {
}

func (o *GetEquipmentIoCardsMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /equipment/IoCards/{moid}][%d] getEquipmentIoCardsMoidNotFound ", 404)
}

func (o *GetEquipmentIoCardsMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetEquipmentIoCardsMoidDefault creates a GetEquipmentIoCardsMoidDefault with default headers values
func NewGetEquipmentIoCardsMoidDefault(code int) *GetEquipmentIoCardsMoidDefault {
	return &GetEquipmentIoCardsMoidDefault{
		_statusCode: code,
	}
}

/*GetEquipmentIoCardsMoidDefault handles this case with default header values.

Unexpected error
*/
type GetEquipmentIoCardsMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get equipment io cards moid default response
func (o *GetEquipmentIoCardsMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetEquipmentIoCardsMoidDefault) Error() string {
	return fmt.Sprintf("[GET /equipment/IoCards/{moid}][%d] GetEquipmentIoCardsMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetEquipmentIoCardsMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetEquipmentIoCardsMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
