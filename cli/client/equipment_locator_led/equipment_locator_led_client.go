// Code generated by go-swagger; DO NOT EDIT.

package equipment_locator_led

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new equipment locator led API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for equipment locator led API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetEquipmentLocatorLeds gets a list of equipment locator led instances
*/
func (a *Client) GetEquipmentLocatorLeds(params *GetEquipmentLocatorLedsParams) (*GetEquipmentLocatorLedsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEquipmentLocatorLedsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEquipmentLocatorLeds",
		Method:             "GET",
		PathPattern:        "/equipment/LocatorLeds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEquipmentLocatorLedsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEquipmentLocatorLedsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetEquipmentLocatorLedsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetEquipmentLocatorLedsMoid gets a specific instance of equipment locator led
*/
func (a *Client) GetEquipmentLocatorLedsMoid(params *GetEquipmentLocatorLedsMoidParams) (*GetEquipmentLocatorLedsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEquipmentLocatorLedsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEquipmentLocatorLedsMoid",
		Method:             "GET",
		PathPattern:        "/equipment/LocatorLeds/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEquipmentLocatorLedsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEquipmentLocatorLedsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetEquipmentLocatorLedsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchEquipmentLocatorLedsMoid updates an instance of equipment locator led
*/
func (a *Client) PatchEquipmentLocatorLedsMoid(params *PatchEquipmentLocatorLedsMoidParams) (*PatchEquipmentLocatorLedsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchEquipmentLocatorLedsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchEquipmentLocatorLedsMoid",
		Method:             "PATCH",
		PathPattern:        "/equipment/LocatorLeds/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchEquipmentLocatorLedsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchEquipmentLocatorLedsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchEquipmentLocatorLedsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostEquipmentLocatorLedsMoid updates an instance of equipment locator led
*/
func (a *Client) PostEquipmentLocatorLedsMoid(params *PostEquipmentLocatorLedsMoidParams) (*PostEquipmentLocatorLedsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEquipmentLocatorLedsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostEquipmentLocatorLedsMoid",
		Method:             "POST",
		PathPattern:        "/equipment/LocatorLeds/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostEquipmentLocatorLedsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostEquipmentLocatorLedsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostEquipmentLocatorLedsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
