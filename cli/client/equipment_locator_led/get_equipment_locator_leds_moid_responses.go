// Code generated by go-swagger; DO NOT EDIT.

package equipment_locator_led

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetEquipmentLocatorLedsMoidReader is a Reader for the GetEquipmentLocatorLedsMoid structure.
type GetEquipmentLocatorLedsMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEquipmentLocatorLedsMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEquipmentLocatorLedsMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetEquipmentLocatorLedsMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetEquipmentLocatorLedsMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetEquipmentLocatorLedsMoidOK creates a GetEquipmentLocatorLedsMoidOK with default headers values
func NewGetEquipmentLocatorLedsMoidOK() *GetEquipmentLocatorLedsMoidOK {
	return &GetEquipmentLocatorLedsMoidOK{}
}

/*GetEquipmentLocatorLedsMoidOK handles this case with default header values.

An instance of equipmentLocatorLed
*/
type GetEquipmentLocatorLedsMoidOK struct {
	Payload *models.EquipmentLocatorLed
}

func (o *GetEquipmentLocatorLedsMoidOK) Error() string {
	return fmt.Sprintf("[GET /equipment/LocatorLeds/{moid}][%d] getEquipmentLocatorLedsMoidOK  %+v", 200, o.Payload)
}

func (o *GetEquipmentLocatorLedsMoidOK) GetPayload() *models.EquipmentLocatorLed {
	return o.Payload
}

func (o *GetEquipmentLocatorLedsMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EquipmentLocatorLed)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEquipmentLocatorLedsMoidNotFound creates a GetEquipmentLocatorLedsMoidNotFound with default headers values
func NewGetEquipmentLocatorLedsMoidNotFound() *GetEquipmentLocatorLedsMoidNotFound {
	return &GetEquipmentLocatorLedsMoidNotFound{}
}

/*GetEquipmentLocatorLedsMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetEquipmentLocatorLedsMoidNotFound struct {
}

func (o *GetEquipmentLocatorLedsMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /equipment/LocatorLeds/{moid}][%d] getEquipmentLocatorLedsMoidNotFound ", 404)
}

func (o *GetEquipmentLocatorLedsMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetEquipmentLocatorLedsMoidDefault creates a GetEquipmentLocatorLedsMoidDefault with default headers values
func NewGetEquipmentLocatorLedsMoidDefault(code int) *GetEquipmentLocatorLedsMoidDefault {
	return &GetEquipmentLocatorLedsMoidDefault{
		_statusCode: code,
	}
}

/*GetEquipmentLocatorLedsMoidDefault handles this case with default header values.

Unexpected error
*/
type GetEquipmentLocatorLedsMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get equipment locator leds moid default response
func (o *GetEquipmentLocatorLedsMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetEquipmentLocatorLedsMoidDefault) Error() string {
	return fmt.Sprintf("[GET /equipment/LocatorLeds/{moid}][%d] GetEquipmentLocatorLedsMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetEquipmentLocatorLedsMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetEquipmentLocatorLedsMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
