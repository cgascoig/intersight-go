// Code generated by go-swagger; DO NOT EDIT.

package equipment_rack_enclosure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new equipment rack enclosure API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for equipment rack enclosure API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetEquipmentRackEnclosures gets a list of equipment rack enclosure instances
*/
func (a *Client) GetEquipmentRackEnclosures(params *GetEquipmentRackEnclosuresParams) (*GetEquipmentRackEnclosuresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEquipmentRackEnclosuresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEquipmentRackEnclosures",
		Method:             "GET",
		PathPattern:        "/equipment/RackEnclosures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEquipmentRackEnclosuresReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEquipmentRackEnclosuresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetEquipmentRackEnclosuresDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetEquipmentRackEnclosuresMoid gets a specific instance of equipment rack enclosure
*/
func (a *Client) GetEquipmentRackEnclosuresMoid(params *GetEquipmentRackEnclosuresMoidParams) (*GetEquipmentRackEnclosuresMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEquipmentRackEnclosuresMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEquipmentRackEnclosuresMoid",
		Method:             "GET",
		PathPattern:        "/equipment/RackEnclosures/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEquipmentRackEnclosuresMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEquipmentRackEnclosuresMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetEquipmentRackEnclosuresMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchEquipmentRackEnclosuresMoid updates an instance of equipment rack enclosure
*/
func (a *Client) PatchEquipmentRackEnclosuresMoid(params *PatchEquipmentRackEnclosuresMoidParams) (*PatchEquipmentRackEnclosuresMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchEquipmentRackEnclosuresMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchEquipmentRackEnclosuresMoid",
		Method:             "PATCH",
		PathPattern:        "/equipment/RackEnclosures/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchEquipmentRackEnclosuresMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchEquipmentRackEnclosuresMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchEquipmentRackEnclosuresMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostEquipmentRackEnclosuresMoid updates an instance of equipment rack enclosure
*/
func (a *Client) PostEquipmentRackEnclosuresMoid(params *PostEquipmentRackEnclosuresMoidParams) (*PostEquipmentRackEnclosuresMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEquipmentRackEnclosuresMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostEquipmentRackEnclosuresMoid",
		Method:             "POST",
		PathPattern:        "/equipment/RackEnclosures/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostEquipmentRackEnclosuresMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostEquipmentRackEnclosuresMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostEquipmentRackEnclosuresMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
