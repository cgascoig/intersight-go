// Code generated by go-swagger; DO NOT EDIT.

package ether_physical_port

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new ether physical port API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ether physical port API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetEtherPhysicalPorts gets a list of ether physical port instances
*/
func (a *Client) GetEtherPhysicalPorts(params *GetEtherPhysicalPortsParams) (*GetEtherPhysicalPortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEtherPhysicalPortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEtherPhysicalPorts",
		Method:             "GET",
		PathPattern:        "/ether/PhysicalPorts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEtherPhysicalPortsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEtherPhysicalPortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetEtherPhysicalPortsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetEtherPhysicalPortsMoid gets a specific instance of ether physical port
*/
func (a *Client) GetEtherPhysicalPortsMoid(params *GetEtherPhysicalPortsMoidParams) (*GetEtherPhysicalPortsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEtherPhysicalPortsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEtherPhysicalPortsMoid",
		Method:             "GET",
		PathPattern:        "/ether/PhysicalPorts/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEtherPhysicalPortsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEtherPhysicalPortsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetEtherPhysicalPortsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchEtherPhysicalPortsMoid updates an instance of ether physical port
*/
func (a *Client) PatchEtherPhysicalPortsMoid(params *PatchEtherPhysicalPortsMoidParams) (*PatchEtherPhysicalPortsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchEtherPhysicalPortsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchEtherPhysicalPortsMoid",
		Method:             "PATCH",
		PathPattern:        "/ether/PhysicalPorts/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchEtherPhysicalPortsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchEtherPhysicalPortsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchEtherPhysicalPortsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostEtherPhysicalPortsMoid updates an instance of ether physical port
*/
func (a *Client) PostEtherPhysicalPortsMoid(params *PostEtherPhysicalPortsMoidParams) (*PostEtherPhysicalPortsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEtherPhysicalPortsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostEtherPhysicalPortsMoid",
		Method:             "POST",
		PathPattern:        "/ether/PhysicalPorts/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostEtherPhysicalPortsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostEtherPhysicalPortsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostEtherPhysicalPortsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
