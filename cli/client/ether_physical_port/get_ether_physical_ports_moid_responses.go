// Code generated by go-swagger; DO NOT EDIT.

package ether_physical_port

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetEtherPhysicalPortsMoidReader is a Reader for the GetEtherPhysicalPortsMoid structure.
type GetEtherPhysicalPortsMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEtherPhysicalPortsMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEtherPhysicalPortsMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetEtherPhysicalPortsMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetEtherPhysicalPortsMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetEtherPhysicalPortsMoidOK creates a GetEtherPhysicalPortsMoidOK with default headers values
func NewGetEtherPhysicalPortsMoidOK() *GetEtherPhysicalPortsMoidOK {
	return &GetEtherPhysicalPortsMoidOK{}
}

/*GetEtherPhysicalPortsMoidOK handles this case with default header values.

An instance of etherPhysicalPort
*/
type GetEtherPhysicalPortsMoidOK struct {
	Payload *models.EtherPhysicalPort
}

func (o *GetEtherPhysicalPortsMoidOK) Error() string {
	return fmt.Sprintf("[GET /ether/PhysicalPorts/{moid}][%d] getEtherPhysicalPortsMoidOK  %+v", 200, o.Payload)
}

func (o *GetEtherPhysicalPortsMoidOK) GetPayload() *models.EtherPhysicalPort {
	return o.Payload
}

func (o *GetEtherPhysicalPortsMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EtherPhysicalPort)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEtherPhysicalPortsMoidNotFound creates a GetEtherPhysicalPortsMoidNotFound with default headers values
func NewGetEtherPhysicalPortsMoidNotFound() *GetEtherPhysicalPortsMoidNotFound {
	return &GetEtherPhysicalPortsMoidNotFound{}
}

/*GetEtherPhysicalPortsMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetEtherPhysicalPortsMoidNotFound struct {
}

func (o *GetEtherPhysicalPortsMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /ether/PhysicalPorts/{moid}][%d] getEtherPhysicalPortsMoidNotFound ", 404)
}

func (o *GetEtherPhysicalPortsMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetEtherPhysicalPortsMoidDefault creates a GetEtherPhysicalPortsMoidDefault with default headers values
func NewGetEtherPhysicalPortsMoidDefault(code int) *GetEtherPhysicalPortsMoidDefault {
	return &GetEtherPhysicalPortsMoidDefault{
		_statusCode: code,
	}
}

/*GetEtherPhysicalPortsMoidDefault handles this case with default header values.

Unexpected error
*/
type GetEtherPhysicalPortsMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get ether physical ports moid default response
func (o *GetEtherPhysicalPortsMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetEtherPhysicalPortsMoidDefault) Error() string {
	return fmt.Sprintf("[GET /ether/PhysicalPorts/{moid}][%d] GetEtherPhysicalPortsMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetEtherPhysicalPortsMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetEtherPhysicalPortsMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
