// Code generated by go-swagger; DO NOT EDIT.

package externalsite_authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new externalsite authorization API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for externalsite authorization API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetExternalsiteAuthorizations gets a list of externalsite authorization instances
*/
func (a *Client) GetExternalsiteAuthorizations(params *GetExternalsiteAuthorizationsParams) (*GetExternalsiteAuthorizationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExternalsiteAuthorizationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetExternalsiteAuthorizations",
		Method:             "GET",
		PathPattern:        "/externalsite/Authorizations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalsiteAuthorizationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExternalsiteAuthorizationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetExternalsiteAuthorizationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetExternalsiteAuthorizationsMoid gets a specific instance of externalsite authorization
*/
func (a *Client) GetExternalsiteAuthorizationsMoid(params *GetExternalsiteAuthorizationsMoidParams) (*GetExternalsiteAuthorizationsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExternalsiteAuthorizationsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetExternalsiteAuthorizationsMoid",
		Method:             "GET",
		PathPattern:        "/externalsite/Authorizations/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalsiteAuthorizationsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExternalsiteAuthorizationsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetExternalsiteAuthorizationsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchExternalsiteAuthorizationsMoid updates an instance of externalsite authorization
*/
func (a *Client) PatchExternalsiteAuthorizationsMoid(params *PatchExternalsiteAuthorizationsMoidParams) (*PatchExternalsiteAuthorizationsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchExternalsiteAuthorizationsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchExternalsiteAuthorizationsMoid",
		Method:             "PATCH",
		PathPattern:        "/externalsite/Authorizations/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchExternalsiteAuthorizationsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchExternalsiteAuthorizationsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchExternalsiteAuthorizationsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostExternalsiteAuthorizations creates an instance of externalsite authorization
*/
func (a *Client) PostExternalsiteAuthorizations(params *PostExternalsiteAuthorizationsParams) (*PostExternalsiteAuthorizationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostExternalsiteAuthorizationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostExternalsiteAuthorizations",
		Method:             "POST",
		PathPattern:        "/externalsite/Authorizations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostExternalsiteAuthorizationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostExternalsiteAuthorizationsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostExternalsiteAuthorizationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostExternalsiteAuthorizationsMoid updates an instance of externalsite authorization
*/
func (a *Client) PostExternalsiteAuthorizationsMoid(params *PostExternalsiteAuthorizationsMoidParams) (*PostExternalsiteAuthorizationsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostExternalsiteAuthorizationsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostExternalsiteAuthorizationsMoid",
		Method:             "POST",
		PathPattern:        "/externalsite/Authorizations/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostExternalsiteAuthorizationsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostExternalsiteAuthorizationsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostExternalsiteAuthorizationsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
