// Code generated by go-swagger; DO NOT EDIT.

package fault_instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new fault instance API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for fault instance API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetFaultInstances gets a list of fault instance instances
*/
func (a *Client) GetFaultInstances(params *GetFaultInstancesParams) (*GetFaultInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFaultInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFaultInstances",
		Method:             "GET",
		PathPattern:        "/fault/Instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFaultInstancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFaultInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFaultInstancesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetFaultInstancesMoid gets a specific instance of fault instance
*/
func (a *Client) GetFaultInstancesMoid(params *GetFaultInstancesMoidParams) (*GetFaultInstancesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFaultInstancesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFaultInstancesMoid",
		Method:             "GET",
		PathPattern:        "/fault/Instances/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFaultInstancesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFaultInstancesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFaultInstancesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchFaultInstancesMoid updates an instance of fault instance
*/
func (a *Client) PatchFaultInstancesMoid(params *PatchFaultInstancesMoidParams) (*PatchFaultInstancesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchFaultInstancesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchFaultInstancesMoid",
		Method:             "PATCH",
		PathPattern:        "/fault/Instances/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchFaultInstancesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchFaultInstancesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchFaultInstancesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostFaultInstancesMoid updates an instance of fault instance
*/
func (a *Client) PostFaultInstancesMoid(params *PostFaultInstancesMoidParams) (*PostFaultInstancesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFaultInstancesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostFaultInstancesMoid",
		Method:             "POST",
		PathPattern:        "/fault/Instances/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFaultInstancesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostFaultInstancesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostFaultInstancesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
