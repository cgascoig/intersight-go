// Code generated by go-swagger; DO NOT EDIT.

package fault_instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetFaultInstancesMoidReader is a Reader for the GetFaultInstancesMoid structure.
type GetFaultInstancesMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFaultInstancesMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFaultInstancesMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetFaultInstancesMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetFaultInstancesMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetFaultInstancesMoidOK creates a GetFaultInstancesMoidOK with default headers values
func NewGetFaultInstancesMoidOK() *GetFaultInstancesMoidOK {
	return &GetFaultInstancesMoidOK{}
}

/*GetFaultInstancesMoidOK handles this case with default header values.

An instance of faultInstance
*/
type GetFaultInstancesMoidOK struct {
	Payload *models.FaultInstance
}

func (o *GetFaultInstancesMoidOK) Error() string {
	return fmt.Sprintf("[GET /fault/Instances/{moid}][%d] getFaultInstancesMoidOK  %+v", 200, o.Payload)
}

func (o *GetFaultInstancesMoidOK) GetPayload() *models.FaultInstance {
	return o.Payload
}

func (o *GetFaultInstancesMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FaultInstance)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFaultInstancesMoidNotFound creates a GetFaultInstancesMoidNotFound with default headers values
func NewGetFaultInstancesMoidNotFound() *GetFaultInstancesMoidNotFound {
	return &GetFaultInstancesMoidNotFound{}
}

/*GetFaultInstancesMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetFaultInstancesMoidNotFound struct {
}

func (o *GetFaultInstancesMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /fault/Instances/{moid}][%d] getFaultInstancesMoidNotFound ", 404)
}

func (o *GetFaultInstancesMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetFaultInstancesMoidDefault creates a GetFaultInstancesMoidDefault with default headers values
func NewGetFaultInstancesMoidDefault(code int) *GetFaultInstancesMoidDefault {
	return &GetFaultInstancesMoidDefault{
		_statusCode: code,
	}
}

/*GetFaultInstancesMoidDefault handles this case with default header values.

Unexpected error
*/
type GetFaultInstancesMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get fault instances moid default response
func (o *GetFaultInstancesMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetFaultInstancesMoidDefault) Error() string {
	return fmt.Sprintf("[GET /fault/Instances/{moid}][%d] GetFaultInstancesMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetFaultInstancesMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetFaultInstancesMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
