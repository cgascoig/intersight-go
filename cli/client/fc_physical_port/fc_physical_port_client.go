// Code generated by go-swagger; DO NOT EDIT.

package fc_physical_port

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new fc physical port API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for fc physical port API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetFcPhysicalPorts gets a list of fc physical port instances
*/
func (a *Client) GetFcPhysicalPorts(params *GetFcPhysicalPortsParams) (*GetFcPhysicalPortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFcPhysicalPortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFcPhysicalPorts",
		Method:             "GET",
		PathPattern:        "/fc/PhysicalPorts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFcPhysicalPortsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFcPhysicalPortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFcPhysicalPortsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetFcPhysicalPortsMoid gets a specific instance of fc physical port
*/
func (a *Client) GetFcPhysicalPortsMoid(params *GetFcPhysicalPortsMoidParams) (*GetFcPhysicalPortsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFcPhysicalPortsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFcPhysicalPortsMoid",
		Method:             "GET",
		PathPattern:        "/fc/PhysicalPorts/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFcPhysicalPortsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFcPhysicalPortsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFcPhysicalPortsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchFcPhysicalPortsMoid updates an instance of fc physical port
*/
func (a *Client) PatchFcPhysicalPortsMoid(params *PatchFcPhysicalPortsMoidParams) (*PatchFcPhysicalPortsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchFcPhysicalPortsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchFcPhysicalPortsMoid",
		Method:             "PATCH",
		PathPattern:        "/fc/PhysicalPorts/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchFcPhysicalPortsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchFcPhysicalPortsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchFcPhysicalPortsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostFcPhysicalPortsMoid updates an instance of fc physical port
*/
func (a *Client) PostFcPhysicalPortsMoid(params *PostFcPhysicalPortsMoidParams) (*PostFcPhysicalPortsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFcPhysicalPortsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostFcPhysicalPortsMoid",
		Method:             "POST",
		PathPattern:        "/fc/PhysicalPorts/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFcPhysicalPortsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostFcPhysicalPortsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostFcPhysicalPortsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
