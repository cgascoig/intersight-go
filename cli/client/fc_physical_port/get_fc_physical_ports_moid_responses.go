// Code generated by go-swagger; DO NOT EDIT.

package fc_physical_port

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetFcPhysicalPortsMoidReader is a Reader for the GetFcPhysicalPortsMoid structure.
type GetFcPhysicalPortsMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFcPhysicalPortsMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFcPhysicalPortsMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetFcPhysicalPortsMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetFcPhysicalPortsMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetFcPhysicalPortsMoidOK creates a GetFcPhysicalPortsMoidOK with default headers values
func NewGetFcPhysicalPortsMoidOK() *GetFcPhysicalPortsMoidOK {
	return &GetFcPhysicalPortsMoidOK{}
}

/*GetFcPhysicalPortsMoidOK handles this case with default header values.

An instance of fcPhysicalPort
*/
type GetFcPhysicalPortsMoidOK struct {
	Payload *models.FcPhysicalPort
}

func (o *GetFcPhysicalPortsMoidOK) Error() string {
	return fmt.Sprintf("[GET /fc/PhysicalPorts/{moid}][%d] getFcPhysicalPortsMoidOK  %+v", 200, o.Payload)
}

func (o *GetFcPhysicalPortsMoidOK) GetPayload() *models.FcPhysicalPort {
	return o.Payload
}

func (o *GetFcPhysicalPortsMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FcPhysicalPort)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFcPhysicalPortsMoidNotFound creates a GetFcPhysicalPortsMoidNotFound with default headers values
func NewGetFcPhysicalPortsMoidNotFound() *GetFcPhysicalPortsMoidNotFound {
	return &GetFcPhysicalPortsMoidNotFound{}
}

/*GetFcPhysicalPortsMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetFcPhysicalPortsMoidNotFound struct {
}

func (o *GetFcPhysicalPortsMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /fc/PhysicalPorts/{moid}][%d] getFcPhysicalPortsMoidNotFound ", 404)
}

func (o *GetFcPhysicalPortsMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetFcPhysicalPortsMoidDefault creates a GetFcPhysicalPortsMoidDefault with default headers values
func NewGetFcPhysicalPortsMoidDefault(code int) *GetFcPhysicalPortsMoidDefault {
	return &GetFcPhysicalPortsMoidDefault{
		_statusCode: code,
	}
}

/*GetFcPhysicalPortsMoidDefault handles this case with default header values.

Unexpected error
*/
type GetFcPhysicalPortsMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get fc physical ports moid default response
func (o *GetFcPhysicalPortsMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetFcPhysicalPortsMoidDefault) Error() string {
	return fmt.Sprintf("[GET /fc/PhysicalPorts/{moid}][%d] GetFcPhysicalPortsMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetFcPhysicalPortsMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetFcPhysicalPortsMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
