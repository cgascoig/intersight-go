// Code generated by go-swagger; DO NOT EDIT.

package firmware_driver_distributable

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new firmware driver distributable API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for firmware driver distributable API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteFirmwareDriverDistributablesMoid deletes an instance of firmware driver distributable
*/
func (a *Client) DeleteFirmwareDriverDistributablesMoid(params *DeleteFirmwareDriverDistributablesMoidParams) (*DeleteFirmwareDriverDistributablesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFirmwareDriverDistributablesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteFirmwareDriverDistributablesMoid",
		Method:             "DELETE",
		PathPattern:        "/firmware/DriverDistributables/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFirmwareDriverDistributablesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFirmwareDriverDistributablesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteFirmwareDriverDistributablesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetFirmwareDriverDistributables gets a list of firmware driver distributable instances
*/
func (a *Client) GetFirmwareDriverDistributables(params *GetFirmwareDriverDistributablesParams) (*GetFirmwareDriverDistributablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFirmwareDriverDistributablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFirmwareDriverDistributables",
		Method:             "GET",
		PathPattern:        "/firmware/DriverDistributables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFirmwareDriverDistributablesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFirmwareDriverDistributablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFirmwareDriverDistributablesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetFirmwareDriverDistributablesMoid gets a specific instance of firmware driver distributable
*/
func (a *Client) GetFirmwareDriverDistributablesMoid(params *GetFirmwareDriverDistributablesMoidParams) (*GetFirmwareDriverDistributablesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFirmwareDriverDistributablesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFirmwareDriverDistributablesMoid",
		Method:             "GET",
		PathPattern:        "/firmware/DriverDistributables/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFirmwareDriverDistributablesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFirmwareDriverDistributablesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFirmwareDriverDistributablesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchFirmwareDriverDistributablesMoid updates an instance of firmware driver distributable
*/
func (a *Client) PatchFirmwareDriverDistributablesMoid(params *PatchFirmwareDriverDistributablesMoidParams) (*PatchFirmwareDriverDistributablesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchFirmwareDriverDistributablesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchFirmwareDriverDistributablesMoid",
		Method:             "PATCH",
		PathPattern:        "/firmware/DriverDistributables/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchFirmwareDriverDistributablesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchFirmwareDriverDistributablesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchFirmwareDriverDistributablesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostFirmwareDriverDistributables creates an instance of firmware driver distributable
*/
func (a *Client) PostFirmwareDriverDistributables(params *PostFirmwareDriverDistributablesParams) (*PostFirmwareDriverDistributablesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFirmwareDriverDistributablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostFirmwareDriverDistributables",
		Method:             "POST",
		PathPattern:        "/firmware/DriverDistributables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFirmwareDriverDistributablesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostFirmwareDriverDistributablesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostFirmwareDriverDistributablesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostFirmwareDriverDistributablesMoid updates an instance of firmware driver distributable
*/
func (a *Client) PostFirmwareDriverDistributablesMoid(params *PostFirmwareDriverDistributablesMoidParams) (*PostFirmwareDriverDistributablesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFirmwareDriverDistributablesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostFirmwareDriverDistributablesMoid",
		Method:             "POST",
		PathPattern:        "/firmware/DriverDistributables/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostFirmwareDriverDistributablesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostFirmwareDriverDistributablesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostFirmwareDriverDistributablesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
