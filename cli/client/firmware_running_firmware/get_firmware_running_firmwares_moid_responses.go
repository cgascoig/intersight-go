// Code generated by go-swagger; DO NOT EDIT.

package firmware_running_firmware

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetFirmwareRunningFirmwaresMoidReader is a Reader for the GetFirmwareRunningFirmwaresMoid structure.
type GetFirmwareRunningFirmwaresMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFirmwareRunningFirmwaresMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFirmwareRunningFirmwaresMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetFirmwareRunningFirmwaresMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetFirmwareRunningFirmwaresMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetFirmwareRunningFirmwaresMoidOK creates a GetFirmwareRunningFirmwaresMoidOK with default headers values
func NewGetFirmwareRunningFirmwaresMoidOK() *GetFirmwareRunningFirmwaresMoidOK {
	return &GetFirmwareRunningFirmwaresMoidOK{}
}

/*GetFirmwareRunningFirmwaresMoidOK handles this case with default header values.

An instance of firmwareRunningFirmware
*/
type GetFirmwareRunningFirmwaresMoidOK struct {
	Payload *models.FirmwareRunningFirmware
}

func (o *GetFirmwareRunningFirmwaresMoidOK) Error() string {
	return fmt.Sprintf("[GET /firmware/RunningFirmwares/{moid}][%d] getFirmwareRunningFirmwaresMoidOK  %+v", 200, o.Payload)
}

func (o *GetFirmwareRunningFirmwaresMoidOK) GetPayload() *models.FirmwareRunningFirmware {
	return o.Payload
}

func (o *GetFirmwareRunningFirmwaresMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FirmwareRunningFirmware)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFirmwareRunningFirmwaresMoidNotFound creates a GetFirmwareRunningFirmwaresMoidNotFound with default headers values
func NewGetFirmwareRunningFirmwaresMoidNotFound() *GetFirmwareRunningFirmwaresMoidNotFound {
	return &GetFirmwareRunningFirmwaresMoidNotFound{}
}

/*GetFirmwareRunningFirmwaresMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetFirmwareRunningFirmwaresMoidNotFound struct {
}

func (o *GetFirmwareRunningFirmwaresMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /firmware/RunningFirmwares/{moid}][%d] getFirmwareRunningFirmwaresMoidNotFound ", 404)
}

func (o *GetFirmwareRunningFirmwaresMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetFirmwareRunningFirmwaresMoidDefault creates a GetFirmwareRunningFirmwaresMoidDefault with default headers values
func NewGetFirmwareRunningFirmwaresMoidDefault(code int) *GetFirmwareRunningFirmwaresMoidDefault {
	return &GetFirmwareRunningFirmwaresMoidDefault{
		_statusCode: code,
	}
}

/*GetFirmwareRunningFirmwaresMoidDefault handles this case with default header values.

Unexpected error
*/
type GetFirmwareRunningFirmwaresMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get firmware running firmwares moid default response
func (o *GetFirmwareRunningFirmwaresMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetFirmwareRunningFirmwaresMoidDefault) Error() string {
	return fmt.Sprintf("[GET /firmware/RunningFirmwares/{moid}][%d] GetFirmwareRunningFirmwaresMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetFirmwareRunningFirmwaresMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetFirmwareRunningFirmwaresMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
