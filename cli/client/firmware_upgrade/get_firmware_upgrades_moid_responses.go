// Code generated by go-swagger; DO NOT EDIT.

package firmware_upgrade

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetFirmwareUpgradesMoidReader is a Reader for the GetFirmwareUpgradesMoid structure.
type GetFirmwareUpgradesMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFirmwareUpgradesMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFirmwareUpgradesMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetFirmwareUpgradesMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetFirmwareUpgradesMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetFirmwareUpgradesMoidOK creates a GetFirmwareUpgradesMoidOK with default headers values
func NewGetFirmwareUpgradesMoidOK() *GetFirmwareUpgradesMoidOK {
	return &GetFirmwareUpgradesMoidOK{}
}

/*GetFirmwareUpgradesMoidOK handles this case with default header values.

An instance of firmwareUpgrade
*/
type GetFirmwareUpgradesMoidOK struct {
	Payload *models.FirmwareUpgrade
}

func (o *GetFirmwareUpgradesMoidOK) Error() string {
	return fmt.Sprintf("[GET /firmware/Upgrades/{moid}][%d] getFirmwareUpgradesMoidOK  %+v", 200, o.Payload)
}

func (o *GetFirmwareUpgradesMoidOK) GetPayload() *models.FirmwareUpgrade {
	return o.Payload
}

func (o *GetFirmwareUpgradesMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FirmwareUpgrade)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFirmwareUpgradesMoidNotFound creates a GetFirmwareUpgradesMoidNotFound with default headers values
func NewGetFirmwareUpgradesMoidNotFound() *GetFirmwareUpgradesMoidNotFound {
	return &GetFirmwareUpgradesMoidNotFound{}
}

/*GetFirmwareUpgradesMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetFirmwareUpgradesMoidNotFound struct {
}

func (o *GetFirmwareUpgradesMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /firmware/Upgrades/{moid}][%d] getFirmwareUpgradesMoidNotFound ", 404)
}

func (o *GetFirmwareUpgradesMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetFirmwareUpgradesMoidDefault creates a GetFirmwareUpgradesMoidDefault with default headers values
func NewGetFirmwareUpgradesMoidDefault(code int) *GetFirmwareUpgradesMoidDefault {
	return &GetFirmwareUpgradesMoidDefault{
		_statusCode: code,
	}
}

/*GetFirmwareUpgradesMoidDefault handles this case with default header values.

Unexpected error
*/
type GetFirmwareUpgradesMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get firmware upgrades moid default response
func (o *GetFirmwareUpgradesMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetFirmwareUpgradesMoidDefault) Error() string {
	return fmt.Sprintf("[GET /firmware/Upgrades/{moid}][%d] GetFirmwareUpgradesMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetFirmwareUpgradesMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetFirmwareUpgradesMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
