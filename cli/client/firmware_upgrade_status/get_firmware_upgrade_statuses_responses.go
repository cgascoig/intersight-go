// Code generated by go-swagger; DO NOT EDIT.

package firmware_upgrade_status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetFirmwareUpgradeStatusesReader is a Reader for the GetFirmwareUpgradeStatuses structure.
type GetFirmwareUpgradeStatusesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFirmwareUpgradeStatusesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFirmwareUpgradeStatusesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetFirmwareUpgradeStatusesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetFirmwareUpgradeStatusesOK creates a GetFirmwareUpgradeStatusesOK with default headers values
func NewGetFirmwareUpgradeStatusesOK() *GetFirmwareUpgradeStatusesOK {
	return &GetFirmwareUpgradeStatusesOK{}
}

/*GetFirmwareUpgradeStatusesOK handles this case with default header values.

List of firmwareUpgradeStatuses for the given filter criteria
*/
type GetFirmwareUpgradeStatusesOK struct {
	Payload *models.FirmwareUpgradeStatusList
}

func (o *GetFirmwareUpgradeStatusesOK) Error() string {
	return fmt.Sprintf("[GET /firmware/UpgradeStatuses][%d] getFirmwareUpgradeStatusesOK  %+v", 200, o.Payload)
}

func (o *GetFirmwareUpgradeStatusesOK) GetPayload() *models.FirmwareUpgradeStatusList {
	return o.Payload
}

func (o *GetFirmwareUpgradeStatusesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FirmwareUpgradeStatusList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFirmwareUpgradeStatusesDefault creates a GetFirmwareUpgradeStatusesDefault with default headers values
func NewGetFirmwareUpgradeStatusesDefault(code int) *GetFirmwareUpgradeStatusesDefault {
	return &GetFirmwareUpgradeStatusesDefault{
		_statusCode: code,
	}
}

/*GetFirmwareUpgradeStatusesDefault handles this case with default header values.

Unexpected error
*/
type GetFirmwareUpgradeStatusesDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get firmware upgrade statuses default response
func (o *GetFirmwareUpgradeStatusesDefault) Code() int {
	return o._statusCode
}

func (o *GetFirmwareUpgradeStatusesDefault) Error() string {
	return fmt.Sprintf("[GET /firmware/UpgradeStatuses][%d] GetFirmwareUpgradeStatuses default  %+v", o._statusCode, o.Payload)
}

func (o *GetFirmwareUpgradeStatusesDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetFirmwareUpgradeStatusesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
