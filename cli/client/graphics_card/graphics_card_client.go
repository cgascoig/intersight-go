// Code generated by go-swagger; DO NOT EDIT.

package graphics_card

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new graphics card API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for graphics card API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetGraphicsCards gets a list of graphics card instances
*/
func (a *Client) GetGraphicsCards(params *GetGraphicsCardsParams) (*GetGraphicsCardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGraphicsCardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGraphicsCards",
		Method:             "GET",
		PathPattern:        "/graphics/Cards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGraphicsCardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGraphicsCardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetGraphicsCardsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetGraphicsCardsMoid gets a specific instance of graphics card
*/
func (a *Client) GetGraphicsCardsMoid(params *GetGraphicsCardsMoidParams) (*GetGraphicsCardsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGraphicsCardsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGraphicsCardsMoid",
		Method:             "GET",
		PathPattern:        "/graphics/Cards/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGraphicsCardsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGraphicsCardsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetGraphicsCardsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchGraphicsCardsMoid updates an instance of graphics card
*/
func (a *Client) PatchGraphicsCardsMoid(params *PatchGraphicsCardsMoidParams) (*PatchGraphicsCardsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchGraphicsCardsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchGraphicsCardsMoid",
		Method:             "PATCH",
		PathPattern:        "/graphics/Cards/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchGraphicsCardsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchGraphicsCardsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchGraphicsCardsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostGraphicsCardsMoid updates an instance of graphics card
*/
func (a *Client) PostGraphicsCardsMoid(params *PostGraphicsCardsMoidParams) (*PostGraphicsCardsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGraphicsCardsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostGraphicsCardsMoid",
		Method:             "POST",
		PathPattern:        "/graphics/Cards/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostGraphicsCardsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostGraphicsCardsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostGraphicsCardsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
