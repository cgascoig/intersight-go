// Code generated by go-swagger; DO NOT EDIT.

package graphics_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetGraphicsControllersMoidReader is a Reader for the GetGraphicsControllersMoid structure.
type GetGraphicsControllersMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGraphicsControllersMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGraphicsControllersMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetGraphicsControllersMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetGraphicsControllersMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetGraphicsControllersMoidOK creates a GetGraphicsControllersMoidOK with default headers values
func NewGetGraphicsControllersMoidOK() *GetGraphicsControllersMoidOK {
	return &GetGraphicsControllersMoidOK{}
}

/*GetGraphicsControllersMoidOK handles this case with default header values.

An instance of graphicsController
*/
type GetGraphicsControllersMoidOK struct {
	Payload *models.GraphicsController
}

func (o *GetGraphicsControllersMoidOK) Error() string {
	return fmt.Sprintf("[GET /graphics/Controllers/{moid}][%d] getGraphicsControllersMoidOK  %+v", 200, o.Payload)
}

func (o *GetGraphicsControllersMoidOK) GetPayload() *models.GraphicsController {
	return o.Payload
}

func (o *GetGraphicsControllersMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GraphicsController)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGraphicsControllersMoidNotFound creates a GetGraphicsControllersMoidNotFound with default headers values
func NewGetGraphicsControllersMoidNotFound() *GetGraphicsControllersMoidNotFound {
	return &GetGraphicsControllersMoidNotFound{}
}

/*GetGraphicsControllersMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetGraphicsControllersMoidNotFound struct {
}

func (o *GetGraphicsControllersMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /graphics/Controllers/{moid}][%d] getGraphicsControllersMoidNotFound ", 404)
}

func (o *GetGraphicsControllersMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetGraphicsControllersMoidDefault creates a GetGraphicsControllersMoidDefault with default headers values
func NewGetGraphicsControllersMoidDefault(code int) *GetGraphicsControllersMoidDefault {
	return &GetGraphicsControllersMoidDefault{
		_statusCode: code,
	}
}

/*GetGraphicsControllersMoidDefault handles this case with default header values.

Unexpected error
*/
type GetGraphicsControllersMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get graphics controllers moid default response
func (o *GetGraphicsControllersMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetGraphicsControllersMoidDefault) Error() string {
	return fmt.Sprintf("[GET /graphics/Controllers/{moid}][%d] GetGraphicsControllersMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetGraphicsControllersMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGraphicsControllersMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
