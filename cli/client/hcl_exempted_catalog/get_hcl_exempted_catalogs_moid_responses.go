// Code generated by go-swagger; DO NOT EDIT.

package hcl_exempted_catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetHclExemptedCatalogsMoidReader is a Reader for the GetHclExemptedCatalogsMoid structure.
type GetHclExemptedCatalogsMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetHclExemptedCatalogsMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetHclExemptedCatalogsMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetHclExemptedCatalogsMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetHclExemptedCatalogsMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetHclExemptedCatalogsMoidOK creates a GetHclExemptedCatalogsMoidOK with default headers values
func NewGetHclExemptedCatalogsMoidOK() *GetHclExemptedCatalogsMoidOK {
	return &GetHclExemptedCatalogsMoidOK{}
}

/*GetHclExemptedCatalogsMoidOK handles this case with default header values.

An instance of hclExemptedCatalog
*/
type GetHclExemptedCatalogsMoidOK struct {
	Payload *models.HclExemptedCatalog
}

func (o *GetHclExemptedCatalogsMoidOK) Error() string {
	return fmt.Sprintf("[GET /hcl/ExemptedCatalogs/{moid}][%d] getHclExemptedCatalogsMoidOK  %+v", 200, o.Payload)
}

func (o *GetHclExemptedCatalogsMoidOK) GetPayload() *models.HclExemptedCatalog {
	return o.Payload
}

func (o *GetHclExemptedCatalogsMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HclExemptedCatalog)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHclExemptedCatalogsMoidNotFound creates a GetHclExemptedCatalogsMoidNotFound with default headers values
func NewGetHclExemptedCatalogsMoidNotFound() *GetHclExemptedCatalogsMoidNotFound {
	return &GetHclExemptedCatalogsMoidNotFound{}
}

/*GetHclExemptedCatalogsMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetHclExemptedCatalogsMoidNotFound struct {
}

func (o *GetHclExemptedCatalogsMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /hcl/ExemptedCatalogs/{moid}][%d] getHclExemptedCatalogsMoidNotFound ", 404)
}

func (o *GetHclExemptedCatalogsMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetHclExemptedCatalogsMoidDefault creates a GetHclExemptedCatalogsMoidDefault with default headers values
func NewGetHclExemptedCatalogsMoidDefault(code int) *GetHclExemptedCatalogsMoidDefault {
	return &GetHclExemptedCatalogsMoidDefault{
		_statusCode: code,
	}
}

/*GetHclExemptedCatalogsMoidDefault handles this case with default header values.

Unexpected error
*/
type GetHclExemptedCatalogsMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get hcl exempted catalogs moid default response
func (o *GetHclExemptedCatalogsMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetHclExemptedCatalogsMoidDefault) Error() string {
	return fmt.Sprintf("[GET /hcl/ExemptedCatalogs/{moid}][%d] GetHclExemptedCatalogsMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetHclExemptedCatalogsMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetHclExemptedCatalogsMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
