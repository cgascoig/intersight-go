// Code generated by go-swagger; DO NOT EDIT.

package hcl_hyperflex_software_compatibility_info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new hcl hyperflex software compatibility info API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for hcl hyperflex software compatibility info API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteHclHyperflexSoftwareCompatibilityInfosMoid deletes an instance of hcl hyperflex software compatibility info
*/
func (a *Client) DeleteHclHyperflexSoftwareCompatibilityInfosMoid(params *DeleteHclHyperflexSoftwareCompatibilityInfosMoidParams) (*DeleteHclHyperflexSoftwareCompatibilityInfosMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHclHyperflexSoftwareCompatibilityInfosMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteHclHyperflexSoftwareCompatibilityInfosMoid",
		Method:             "DELETE",
		PathPattern:        "/hcl/HyperflexSoftwareCompatibilityInfos/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteHclHyperflexSoftwareCompatibilityInfosMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteHclHyperflexSoftwareCompatibilityInfosMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteHclHyperflexSoftwareCompatibilityInfosMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetHclHyperflexSoftwareCompatibilityInfos gets a list of hcl hyperflex software compatibility info instances
*/
func (a *Client) GetHclHyperflexSoftwareCompatibilityInfos(params *GetHclHyperflexSoftwareCompatibilityInfosParams) (*GetHclHyperflexSoftwareCompatibilityInfosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHclHyperflexSoftwareCompatibilityInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHclHyperflexSoftwareCompatibilityInfos",
		Method:             "GET",
		PathPattern:        "/hcl/HyperflexSoftwareCompatibilityInfos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHclHyperflexSoftwareCompatibilityInfosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHclHyperflexSoftwareCompatibilityInfosOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHclHyperflexSoftwareCompatibilityInfosDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetHclHyperflexSoftwareCompatibilityInfosMoid gets a specific instance of hcl hyperflex software compatibility info
*/
func (a *Client) GetHclHyperflexSoftwareCompatibilityInfosMoid(params *GetHclHyperflexSoftwareCompatibilityInfosMoidParams) (*GetHclHyperflexSoftwareCompatibilityInfosMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHclHyperflexSoftwareCompatibilityInfosMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHclHyperflexSoftwareCompatibilityInfosMoid",
		Method:             "GET",
		PathPattern:        "/hcl/HyperflexSoftwareCompatibilityInfos/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHclHyperflexSoftwareCompatibilityInfosMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHclHyperflexSoftwareCompatibilityInfosMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHclHyperflexSoftwareCompatibilityInfosMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchHclHyperflexSoftwareCompatibilityInfosMoid updates an instance of hcl hyperflex software compatibility info
*/
func (a *Client) PatchHclHyperflexSoftwareCompatibilityInfosMoid(params *PatchHclHyperflexSoftwareCompatibilityInfosMoidParams) (*PatchHclHyperflexSoftwareCompatibilityInfosMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchHclHyperflexSoftwareCompatibilityInfosMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchHclHyperflexSoftwareCompatibilityInfosMoid",
		Method:             "PATCH",
		PathPattern:        "/hcl/HyperflexSoftwareCompatibilityInfos/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchHclHyperflexSoftwareCompatibilityInfosMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchHclHyperflexSoftwareCompatibilityInfosMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchHclHyperflexSoftwareCompatibilityInfosMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostHclHyperflexSoftwareCompatibilityInfos creates an instance of hcl hyperflex software compatibility info
*/
func (a *Client) PostHclHyperflexSoftwareCompatibilityInfos(params *PostHclHyperflexSoftwareCompatibilityInfosParams) (*PostHclHyperflexSoftwareCompatibilityInfosCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHclHyperflexSoftwareCompatibilityInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostHclHyperflexSoftwareCompatibilityInfos",
		Method:             "POST",
		PathPattern:        "/hcl/HyperflexSoftwareCompatibilityInfos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostHclHyperflexSoftwareCompatibilityInfosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHclHyperflexSoftwareCompatibilityInfosCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostHclHyperflexSoftwareCompatibilityInfosDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostHclHyperflexSoftwareCompatibilityInfosMoid updates an instance of hcl hyperflex software compatibility info
*/
func (a *Client) PostHclHyperflexSoftwareCompatibilityInfosMoid(params *PostHclHyperflexSoftwareCompatibilityInfosMoidParams) (*PostHclHyperflexSoftwareCompatibilityInfosMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHclHyperflexSoftwareCompatibilityInfosMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostHclHyperflexSoftwareCompatibilityInfosMoid",
		Method:             "POST",
		PathPattern:        "/hcl/HyperflexSoftwareCompatibilityInfos/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostHclHyperflexSoftwareCompatibilityInfosMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHclHyperflexSoftwareCompatibilityInfosMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostHclHyperflexSoftwareCompatibilityInfosMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
