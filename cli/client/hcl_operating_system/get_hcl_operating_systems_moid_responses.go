// Code generated by go-swagger; DO NOT EDIT.

package hcl_operating_system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetHclOperatingSystemsMoidReader is a Reader for the GetHclOperatingSystemsMoid structure.
type GetHclOperatingSystemsMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetHclOperatingSystemsMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetHclOperatingSystemsMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetHclOperatingSystemsMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetHclOperatingSystemsMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetHclOperatingSystemsMoidOK creates a GetHclOperatingSystemsMoidOK with default headers values
func NewGetHclOperatingSystemsMoidOK() *GetHclOperatingSystemsMoidOK {
	return &GetHclOperatingSystemsMoidOK{}
}

/*GetHclOperatingSystemsMoidOK handles this case with default header values.

An instance of hclOperatingSystem
*/
type GetHclOperatingSystemsMoidOK struct {
	Payload *models.HclOperatingSystem
}

func (o *GetHclOperatingSystemsMoidOK) Error() string {
	return fmt.Sprintf("[GET /hcl/OperatingSystems/{moid}][%d] getHclOperatingSystemsMoidOK  %+v", 200, o.Payload)
}

func (o *GetHclOperatingSystemsMoidOK) GetPayload() *models.HclOperatingSystem {
	return o.Payload
}

func (o *GetHclOperatingSystemsMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HclOperatingSystem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHclOperatingSystemsMoidNotFound creates a GetHclOperatingSystemsMoidNotFound with default headers values
func NewGetHclOperatingSystemsMoidNotFound() *GetHclOperatingSystemsMoidNotFound {
	return &GetHclOperatingSystemsMoidNotFound{}
}

/*GetHclOperatingSystemsMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetHclOperatingSystemsMoidNotFound struct {
}

func (o *GetHclOperatingSystemsMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /hcl/OperatingSystems/{moid}][%d] getHclOperatingSystemsMoidNotFound ", 404)
}

func (o *GetHclOperatingSystemsMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetHclOperatingSystemsMoidDefault creates a GetHclOperatingSystemsMoidDefault with default headers values
func NewGetHclOperatingSystemsMoidDefault(code int) *GetHclOperatingSystemsMoidDefault {
	return &GetHclOperatingSystemsMoidDefault{
		_statusCode: code,
	}
}

/*GetHclOperatingSystemsMoidDefault handles this case with default header values.

Unexpected error
*/
type GetHclOperatingSystemsMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get hcl operating systems moid default response
func (o *GetHclOperatingSystemsMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetHclOperatingSystemsMoidDefault) Error() string {
	return fmt.Sprintf("[GET /hcl/OperatingSystems/{moid}][%d] GetHclOperatingSystemsMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetHclOperatingSystemsMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetHclOperatingSystemsMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
