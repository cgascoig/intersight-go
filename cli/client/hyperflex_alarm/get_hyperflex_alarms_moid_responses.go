// Code generated by go-swagger; DO NOT EDIT.

package hyperflex_alarm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetHyperflexAlarmsMoidReader is a Reader for the GetHyperflexAlarmsMoid structure.
type GetHyperflexAlarmsMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetHyperflexAlarmsMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetHyperflexAlarmsMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetHyperflexAlarmsMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetHyperflexAlarmsMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetHyperflexAlarmsMoidOK creates a GetHyperflexAlarmsMoidOK with default headers values
func NewGetHyperflexAlarmsMoidOK() *GetHyperflexAlarmsMoidOK {
	return &GetHyperflexAlarmsMoidOK{}
}

/*GetHyperflexAlarmsMoidOK handles this case with default header values.

An instance of hyperflexAlarm
*/
type GetHyperflexAlarmsMoidOK struct {
	Payload *models.HyperflexAlarm
}

func (o *GetHyperflexAlarmsMoidOK) Error() string {
	return fmt.Sprintf("[GET /hyperflex/Alarms/{moid}][%d] getHyperflexAlarmsMoidOK  %+v", 200, o.Payload)
}

func (o *GetHyperflexAlarmsMoidOK) GetPayload() *models.HyperflexAlarm {
	return o.Payload
}

func (o *GetHyperflexAlarmsMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HyperflexAlarm)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHyperflexAlarmsMoidNotFound creates a GetHyperflexAlarmsMoidNotFound with default headers values
func NewGetHyperflexAlarmsMoidNotFound() *GetHyperflexAlarmsMoidNotFound {
	return &GetHyperflexAlarmsMoidNotFound{}
}

/*GetHyperflexAlarmsMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetHyperflexAlarmsMoidNotFound struct {
}

func (o *GetHyperflexAlarmsMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /hyperflex/Alarms/{moid}][%d] getHyperflexAlarmsMoidNotFound ", 404)
}

func (o *GetHyperflexAlarmsMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetHyperflexAlarmsMoidDefault creates a GetHyperflexAlarmsMoidDefault with default headers values
func NewGetHyperflexAlarmsMoidDefault(code int) *GetHyperflexAlarmsMoidDefault {
	return &GetHyperflexAlarmsMoidDefault{
		_statusCode: code,
	}
}

/*GetHyperflexAlarmsMoidDefault handles this case with default header values.

Unexpected error
*/
type GetHyperflexAlarmsMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get hyperflex alarms moid default response
func (o *GetHyperflexAlarmsMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetHyperflexAlarmsMoidDefault) Error() string {
	return fmt.Sprintf("[GET /hyperflex/Alarms/{moid}][%d] GetHyperflexAlarmsMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetHyperflexAlarmsMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetHyperflexAlarmsMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
