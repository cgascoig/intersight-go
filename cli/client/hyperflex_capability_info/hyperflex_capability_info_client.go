// Code generated by go-swagger; DO NOT EDIT.

package hyperflex_capability_info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new hyperflex capability info API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for hyperflex capability info API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteHyperflexCapabilityInfosMoid deletes an instance of hyperflex capability info
*/
func (a *Client) DeleteHyperflexCapabilityInfosMoid(params *DeleteHyperflexCapabilityInfosMoidParams) (*DeleteHyperflexCapabilityInfosMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHyperflexCapabilityInfosMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteHyperflexCapabilityInfosMoid",
		Method:             "DELETE",
		PathPattern:        "/hyperflex/CapabilityInfos/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteHyperflexCapabilityInfosMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteHyperflexCapabilityInfosMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteHyperflexCapabilityInfosMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetHyperflexCapabilityInfos gets a list of hyperflex capability info instances
*/
func (a *Client) GetHyperflexCapabilityInfos(params *GetHyperflexCapabilityInfosParams) (*GetHyperflexCapabilityInfosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHyperflexCapabilityInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHyperflexCapabilityInfos",
		Method:             "GET",
		PathPattern:        "/hyperflex/CapabilityInfos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHyperflexCapabilityInfosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHyperflexCapabilityInfosOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHyperflexCapabilityInfosDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetHyperflexCapabilityInfosMoid gets a specific instance of hyperflex capability info
*/
func (a *Client) GetHyperflexCapabilityInfosMoid(params *GetHyperflexCapabilityInfosMoidParams) (*GetHyperflexCapabilityInfosMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHyperflexCapabilityInfosMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHyperflexCapabilityInfosMoid",
		Method:             "GET",
		PathPattern:        "/hyperflex/CapabilityInfos/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHyperflexCapabilityInfosMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHyperflexCapabilityInfosMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHyperflexCapabilityInfosMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchHyperflexCapabilityInfosMoid updates an instance of hyperflex capability info
*/
func (a *Client) PatchHyperflexCapabilityInfosMoid(params *PatchHyperflexCapabilityInfosMoidParams) (*PatchHyperflexCapabilityInfosMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchHyperflexCapabilityInfosMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchHyperflexCapabilityInfosMoid",
		Method:             "PATCH",
		PathPattern:        "/hyperflex/CapabilityInfos/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchHyperflexCapabilityInfosMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchHyperflexCapabilityInfosMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchHyperflexCapabilityInfosMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostHyperflexCapabilityInfos creates an instance of hyperflex capability info
*/
func (a *Client) PostHyperflexCapabilityInfos(params *PostHyperflexCapabilityInfosParams) (*PostHyperflexCapabilityInfosCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHyperflexCapabilityInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostHyperflexCapabilityInfos",
		Method:             "POST",
		PathPattern:        "/hyperflex/CapabilityInfos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostHyperflexCapabilityInfosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHyperflexCapabilityInfosCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostHyperflexCapabilityInfosDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostHyperflexCapabilityInfosMoid updates an instance of hyperflex capability info
*/
func (a *Client) PostHyperflexCapabilityInfosMoid(params *PostHyperflexCapabilityInfosMoidParams) (*PostHyperflexCapabilityInfosMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHyperflexCapabilityInfosMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostHyperflexCapabilityInfosMoid",
		Method:             "POST",
		PathPattern:        "/hyperflex/CapabilityInfos/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostHyperflexCapabilityInfosMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHyperflexCapabilityInfosMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostHyperflexCapabilityInfosMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
