// Code generated by go-swagger; DO NOT EDIT.

package hyperflex_cluster_storage_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new hyperflex cluster storage policy API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for hyperflex cluster storage policy API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteHyperflexClusterStoragePoliciesMoid deletes an instance of hyperflex cluster storage policy
*/
func (a *Client) DeleteHyperflexClusterStoragePoliciesMoid(params *DeleteHyperflexClusterStoragePoliciesMoidParams) (*DeleteHyperflexClusterStoragePoliciesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHyperflexClusterStoragePoliciesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteHyperflexClusterStoragePoliciesMoid",
		Method:             "DELETE",
		PathPattern:        "/hyperflex/ClusterStoragePolicies/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteHyperflexClusterStoragePoliciesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteHyperflexClusterStoragePoliciesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteHyperflexClusterStoragePoliciesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetHyperflexClusterStoragePolicies gets a list of hyperflex cluster storage policy instances
*/
func (a *Client) GetHyperflexClusterStoragePolicies(params *GetHyperflexClusterStoragePoliciesParams) (*GetHyperflexClusterStoragePoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHyperflexClusterStoragePoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHyperflexClusterStoragePolicies",
		Method:             "GET",
		PathPattern:        "/hyperflex/ClusterStoragePolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHyperflexClusterStoragePoliciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHyperflexClusterStoragePoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHyperflexClusterStoragePoliciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetHyperflexClusterStoragePoliciesMoid gets a specific instance of hyperflex cluster storage policy
*/
func (a *Client) GetHyperflexClusterStoragePoliciesMoid(params *GetHyperflexClusterStoragePoliciesMoidParams) (*GetHyperflexClusterStoragePoliciesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHyperflexClusterStoragePoliciesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHyperflexClusterStoragePoliciesMoid",
		Method:             "GET",
		PathPattern:        "/hyperflex/ClusterStoragePolicies/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHyperflexClusterStoragePoliciesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHyperflexClusterStoragePoliciesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHyperflexClusterStoragePoliciesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchHyperflexClusterStoragePoliciesMoid updates an instance of hyperflex cluster storage policy
*/
func (a *Client) PatchHyperflexClusterStoragePoliciesMoid(params *PatchHyperflexClusterStoragePoliciesMoidParams) (*PatchHyperflexClusterStoragePoliciesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchHyperflexClusterStoragePoliciesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchHyperflexClusterStoragePoliciesMoid",
		Method:             "PATCH",
		PathPattern:        "/hyperflex/ClusterStoragePolicies/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchHyperflexClusterStoragePoliciesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchHyperflexClusterStoragePoliciesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchHyperflexClusterStoragePoliciesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostHyperflexClusterStoragePolicies creates an instance of hyperflex cluster storage policy
*/
func (a *Client) PostHyperflexClusterStoragePolicies(params *PostHyperflexClusterStoragePoliciesParams) (*PostHyperflexClusterStoragePoliciesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHyperflexClusterStoragePoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostHyperflexClusterStoragePolicies",
		Method:             "POST",
		PathPattern:        "/hyperflex/ClusterStoragePolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostHyperflexClusterStoragePoliciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHyperflexClusterStoragePoliciesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostHyperflexClusterStoragePoliciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostHyperflexClusterStoragePoliciesMoid updates an instance of hyperflex cluster storage policy
*/
func (a *Client) PostHyperflexClusterStoragePoliciesMoid(params *PostHyperflexClusterStoragePoliciesMoidParams) (*PostHyperflexClusterStoragePoliciesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHyperflexClusterStoragePoliciesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostHyperflexClusterStoragePoliciesMoid",
		Method:             "POST",
		PathPattern:        "/hyperflex/ClusterStoragePolicies/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostHyperflexClusterStoragePoliciesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHyperflexClusterStoragePoliciesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostHyperflexClusterStoragePoliciesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
