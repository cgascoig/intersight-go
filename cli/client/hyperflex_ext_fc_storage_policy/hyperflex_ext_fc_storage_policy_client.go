// Code generated by go-swagger; DO NOT EDIT.

package hyperflex_ext_fc_storage_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new hyperflex ext fc storage policy API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for hyperflex ext fc storage policy API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteHyperflexExtFcStoragePoliciesMoid deletes an instance of hyperflex ext fc storage policy
*/
func (a *Client) DeleteHyperflexExtFcStoragePoliciesMoid(params *DeleteHyperflexExtFcStoragePoliciesMoidParams) (*DeleteHyperflexExtFcStoragePoliciesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHyperflexExtFcStoragePoliciesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteHyperflexExtFcStoragePoliciesMoid",
		Method:             "DELETE",
		PathPattern:        "/hyperflex/ExtFcStoragePolicies/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteHyperflexExtFcStoragePoliciesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteHyperflexExtFcStoragePoliciesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteHyperflexExtFcStoragePoliciesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetHyperflexExtFcStoragePolicies gets a list of hyperflex ext fc storage policy instances
*/
func (a *Client) GetHyperflexExtFcStoragePolicies(params *GetHyperflexExtFcStoragePoliciesParams) (*GetHyperflexExtFcStoragePoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHyperflexExtFcStoragePoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHyperflexExtFcStoragePolicies",
		Method:             "GET",
		PathPattern:        "/hyperflex/ExtFcStoragePolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHyperflexExtFcStoragePoliciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHyperflexExtFcStoragePoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHyperflexExtFcStoragePoliciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetHyperflexExtFcStoragePoliciesMoid gets a specific instance of hyperflex ext fc storage policy
*/
func (a *Client) GetHyperflexExtFcStoragePoliciesMoid(params *GetHyperflexExtFcStoragePoliciesMoidParams) (*GetHyperflexExtFcStoragePoliciesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHyperflexExtFcStoragePoliciesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHyperflexExtFcStoragePoliciesMoid",
		Method:             "GET",
		PathPattern:        "/hyperflex/ExtFcStoragePolicies/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHyperflexExtFcStoragePoliciesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHyperflexExtFcStoragePoliciesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHyperflexExtFcStoragePoliciesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchHyperflexExtFcStoragePoliciesMoid updates an instance of hyperflex ext fc storage policy
*/
func (a *Client) PatchHyperflexExtFcStoragePoliciesMoid(params *PatchHyperflexExtFcStoragePoliciesMoidParams) (*PatchHyperflexExtFcStoragePoliciesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchHyperflexExtFcStoragePoliciesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchHyperflexExtFcStoragePoliciesMoid",
		Method:             "PATCH",
		PathPattern:        "/hyperflex/ExtFcStoragePolicies/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchHyperflexExtFcStoragePoliciesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchHyperflexExtFcStoragePoliciesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchHyperflexExtFcStoragePoliciesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostHyperflexExtFcStoragePolicies creates an instance of hyperflex ext fc storage policy
*/
func (a *Client) PostHyperflexExtFcStoragePolicies(params *PostHyperflexExtFcStoragePoliciesParams) (*PostHyperflexExtFcStoragePoliciesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHyperflexExtFcStoragePoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostHyperflexExtFcStoragePolicies",
		Method:             "POST",
		PathPattern:        "/hyperflex/ExtFcStoragePolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostHyperflexExtFcStoragePoliciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHyperflexExtFcStoragePoliciesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostHyperflexExtFcStoragePoliciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostHyperflexExtFcStoragePoliciesMoid updates an instance of hyperflex ext fc storage policy
*/
func (a *Client) PostHyperflexExtFcStoragePoliciesMoid(params *PostHyperflexExtFcStoragePoliciesMoidParams) (*PostHyperflexExtFcStoragePoliciesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHyperflexExtFcStoragePoliciesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostHyperflexExtFcStoragePoliciesMoid",
		Method:             "POST",
		PathPattern:        "/hyperflex/ExtFcStoragePolicies/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostHyperflexExtFcStoragePoliciesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHyperflexExtFcStoragePoliciesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostHyperflexExtFcStoragePoliciesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
