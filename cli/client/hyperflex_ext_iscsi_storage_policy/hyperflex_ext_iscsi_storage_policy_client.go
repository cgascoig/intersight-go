// Code generated by go-swagger; DO NOT EDIT.

package hyperflex_ext_iscsi_storage_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new hyperflex ext iscsi storage policy API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for hyperflex ext iscsi storage policy API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteHyperflexExtIscsiStoragePoliciesMoid deletes an instance of hyperflex ext iscsi storage policy
*/
func (a *Client) DeleteHyperflexExtIscsiStoragePoliciesMoid(params *DeleteHyperflexExtIscsiStoragePoliciesMoidParams) (*DeleteHyperflexExtIscsiStoragePoliciesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHyperflexExtIscsiStoragePoliciesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteHyperflexExtIscsiStoragePoliciesMoid",
		Method:             "DELETE",
		PathPattern:        "/hyperflex/ExtIscsiStoragePolicies/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteHyperflexExtIscsiStoragePoliciesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteHyperflexExtIscsiStoragePoliciesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteHyperflexExtIscsiStoragePoliciesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetHyperflexExtIscsiStoragePolicies gets a list of hyperflex ext iscsi storage policy instances
*/
func (a *Client) GetHyperflexExtIscsiStoragePolicies(params *GetHyperflexExtIscsiStoragePoliciesParams) (*GetHyperflexExtIscsiStoragePoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHyperflexExtIscsiStoragePoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHyperflexExtIscsiStoragePolicies",
		Method:             "GET",
		PathPattern:        "/hyperflex/ExtIscsiStoragePolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHyperflexExtIscsiStoragePoliciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHyperflexExtIscsiStoragePoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHyperflexExtIscsiStoragePoliciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetHyperflexExtIscsiStoragePoliciesMoid gets a specific instance of hyperflex ext iscsi storage policy
*/
func (a *Client) GetHyperflexExtIscsiStoragePoliciesMoid(params *GetHyperflexExtIscsiStoragePoliciesMoidParams) (*GetHyperflexExtIscsiStoragePoliciesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHyperflexExtIscsiStoragePoliciesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHyperflexExtIscsiStoragePoliciesMoid",
		Method:             "GET",
		PathPattern:        "/hyperflex/ExtIscsiStoragePolicies/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHyperflexExtIscsiStoragePoliciesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHyperflexExtIscsiStoragePoliciesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHyperflexExtIscsiStoragePoliciesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchHyperflexExtIscsiStoragePoliciesMoid updates an instance of hyperflex ext iscsi storage policy
*/
func (a *Client) PatchHyperflexExtIscsiStoragePoliciesMoid(params *PatchHyperflexExtIscsiStoragePoliciesMoidParams) (*PatchHyperflexExtIscsiStoragePoliciesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchHyperflexExtIscsiStoragePoliciesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchHyperflexExtIscsiStoragePoliciesMoid",
		Method:             "PATCH",
		PathPattern:        "/hyperflex/ExtIscsiStoragePolicies/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchHyperflexExtIscsiStoragePoliciesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchHyperflexExtIscsiStoragePoliciesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchHyperflexExtIscsiStoragePoliciesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostHyperflexExtIscsiStoragePolicies creates an instance of hyperflex ext iscsi storage policy
*/
func (a *Client) PostHyperflexExtIscsiStoragePolicies(params *PostHyperflexExtIscsiStoragePoliciesParams) (*PostHyperflexExtIscsiStoragePoliciesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHyperflexExtIscsiStoragePoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostHyperflexExtIscsiStoragePolicies",
		Method:             "POST",
		PathPattern:        "/hyperflex/ExtIscsiStoragePolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostHyperflexExtIscsiStoragePoliciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHyperflexExtIscsiStoragePoliciesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostHyperflexExtIscsiStoragePoliciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostHyperflexExtIscsiStoragePoliciesMoid updates an instance of hyperflex ext iscsi storage policy
*/
func (a *Client) PostHyperflexExtIscsiStoragePoliciesMoid(params *PostHyperflexExtIscsiStoragePoliciesMoidParams) (*PostHyperflexExtIscsiStoragePoliciesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHyperflexExtIscsiStoragePoliciesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostHyperflexExtIscsiStoragePoliciesMoid",
		Method:             "POST",
		PathPattern:        "/hyperflex/ExtIscsiStoragePolicies/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostHyperflexExtIscsiStoragePoliciesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHyperflexExtIscsiStoragePoliciesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostHyperflexExtIscsiStoragePoliciesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
