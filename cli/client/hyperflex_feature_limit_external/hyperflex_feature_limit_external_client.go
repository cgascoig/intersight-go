// Code generated by go-swagger; DO NOT EDIT.

package hyperflex_feature_limit_external

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new hyperflex feature limit external API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for hyperflex feature limit external API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteHyperflexFeatureLimitExternalsMoid deletes an instance of hyperflex feature limit external
*/
func (a *Client) DeleteHyperflexFeatureLimitExternalsMoid(params *DeleteHyperflexFeatureLimitExternalsMoidParams) (*DeleteHyperflexFeatureLimitExternalsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHyperflexFeatureLimitExternalsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteHyperflexFeatureLimitExternalsMoid",
		Method:             "DELETE",
		PathPattern:        "/hyperflex/FeatureLimitExternals/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteHyperflexFeatureLimitExternalsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteHyperflexFeatureLimitExternalsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteHyperflexFeatureLimitExternalsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetHyperflexFeatureLimitExternals gets a list of hyperflex feature limit external instances
*/
func (a *Client) GetHyperflexFeatureLimitExternals(params *GetHyperflexFeatureLimitExternalsParams) (*GetHyperflexFeatureLimitExternalsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHyperflexFeatureLimitExternalsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHyperflexFeatureLimitExternals",
		Method:             "GET",
		PathPattern:        "/hyperflex/FeatureLimitExternals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHyperflexFeatureLimitExternalsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHyperflexFeatureLimitExternalsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHyperflexFeatureLimitExternalsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetHyperflexFeatureLimitExternalsMoid gets a specific instance of hyperflex feature limit external
*/
func (a *Client) GetHyperflexFeatureLimitExternalsMoid(params *GetHyperflexFeatureLimitExternalsMoidParams) (*GetHyperflexFeatureLimitExternalsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHyperflexFeatureLimitExternalsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHyperflexFeatureLimitExternalsMoid",
		Method:             "GET",
		PathPattern:        "/hyperflex/FeatureLimitExternals/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHyperflexFeatureLimitExternalsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHyperflexFeatureLimitExternalsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHyperflexFeatureLimitExternalsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchHyperflexFeatureLimitExternalsMoid updates an instance of hyperflex feature limit external
*/
func (a *Client) PatchHyperflexFeatureLimitExternalsMoid(params *PatchHyperflexFeatureLimitExternalsMoidParams) (*PatchHyperflexFeatureLimitExternalsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchHyperflexFeatureLimitExternalsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchHyperflexFeatureLimitExternalsMoid",
		Method:             "PATCH",
		PathPattern:        "/hyperflex/FeatureLimitExternals/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchHyperflexFeatureLimitExternalsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchHyperflexFeatureLimitExternalsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchHyperflexFeatureLimitExternalsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostHyperflexFeatureLimitExternals creates an instance of hyperflex feature limit external
*/
func (a *Client) PostHyperflexFeatureLimitExternals(params *PostHyperflexFeatureLimitExternalsParams) (*PostHyperflexFeatureLimitExternalsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHyperflexFeatureLimitExternalsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostHyperflexFeatureLimitExternals",
		Method:             "POST",
		PathPattern:        "/hyperflex/FeatureLimitExternals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostHyperflexFeatureLimitExternalsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHyperflexFeatureLimitExternalsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostHyperflexFeatureLimitExternalsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostHyperflexFeatureLimitExternalsMoid updates an instance of hyperflex feature limit external
*/
func (a *Client) PostHyperflexFeatureLimitExternalsMoid(params *PostHyperflexFeatureLimitExternalsMoidParams) (*PostHyperflexFeatureLimitExternalsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHyperflexFeatureLimitExternalsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostHyperflexFeatureLimitExternalsMoid",
		Method:             "POST",
		PathPattern:        "/hyperflex/FeatureLimitExternals/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostHyperflexFeatureLimitExternalsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHyperflexFeatureLimitExternalsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostHyperflexFeatureLimitExternalsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
