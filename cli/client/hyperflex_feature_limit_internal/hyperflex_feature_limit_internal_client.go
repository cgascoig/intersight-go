// Code generated by go-swagger; DO NOT EDIT.

package hyperflex_feature_limit_internal

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new hyperflex feature limit internal API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for hyperflex feature limit internal API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteHyperflexFeatureLimitInternalsMoid deletes an instance of hyperflex feature limit internal
*/
func (a *Client) DeleteHyperflexFeatureLimitInternalsMoid(params *DeleteHyperflexFeatureLimitInternalsMoidParams) (*DeleteHyperflexFeatureLimitInternalsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHyperflexFeatureLimitInternalsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteHyperflexFeatureLimitInternalsMoid",
		Method:             "DELETE",
		PathPattern:        "/hyperflex/FeatureLimitInternals/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteHyperflexFeatureLimitInternalsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteHyperflexFeatureLimitInternalsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteHyperflexFeatureLimitInternalsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetHyperflexFeatureLimitInternals gets a list of hyperflex feature limit internal instances
*/
func (a *Client) GetHyperflexFeatureLimitInternals(params *GetHyperflexFeatureLimitInternalsParams) (*GetHyperflexFeatureLimitInternalsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHyperflexFeatureLimitInternalsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHyperflexFeatureLimitInternals",
		Method:             "GET",
		PathPattern:        "/hyperflex/FeatureLimitInternals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHyperflexFeatureLimitInternalsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHyperflexFeatureLimitInternalsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHyperflexFeatureLimitInternalsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetHyperflexFeatureLimitInternalsMoid gets a specific instance of hyperflex feature limit internal
*/
func (a *Client) GetHyperflexFeatureLimitInternalsMoid(params *GetHyperflexFeatureLimitInternalsMoidParams) (*GetHyperflexFeatureLimitInternalsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHyperflexFeatureLimitInternalsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHyperflexFeatureLimitInternalsMoid",
		Method:             "GET",
		PathPattern:        "/hyperflex/FeatureLimitInternals/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHyperflexFeatureLimitInternalsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHyperflexFeatureLimitInternalsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHyperflexFeatureLimitInternalsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchHyperflexFeatureLimitInternalsMoid updates an instance of hyperflex feature limit internal
*/
func (a *Client) PatchHyperflexFeatureLimitInternalsMoid(params *PatchHyperflexFeatureLimitInternalsMoidParams) (*PatchHyperflexFeatureLimitInternalsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchHyperflexFeatureLimitInternalsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchHyperflexFeatureLimitInternalsMoid",
		Method:             "PATCH",
		PathPattern:        "/hyperflex/FeatureLimitInternals/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchHyperflexFeatureLimitInternalsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchHyperflexFeatureLimitInternalsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchHyperflexFeatureLimitInternalsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostHyperflexFeatureLimitInternals creates an instance of hyperflex feature limit internal
*/
func (a *Client) PostHyperflexFeatureLimitInternals(params *PostHyperflexFeatureLimitInternalsParams) (*PostHyperflexFeatureLimitInternalsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHyperflexFeatureLimitInternalsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostHyperflexFeatureLimitInternals",
		Method:             "POST",
		PathPattern:        "/hyperflex/FeatureLimitInternals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostHyperflexFeatureLimitInternalsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHyperflexFeatureLimitInternalsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostHyperflexFeatureLimitInternalsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostHyperflexFeatureLimitInternalsMoid updates an instance of hyperflex feature limit internal
*/
func (a *Client) PostHyperflexFeatureLimitInternalsMoid(params *PostHyperflexFeatureLimitInternalsMoidParams) (*PostHyperflexFeatureLimitInternalsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHyperflexFeatureLimitInternalsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostHyperflexFeatureLimitInternalsMoid",
		Method:             "POST",
		PathPattern:        "/hyperflex/FeatureLimitInternals/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostHyperflexFeatureLimitInternalsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHyperflexFeatureLimitInternalsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostHyperflexFeatureLimitInternalsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
