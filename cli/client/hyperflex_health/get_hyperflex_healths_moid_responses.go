// Code generated by go-swagger; DO NOT EDIT.

package hyperflex_health

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetHyperflexHealthsMoidReader is a Reader for the GetHyperflexHealthsMoid structure.
type GetHyperflexHealthsMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetHyperflexHealthsMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetHyperflexHealthsMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetHyperflexHealthsMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetHyperflexHealthsMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetHyperflexHealthsMoidOK creates a GetHyperflexHealthsMoidOK with default headers values
func NewGetHyperflexHealthsMoidOK() *GetHyperflexHealthsMoidOK {
	return &GetHyperflexHealthsMoidOK{}
}

/*GetHyperflexHealthsMoidOK handles this case with default header values.

An instance of hyperflexHealth
*/
type GetHyperflexHealthsMoidOK struct {
	Payload *models.HyperflexHealth
}

func (o *GetHyperflexHealthsMoidOK) Error() string {
	return fmt.Sprintf("[GET /hyperflex/Healths/{moid}][%d] getHyperflexHealthsMoidOK  %+v", 200, o.Payload)
}

func (o *GetHyperflexHealthsMoidOK) GetPayload() *models.HyperflexHealth {
	return o.Payload
}

func (o *GetHyperflexHealthsMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HyperflexHealth)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHyperflexHealthsMoidNotFound creates a GetHyperflexHealthsMoidNotFound with default headers values
func NewGetHyperflexHealthsMoidNotFound() *GetHyperflexHealthsMoidNotFound {
	return &GetHyperflexHealthsMoidNotFound{}
}

/*GetHyperflexHealthsMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetHyperflexHealthsMoidNotFound struct {
}

func (o *GetHyperflexHealthsMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /hyperflex/Healths/{moid}][%d] getHyperflexHealthsMoidNotFound ", 404)
}

func (o *GetHyperflexHealthsMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetHyperflexHealthsMoidDefault creates a GetHyperflexHealthsMoidDefault with default headers values
func NewGetHyperflexHealthsMoidDefault(code int) *GetHyperflexHealthsMoidDefault {
	return &GetHyperflexHealthsMoidDefault{
		_statusCode: code,
	}
}

/*GetHyperflexHealthsMoidDefault handles this case with default header values.

Unexpected error
*/
type GetHyperflexHealthsMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get hyperflex healths moid default response
func (o *GetHyperflexHealthsMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetHyperflexHealthsMoidDefault) Error() string {
	return fmt.Sprintf("[GET /hyperflex/Healths/{moid}][%d] GetHyperflexHealthsMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetHyperflexHealthsMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetHyperflexHealthsMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
