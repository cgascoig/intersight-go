// Code generated by go-swagger; DO NOT EDIT.

package hyperflex_hxdp_version

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new hyperflex hxdp version API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for hyperflex hxdp version API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteHyperflexHxdpVersionsMoid deletes an instance of hyperflex hxdp version
*/
func (a *Client) DeleteHyperflexHxdpVersionsMoid(params *DeleteHyperflexHxdpVersionsMoidParams) (*DeleteHyperflexHxdpVersionsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHyperflexHxdpVersionsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteHyperflexHxdpVersionsMoid",
		Method:             "DELETE",
		PathPattern:        "/hyperflex/HxdpVersions/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteHyperflexHxdpVersionsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteHyperflexHxdpVersionsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteHyperflexHxdpVersionsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetHyperflexHxdpVersions gets a list of hyperflex hxdp version instances
*/
func (a *Client) GetHyperflexHxdpVersions(params *GetHyperflexHxdpVersionsParams) (*GetHyperflexHxdpVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHyperflexHxdpVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHyperflexHxdpVersions",
		Method:             "GET",
		PathPattern:        "/hyperflex/HxdpVersions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHyperflexHxdpVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHyperflexHxdpVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHyperflexHxdpVersionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetHyperflexHxdpVersionsMoid gets a specific instance of hyperflex hxdp version
*/
func (a *Client) GetHyperflexHxdpVersionsMoid(params *GetHyperflexHxdpVersionsMoidParams) (*GetHyperflexHxdpVersionsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHyperflexHxdpVersionsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHyperflexHxdpVersionsMoid",
		Method:             "GET",
		PathPattern:        "/hyperflex/HxdpVersions/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHyperflexHxdpVersionsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHyperflexHxdpVersionsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHyperflexHxdpVersionsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchHyperflexHxdpVersionsMoid updates an instance of hyperflex hxdp version
*/
func (a *Client) PatchHyperflexHxdpVersionsMoid(params *PatchHyperflexHxdpVersionsMoidParams) (*PatchHyperflexHxdpVersionsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchHyperflexHxdpVersionsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchHyperflexHxdpVersionsMoid",
		Method:             "PATCH",
		PathPattern:        "/hyperflex/HxdpVersions/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchHyperflexHxdpVersionsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchHyperflexHxdpVersionsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchHyperflexHxdpVersionsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostHyperflexHxdpVersions creates an instance of hyperflex hxdp version
*/
func (a *Client) PostHyperflexHxdpVersions(params *PostHyperflexHxdpVersionsParams) (*PostHyperflexHxdpVersionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHyperflexHxdpVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostHyperflexHxdpVersions",
		Method:             "POST",
		PathPattern:        "/hyperflex/HxdpVersions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostHyperflexHxdpVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHyperflexHxdpVersionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostHyperflexHxdpVersionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostHyperflexHxdpVersionsMoid updates an instance of hyperflex hxdp version
*/
func (a *Client) PostHyperflexHxdpVersionsMoid(params *PostHyperflexHxdpVersionsMoidParams) (*PostHyperflexHxdpVersionsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHyperflexHxdpVersionsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostHyperflexHxdpVersionsMoid",
		Method:             "POST",
		PathPattern:        "/hyperflex/HxdpVersions/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostHyperflexHxdpVersionsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHyperflexHxdpVersionsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostHyperflexHxdpVersionsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
