// Code generated by go-swagger; DO NOT EDIT.

package hyperflex_node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetHyperflexNodesMoidReader is a Reader for the GetHyperflexNodesMoid structure.
type GetHyperflexNodesMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetHyperflexNodesMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetHyperflexNodesMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetHyperflexNodesMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetHyperflexNodesMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetHyperflexNodesMoidOK creates a GetHyperflexNodesMoidOK with default headers values
func NewGetHyperflexNodesMoidOK() *GetHyperflexNodesMoidOK {
	return &GetHyperflexNodesMoidOK{}
}

/*GetHyperflexNodesMoidOK handles this case with default header values.

An instance of hyperflexNode
*/
type GetHyperflexNodesMoidOK struct {
	Payload *models.HyperflexNode
}

func (o *GetHyperflexNodesMoidOK) Error() string {
	return fmt.Sprintf("[GET /hyperflex/Nodes/{moid}][%d] getHyperflexNodesMoidOK  %+v", 200, o.Payload)
}

func (o *GetHyperflexNodesMoidOK) GetPayload() *models.HyperflexNode {
	return o.Payload
}

func (o *GetHyperflexNodesMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HyperflexNode)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHyperflexNodesMoidNotFound creates a GetHyperflexNodesMoidNotFound with default headers values
func NewGetHyperflexNodesMoidNotFound() *GetHyperflexNodesMoidNotFound {
	return &GetHyperflexNodesMoidNotFound{}
}

/*GetHyperflexNodesMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetHyperflexNodesMoidNotFound struct {
}

func (o *GetHyperflexNodesMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /hyperflex/Nodes/{moid}][%d] getHyperflexNodesMoidNotFound ", 404)
}

func (o *GetHyperflexNodesMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetHyperflexNodesMoidDefault creates a GetHyperflexNodesMoidDefault with default headers values
func NewGetHyperflexNodesMoidDefault(code int) *GetHyperflexNodesMoidDefault {
	return &GetHyperflexNodesMoidDefault{
		_statusCode: code,
	}
}

/*GetHyperflexNodesMoidDefault handles this case with default header values.

Unexpected error
*/
type GetHyperflexNodesMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get hyperflex nodes moid default response
func (o *GetHyperflexNodesMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetHyperflexNodesMoidDefault) Error() string {
	return fmt.Sprintf("[GET /hyperflex/Nodes/{moid}][%d] GetHyperflexNodesMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetHyperflexNodesMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetHyperflexNodesMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
