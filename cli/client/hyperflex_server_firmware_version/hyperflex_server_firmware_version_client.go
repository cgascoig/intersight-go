// Code generated by go-swagger; DO NOT EDIT.

package hyperflex_server_firmware_version

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new hyperflex server firmware version API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for hyperflex server firmware version API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteHyperflexServerFirmwareVersionsMoid deletes an instance of hyperflex server firmware version
*/
func (a *Client) DeleteHyperflexServerFirmwareVersionsMoid(params *DeleteHyperflexServerFirmwareVersionsMoidParams) (*DeleteHyperflexServerFirmwareVersionsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHyperflexServerFirmwareVersionsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteHyperflexServerFirmwareVersionsMoid",
		Method:             "DELETE",
		PathPattern:        "/hyperflex/ServerFirmwareVersions/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteHyperflexServerFirmwareVersionsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteHyperflexServerFirmwareVersionsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteHyperflexServerFirmwareVersionsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetHyperflexServerFirmwareVersions gets a list of hyperflex server firmware version instances
*/
func (a *Client) GetHyperflexServerFirmwareVersions(params *GetHyperflexServerFirmwareVersionsParams) (*GetHyperflexServerFirmwareVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHyperflexServerFirmwareVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHyperflexServerFirmwareVersions",
		Method:             "GET",
		PathPattern:        "/hyperflex/ServerFirmwareVersions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHyperflexServerFirmwareVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHyperflexServerFirmwareVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHyperflexServerFirmwareVersionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetHyperflexServerFirmwareVersionsMoid gets a specific instance of hyperflex server firmware version
*/
func (a *Client) GetHyperflexServerFirmwareVersionsMoid(params *GetHyperflexServerFirmwareVersionsMoidParams) (*GetHyperflexServerFirmwareVersionsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHyperflexServerFirmwareVersionsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHyperflexServerFirmwareVersionsMoid",
		Method:             "GET",
		PathPattern:        "/hyperflex/ServerFirmwareVersions/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHyperflexServerFirmwareVersionsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHyperflexServerFirmwareVersionsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHyperflexServerFirmwareVersionsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchHyperflexServerFirmwareVersionsMoid updates an instance of hyperflex server firmware version
*/
func (a *Client) PatchHyperflexServerFirmwareVersionsMoid(params *PatchHyperflexServerFirmwareVersionsMoidParams) (*PatchHyperflexServerFirmwareVersionsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchHyperflexServerFirmwareVersionsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchHyperflexServerFirmwareVersionsMoid",
		Method:             "PATCH",
		PathPattern:        "/hyperflex/ServerFirmwareVersions/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchHyperflexServerFirmwareVersionsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchHyperflexServerFirmwareVersionsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchHyperflexServerFirmwareVersionsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostHyperflexServerFirmwareVersions creates an instance of hyperflex server firmware version
*/
func (a *Client) PostHyperflexServerFirmwareVersions(params *PostHyperflexServerFirmwareVersionsParams) (*PostHyperflexServerFirmwareVersionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHyperflexServerFirmwareVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostHyperflexServerFirmwareVersions",
		Method:             "POST",
		PathPattern:        "/hyperflex/ServerFirmwareVersions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostHyperflexServerFirmwareVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHyperflexServerFirmwareVersionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostHyperflexServerFirmwareVersionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostHyperflexServerFirmwareVersionsMoid updates an instance of hyperflex server firmware version
*/
func (a *Client) PostHyperflexServerFirmwareVersionsMoid(params *PostHyperflexServerFirmwareVersionsMoidParams) (*PostHyperflexServerFirmwareVersionsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHyperflexServerFirmwareVersionsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostHyperflexServerFirmwareVersionsMoid",
		Method:             "POST",
		PathPattern:        "/hyperflex/ServerFirmwareVersions/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostHyperflexServerFirmwareVersionsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHyperflexServerFirmwareVersionsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostHyperflexServerFirmwareVersionsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
