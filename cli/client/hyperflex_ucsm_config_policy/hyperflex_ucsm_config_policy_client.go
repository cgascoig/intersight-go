// Code generated by go-swagger; DO NOT EDIT.

package hyperflex_ucsm_config_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new hyperflex ucsm config policy API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for hyperflex ucsm config policy API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteHyperflexUcsmConfigPoliciesMoid deletes an instance of hyperflex ucsm config policy
*/
func (a *Client) DeleteHyperflexUcsmConfigPoliciesMoid(params *DeleteHyperflexUcsmConfigPoliciesMoidParams) (*DeleteHyperflexUcsmConfigPoliciesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHyperflexUcsmConfigPoliciesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteHyperflexUcsmConfigPoliciesMoid",
		Method:             "DELETE",
		PathPattern:        "/hyperflex/UcsmConfigPolicies/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteHyperflexUcsmConfigPoliciesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteHyperflexUcsmConfigPoliciesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteHyperflexUcsmConfigPoliciesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetHyperflexUcsmConfigPolicies gets a list of hyperflex ucsm config policy instances
*/
func (a *Client) GetHyperflexUcsmConfigPolicies(params *GetHyperflexUcsmConfigPoliciesParams) (*GetHyperflexUcsmConfigPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHyperflexUcsmConfigPoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHyperflexUcsmConfigPolicies",
		Method:             "GET",
		PathPattern:        "/hyperflex/UcsmConfigPolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHyperflexUcsmConfigPoliciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHyperflexUcsmConfigPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHyperflexUcsmConfigPoliciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetHyperflexUcsmConfigPoliciesMoid gets a specific instance of hyperflex ucsm config policy
*/
func (a *Client) GetHyperflexUcsmConfigPoliciesMoid(params *GetHyperflexUcsmConfigPoliciesMoidParams) (*GetHyperflexUcsmConfigPoliciesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHyperflexUcsmConfigPoliciesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHyperflexUcsmConfigPoliciesMoid",
		Method:             "GET",
		PathPattern:        "/hyperflex/UcsmConfigPolicies/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHyperflexUcsmConfigPoliciesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHyperflexUcsmConfigPoliciesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHyperflexUcsmConfigPoliciesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchHyperflexUcsmConfigPoliciesMoid updates an instance of hyperflex ucsm config policy
*/
func (a *Client) PatchHyperflexUcsmConfigPoliciesMoid(params *PatchHyperflexUcsmConfigPoliciesMoidParams) (*PatchHyperflexUcsmConfigPoliciesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchHyperflexUcsmConfigPoliciesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchHyperflexUcsmConfigPoliciesMoid",
		Method:             "PATCH",
		PathPattern:        "/hyperflex/UcsmConfigPolicies/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchHyperflexUcsmConfigPoliciesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchHyperflexUcsmConfigPoliciesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchHyperflexUcsmConfigPoliciesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostHyperflexUcsmConfigPolicies creates an instance of hyperflex ucsm config policy
*/
func (a *Client) PostHyperflexUcsmConfigPolicies(params *PostHyperflexUcsmConfigPoliciesParams) (*PostHyperflexUcsmConfigPoliciesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHyperflexUcsmConfigPoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostHyperflexUcsmConfigPolicies",
		Method:             "POST",
		PathPattern:        "/hyperflex/UcsmConfigPolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostHyperflexUcsmConfigPoliciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHyperflexUcsmConfigPoliciesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostHyperflexUcsmConfigPoliciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostHyperflexUcsmConfigPoliciesMoid updates an instance of hyperflex ucsm config policy
*/
func (a *Client) PostHyperflexUcsmConfigPoliciesMoid(params *PostHyperflexUcsmConfigPoliciesMoidParams) (*PostHyperflexUcsmConfigPoliciesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHyperflexUcsmConfigPoliciesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostHyperflexUcsmConfigPoliciesMoid",
		Method:             "POST",
		PathPattern:        "/hyperflex/UcsmConfigPolicies/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostHyperflexUcsmConfigPoliciesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHyperflexUcsmConfigPoliciesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostHyperflexUcsmConfigPoliciesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
