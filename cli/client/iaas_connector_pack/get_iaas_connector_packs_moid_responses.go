// Code generated by go-swagger; DO NOT EDIT.

package iaas_connector_pack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetIaasConnectorPacksMoidReader is a Reader for the GetIaasConnectorPacksMoid structure.
type GetIaasConnectorPacksMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIaasConnectorPacksMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIaasConnectorPacksMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetIaasConnectorPacksMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetIaasConnectorPacksMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetIaasConnectorPacksMoidOK creates a GetIaasConnectorPacksMoidOK with default headers values
func NewGetIaasConnectorPacksMoidOK() *GetIaasConnectorPacksMoidOK {
	return &GetIaasConnectorPacksMoidOK{}
}

/*GetIaasConnectorPacksMoidOK handles this case with default header values.

An instance of iaasConnectorPack
*/
type GetIaasConnectorPacksMoidOK struct {
	Payload *models.IaasConnectorPack
}

func (o *GetIaasConnectorPacksMoidOK) Error() string {
	return fmt.Sprintf("[GET /iaas/ConnectorPacks/{moid}][%d] getIaasConnectorPacksMoidOK  %+v", 200, o.Payload)
}

func (o *GetIaasConnectorPacksMoidOK) GetPayload() *models.IaasConnectorPack {
	return o.Payload
}

func (o *GetIaasConnectorPacksMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IaasConnectorPack)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIaasConnectorPacksMoidNotFound creates a GetIaasConnectorPacksMoidNotFound with default headers values
func NewGetIaasConnectorPacksMoidNotFound() *GetIaasConnectorPacksMoidNotFound {
	return &GetIaasConnectorPacksMoidNotFound{}
}

/*GetIaasConnectorPacksMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetIaasConnectorPacksMoidNotFound struct {
}

func (o *GetIaasConnectorPacksMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /iaas/ConnectorPacks/{moid}][%d] getIaasConnectorPacksMoidNotFound ", 404)
}

func (o *GetIaasConnectorPacksMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIaasConnectorPacksMoidDefault creates a GetIaasConnectorPacksMoidDefault with default headers values
func NewGetIaasConnectorPacksMoidDefault(code int) *GetIaasConnectorPacksMoidDefault {
	return &GetIaasConnectorPacksMoidDefault{
		_statusCode: code,
	}
}

/*GetIaasConnectorPacksMoidDefault handles this case with default header values.

Unexpected error
*/
type GetIaasConnectorPacksMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get iaas connector packs moid default response
func (o *GetIaasConnectorPacksMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetIaasConnectorPacksMoidDefault) Error() string {
	return fmt.Sprintf("[GET /iaas/ConnectorPacks/{moid}][%d] GetIaasConnectorPacksMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetIaasConnectorPacksMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetIaasConnectorPacksMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
