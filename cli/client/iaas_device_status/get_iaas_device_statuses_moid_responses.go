// Code generated by go-swagger; DO NOT EDIT.

package iaas_device_status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetIaasDeviceStatusesMoidReader is a Reader for the GetIaasDeviceStatusesMoid structure.
type GetIaasDeviceStatusesMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIaasDeviceStatusesMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIaasDeviceStatusesMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetIaasDeviceStatusesMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetIaasDeviceStatusesMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetIaasDeviceStatusesMoidOK creates a GetIaasDeviceStatusesMoidOK with default headers values
func NewGetIaasDeviceStatusesMoidOK() *GetIaasDeviceStatusesMoidOK {
	return &GetIaasDeviceStatusesMoidOK{}
}

/*GetIaasDeviceStatusesMoidOK handles this case with default header values.

An instance of iaasDeviceStatus
*/
type GetIaasDeviceStatusesMoidOK struct {
	Payload *models.IaasDeviceStatus
}

func (o *GetIaasDeviceStatusesMoidOK) Error() string {
	return fmt.Sprintf("[GET /iaas/DeviceStatuses/{moid}][%d] getIaasDeviceStatusesMoidOK  %+v", 200, o.Payload)
}

func (o *GetIaasDeviceStatusesMoidOK) GetPayload() *models.IaasDeviceStatus {
	return o.Payload
}

func (o *GetIaasDeviceStatusesMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IaasDeviceStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIaasDeviceStatusesMoidNotFound creates a GetIaasDeviceStatusesMoidNotFound with default headers values
func NewGetIaasDeviceStatusesMoidNotFound() *GetIaasDeviceStatusesMoidNotFound {
	return &GetIaasDeviceStatusesMoidNotFound{}
}

/*GetIaasDeviceStatusesMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetIaasDeviceStatusesMoidNotFound struct {
}

func (o *GetIaasDeviceStatusesMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /iaas/DeviceStatuses/{moid}][%d] getIaasDeviceStatusesMoidNotFound ", 404)
}

func (o *GetIaasDeviceStatusesMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIaasDeviceStatusesMoidDefault creates a GetIaasDeviceStatusesMoidDefault with default headers values
func NewGetIaasDeviceStatusesMoidDefault(code int) *GetIaasDeviceStatusesMoidDefault {
	return &GetIaasDeviceStatusesMoidDefault{
		_statusCode: code,
	}
}

/*GetIaasDeviceStatusesMoidDefault handles this case with default header values.

Unexpected error
*/
type GetIaasDeviceStatusesMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get iaas device statuses moid default response
func (o *GetIaasDeviceStatusesMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetIaasDeviceStatusesMoidDefault) Error() string {
	return fmt.Sprintf("[GET /iaas/DeviceStatuses/{moid}][%d] GetIaasDeviceStatusesMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetIaasDeviceStatusesMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetIaasDeviceStatusesMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
