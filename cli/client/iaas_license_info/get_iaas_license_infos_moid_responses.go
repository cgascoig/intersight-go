// Code generated by go-swagger; DO NOT EDIT.

package iaas_license_info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetIaasLicenseInfosMoidReader is a Reader for the GetIaasLicenseInfosMoid structure.
type GetIaasLicenseInfosMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIaasLicenseInfosMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIaasLicenseInfosMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetIaasLicenseInfosMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetIaasLicenseInfosMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetIaasLicenseInfosMoidOK creates a GetIaasLicenseInfosMoidOK with default headers values
func NewGetIaasLicenseInfosMoidOK() *GetIaasLicenseInfosMoidOK {
	return &GetIaasLicenseInfosMoidOK{}
}

/*GetIaasLicenseInfosMoidOK handles this case with default header values.

An instance of iaasLicenseInfo
*/
type GetIaasLicenseInfosMoidOK struct {
	Payload *models.IaasLicenseInfo
}

func (o *GetIaasLicenseInfosMoidOK) Error() string {
	return fmt.Sprintf("[GET /iaas/LicenseInfos/{moid}][%d] getIaasLicenseInfosMoidOK  %+v", 200, o.Payload)
}

func (o *GetIaasLicenseInfosMoidOK) GetPayload() *models.IaasLicenseInfo {
	return o.Payload
}

func (o *GetIaasLicenseInfosMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IaasLicenseInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIaasLicenseInfosMoidNotFound creates a GetIaasLicenseInfosMoidNotFound with default headers values
func NewGetIaasLicenseInfosMoidNotFound() *GetIaasLicenseInfosMoidNotFound {
	return &GetIaasLicenseInfosMoidNotFound{}
}

/*GetIaasLicenseInfosMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetIaasLicenseInfosMoidNotFound struct {
}

func (o *GetIaasLicenseInfosMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /iaas/LicenseInfos/{moid}][%d] getIaasLicenseInfosMoidNotFound ", 404)
}

func (o *GetIaasLicenseInfosMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIaasLicenseInfosMoidDefault creates a GetIaasLicenseInfosMoidDefault with default headers values
func NewGetIaasLicenseInfosMoidDefault(code int) *GetIaasLicenseInfosMoidDefault {
	return &GetIaasLicenseInfosMoidDefault{
		_statusCode: code,
	}
}

/*GetIaasLicenseInfosMoidDefault handles this case with default header values.

Unexpected error
*/
type GetIaasLicenseInfosMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get iaas license infos moid default response
func (o *GetIaasLicenseInfosMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetIaasLicenseInfosMoidDefault) Error() string {
	return fmt.Sprintf("[GET /iaas/LicenseInfos/{moid}][%d] GetIaasLicenseInfosMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetIaasLicenseInfosMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetIaasLicenseInfosMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
