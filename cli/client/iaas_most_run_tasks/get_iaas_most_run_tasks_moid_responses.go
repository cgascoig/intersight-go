// Code generated by go-swagger; DO NOT EDIT.

package iaas_most_run_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetIaasMostRunTasksMoidReader is a Reader for the GetIaasMostRunTasksMoid structure.
type GetIaasMostRunTasksMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIaasMostRunTasksMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIaasMostRunTasksMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetIaasMostRunTasksMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetIaasMostRunTasksMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetIaasMostRunTasksMoidOK creates a GetIaasMostRunTasksMoidOK with default headers values
func NewGetIaasMostRunTasksMoidOK() *GetIaasMostRunTasksMoidOK {
	return &GetIaasMostRunTasksMoidOK{}
}

/*GetIaasMostRunTasksMoidOK handles this case with default header values.

An instance of iaasMostRunTasks
*/
type GetIaasMostRunTasksMoidOK struct {
	Payload *models.IaasMostRunTasks
}

func (o *GetIaasMostRunTasksMoidOK) Error() string {
	return fmt.Sprintf("[GET /iaas/MostRunTasks/{moid}][%d] getIaasMostRunTasksMoidOK  %+v", 200, o.Payload)
}

func (o *GetIaasMostRunTasksMoidOK) GetPayload() *models.IaasMostRunTasks {
	return o.Payload
}

func (o *GetIaasMostRunTasksMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IaasMostRunTasks)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIaasMostRunTasksMoidNotFound creates a GetIaasMostRunTasksMoidNotFound with default headers values
func NewGetIaasMostRunTasksMoidNotFound() *GetIaasMostRunTasksMoidNotFound {
	return &GetIaasMostRunTasksMoidNotFound{}
}

/*GetIaasMostRunTasksMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetIaasMostRunTasksMoidNotFound struct {
}

func (o *GetIaasMostRunTasksMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /iaas/MostRunTasks/{moid}][%d] getIaasMostRunTasksMoidNotFound ", 404)
}

func (o *GetIaasMostRunTasksMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIaasMostRunTasksMoidDefault creates a GetIaasMostRunTasksMoidDefault with default headers values
func NewGetIaasMostRunTasksMoidDefault(code int) *GetIaasMostRunTasksMoidDefault {
	return &GetIaasMostRunTasksMoidDefault{
		_statusCode: code,
	}
}

/*GetIaasMostRunTasksMoidDefault handles this case with default header values.

Unexpected error
*/
type GetIaasMostRunTasksMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get iaas most run tasks moid default response
func (o *GetIaasMostRunTasksMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetIaasMostRunTasksMoidDefault) Error() string {
	return fmt.Sprintf("[GET /iaas/MostRunTasks/{moid}][%d] GetIaasMostRunTasksMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetIaasMostRunTasksMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetIaasMostRunTasksMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
