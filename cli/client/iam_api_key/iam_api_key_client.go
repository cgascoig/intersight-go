// Code generated by go-swagger; DO NOT EDIT.

package iam_api_key

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new iam api key API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for iam api key API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteIamAPIKeysMoid deletes an instance of iam Api key
*/
func (a *Client) DeleteIamAPIKeysMoid(params *DeleteIamAPIKeysMoidParams) (*DeleteIamAPIKeysMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIamAPIKeysMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIamAPIKeysMoid",
		Method:             "DELETE",
		PathPattern:        "/iam/ApiKeys/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIamAPIKeysMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIamAPIKeysMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteIamAPIKeysMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetIamAPIKeys gets a list of iam Api key instances
*/
func (a *Client) GetIamAPIKeys(params *GetIamAPIKeysParams) (*GetIamAPIKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIamAPIKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIamAPIKeys",
		Method:             "GET",
		PathPattern:        "/iam/ApiKeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIamAPIKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIamAPIKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIamAPIKeysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetIamAPIKeysMoid gets a specific instance of iam Api key
*/
func (a *Client) GetIamAPIKeysMoid(params *GetIamAPIKeysMoidParams) (*GetIamAPIKeysMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIamAPIKeysMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIamAPIKeysMoid",
		Method:             "GET",
		PathPattern:        "/iam/ApiKeys/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIamAPIKeysMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIamAPIKeysMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIamAPIKeysMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchIamAPIKeysMoid updates an instance of iam Api key
*/
func (a *Client) PatchIamAPIKeysMoid(params *PatchIamAPIKeysMoidParams) (*PatchIamAPIKeysMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchIamAPIKeysMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchIamAPIKeysMoid",
		Method:             "PATCH",
		PathPattern:        "/iam/ApiKeys/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchIamAPIKeysMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchIamAPIKeysMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchIamAPIKeysMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostIamAPIKeys creates an instance of iam Api key
*/
func (a *Client) PostIamAPIKeys(params *PostIamAPIKeysParams) (*PostIamAPIKeysCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIamAPIKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIamAPIKeys",
		Method:             "POST",
		PathPattern:        "/iam/ApiKeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIamAPIKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIamAPIKeysCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostIamAPIKeysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostIamAPIKeysMoid updates an instance of iam Api key
*/
func (a *Client) PostIamAPIKeysMoid(params *PostIamAPIKeysMoidParams) (*PostIamAPIKeysMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIamAPIKeysMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIamAPIKeysMoid",
		Method:             "POST",
		PathPattern:        "/iam/ApiKeys/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIamAPIKeysMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIamAPIKeysMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostIamAPIKeysMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
