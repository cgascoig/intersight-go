// Code generated by go-swagger; DO NOT EDIT.

package iam_domain_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetIamDomainGroupsMoidReader is a Reader for the GetIamDomainGroupsMoid structure.
type GetIamDomainGroupsMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIamDomainGroupsMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIamDomainGroupsMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetIamDomainGroupsMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetIamDomainGroupsMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetIamDomainGroupsMoidOK creates a GetIamDomainGroupsMoidOK with default headers values
func NewGetIamDomainGroupsMoidOK() *GetIamDomainGroupsMoidOK {
	return &GetIamDomainGroupsMoidOK{}
}

/*GetIamDomainGroupsMoidOK handles this case with default header values.

An instance of iamDomainGroup
*/
type GetIamDomainGroupsMoidOK struct {
	Payload *models.IamDomainGroup
}

func (o *GetIamDomainGroupsMoidOK) Error() string {
	return fmt.Sprintf("[GET /iam/DomainGroups/{moid}][%d] getIamDomainGroupsMoidOK  %+v", 200, o.Payload)
}

func (o *GetIamDomainGroupsMoidOK) GetPayload() *models.IamDomainGroup {
	return o.Payload
}

func (o *GetIamDomainGroupsMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IamDomainGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIamDomainGroupsMoidNotFound creates a GetIamDomainGroupsMoidNotFound with default headers values
func NewGetIamDomainGroupsMoidNotFound() *GetIamDomainGroupsMoidNotFound {
	return &GetIamDomainGroupsMoidNotFound{}
}

/*GetIamDomainGroupsMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetIamDomainGroupsMoidNotFound struct {
}

func (o *GetIamDomainGroupsMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /iam/DomainGroups/{moid}][%d] getIamDomainGroupsMoidNotFound ", 404)
}

func (o *GetIamDomainGroupsMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIamDomainGroupsMoidDefault creates a GetIamDomainGroupsMoidDefault with default headers values
func NewGetIamDomainGroupsMoidDefault(code int) *GetIamDomainGroupsMoidDefault {
	return &GetIamDomainGroupsMoidDefault{
		_statusCode: code,
	}
}

/*GetIamDomainGroupsMoidDefault handles this case with default header values.

Unexpected error
*/
type GetIamDomainGroupsMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get iam domain groups moid default response
func (o *GetIamDomainGroupsMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetIamDomainGroupsMoidDefault) Error() string {
	return fmt.Sprintf("[GET /iam/DomainGroups/{moid}][%d] GetIamDomainGroupsMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetIamDomainGroupsMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetIamDomainGroupsMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
