// Code generated by go-swagger; DO NOT EDIT.

package iam_end_point_role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetIamEndPointRolesMoidReader is a Reader for the GetIamEndPointRolesMoid structure.
type GetIamEndPointRolesMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIamEndPointRolesMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIamEndPointRolesMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetIamEndPointRolesMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetIamEndPointRolesMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetIamEndPointRolesMoidOK creates a GetIamEndPointRolesMoidOK with default headers values
func NewGetIamEndPointRolesMoidOK() *GetIamEndPointRolesMoidOK {
	return &GetIamEndPointRolesMoidOK{}
}

/*GetIamEndPointRolesMoidOK handles this case with default header values.

An instance of iamEndPointRole
*/
type GetIamEndPointRolesMoidOK struct {
	Payload *models.IamEndPointRole
}

func (o *GetIamEndPointRolesMoidOK) Error() string {
	return fmt.Sprintf("[GET /iam/EndPointRoles/{moid}][%d] getIamEndPointRolesMoidOK  %+v", 200, o.Payload)
}

func (o *GetIamEndPointRolesMoidOK) GetPayload() *models.IamEndPointRole {
	return o.Payload
}

func (o *GetIamEndPointRolesMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IamEndPointRole)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIamEndPointRolesMoidNotFound creates a GetIamEndPointRolesMoidNotFound with default headers values
func NewGetIamEndPointRolesMoidNotFound() *GetIamEndPointRolesMoidNotFound {
	return &GetIamEndPointRolesMoidNotFound{}
}

/*GetIamEndPointRolesMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetIamEndPointRolesMoidNotFound struct {
}

func (o *GetIamEndPointRolesMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /iam/EndPointRoles/{moid}][%d] getIamEndPointRolesMoidNotFound ", 404)
}

func (o *GetIamEndPointRolesMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIamEndPointRolesMoidDefault creates a GetIamEndPointRolesMoidDefault with default headers values
func NewGetIamEndPointRolesMoidDefault(code int) *GetIamEndPointRolesMoidDefault {
	return &GetIamEndPointRolesMoidDefault{
		_statusCode: code,
	}
}

/*GetIamEndPointRolesMoidDefault handles this case with default header values.

Unexpected error
*/
type GetIamEndPointRolesMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get iam end point roles moid default response
func (o *GetIamEndPointRolesMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetIamEndPointRolesMoidDefault) Error() string {
	return fmt.Sprintf("[GET /iam/EndPointRoles/{moid}][%d] GetIamEndPointRolesMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetIamEndPointRolesMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetIamEndPointRolesMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
