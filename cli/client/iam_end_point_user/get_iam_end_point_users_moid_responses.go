// Code generated by go-swagger; DO NOT EDIT.

package iam_end_point_user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetIamEndPointUsersMoidReader is a Reader for the GetIamEndPointUsersMoid structure.
type GetIamEndPointUsersMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIamEndPointUsersMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIamEndPointUsersMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetIamEndPointUsersMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetIamEndPointUsersMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetIamEndPointUsersMoidOK creates a GetIamEndPointUsersMoidOK with default headers values
func NewGetIamEndPointUsersMoidOK() *GetIamEndPointUsersMoidOK {
	return &GetIamEndPointUsersMoidOK{}
}

/*GetIamEndPointUsersMoidOK handles this case with default header values.

An instance of iamEndPointUser
*/
type GetIamEndPointUsersMoidOK struct {
	Payload *models.IamEndPointUser
}

func (o *GetIamEndPointUsersMoidOK) Error() string {
	return fmt.Sprintf("[GET /iam/EndPointUsers/{moid}][%d] getIamEndPointUsersMoidOK  %+v", 200, o.Payload)
}

func (o *GetIamEndPointUsersMoidOK) GetPayload() *models.IamEndPointUser {
	return o.Payload
}

func (o *GetIamEndPointUsersMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IamEndPointUser)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIamEndPointUsersMoidNotFound creates a GetIamEndPointUsersMoidNotFound with default headers values
func NewGetIamEndPointUsersMoidNotFound() *GetIamEndPointUsersMoidNotFound {
	return &GetIamEndPointUsersMoidNotFound{}
}

/*GetIamEndPointUsersMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetIamEndPointUsersMoidNotFound struct {
}

func (o *GetIamEndPointUsersMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /iam/EndPointUsers/{moid}][%d] getIamEndPointUsersMoidNotFound ", 404)
}

func (o *GetIamEndPointUsersMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIamEndPointUsersMoidDefault creates a GetIamEndPointUsersMoidDefault with default headers values
func NewGetIamEndPointUsersMoidDefault(code int) *GetIamEndPointUsersMoidDefault {
	return &GetIamEndPointUsersMoidDefault{
		_statusCode: code,
	}
}

/*GetIamEndPointUsersMoidDefault handles this case with default header values.

Unexpected error
*/
type GetIamEndPointUsersMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get iam end point users moid default response
func (o *GetIamEndPointUsersMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetIamEndPointUsersMoidDefault) Error() string {
	return fmt.Sprintf("[GET /iam/EndPointUsers/{moid}][%d] GetIamEndPointUsersMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetIamEndPointUsersMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetIamEndPointUsersMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
