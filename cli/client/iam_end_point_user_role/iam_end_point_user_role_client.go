// Code generated by go-swagger; DO NOT EDIT.

package iam_end_point_user_role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new iam end point user role API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for iam end point user role API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteIamEndPointUserRolesMoid deletes an instance of iam end point user role
*/
func (a *Client) DeleteIamEndPointUserRolesMoid(params *DeleteIamEndPointUserRolesMoidParams) (*DeleteIamEndPointUserRolesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIamEndPointUserRolesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIamEndPointUserRolesMoid",
		Method:             "DELETE",
		PathPattern:        "/iam/EndPointUserRoles/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIamEndPointUserRolesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIamEndPointUserRolesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteIamEndPointUserRolesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetIamEndPointUserRoles gets a list of iam end point user role instances
*/
func (a *Client) GetIamEndPointUserRoles(params *GetIamEndPointUserRolesParams) (*GetIamEndPointUserRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIamEndPointUserRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIamEndPointUserRoles",
		Method:             "GET",
		PathPattern:        "/iam/EndPointUserRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIamEndPointUserRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIamEndPointUserRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIamEndPointUserRolesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetIamEndPointUserRolesMoid gets a specific instance of iam end point user role
*/
func (a *Client) GetIamEndPointUserRolesMoid(params *GetIamEndPointUserRolesMoidParams) (*GetIamEndPointUserRolesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIamEndPointUserRolesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIamEndPointUserRolesMoid",
		Method:             "GET",
		PathPattern:        "/iam/EndPointUserRoles/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIamEndPointUserRolesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIamEndPointUserRolesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIamEndPointUserRolesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchIamEndPointUserRolesMoid updates an instance of iam end point user role
*/
func (a *Client) PatchIamEndPointUserRolesMoid(params *PatchIamEndPointUserRolesMoidParams) (*PatchIamEndPointUserRolesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchIamEndPointUserRolesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchIamEndPointUserRolesMoid",
		Method:             "PATCH",
		PathPattern:        "/iam/EndPointUserRoles/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchIamEndPointUserRolesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchIamEndPointUserRolesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchIamEndPointUserRolesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostIamEndPointUserRoles creates an instance of iam end point user role
*/
func (a *Client) PostIamEndPointUserRoles(params *PostIamEndPointUserRolesParams) (*PostIamEndPointUserRolesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIamEndPointUserRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIamEndPointUserRoles",
		Method:             "POST",
		PathPattern:        "/iam/EndPointUserRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIamEndPointUserRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIamEndPointUserRolesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostIamEndPointUserRolesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostIamEndPointUserRolesMoid updates an instance of iam end point user role
*/
func (a *Client) PostIamEndPointUserRolesMoid(params *PostIamEndPointUserRolesMoidParams) (*PostIamEndPointUserRolesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIamEndPointUserRolesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIamEndPointUserRolesMoid",
		Method:             "POST",
		PathPattern:        "/iam/EndPointUserRoles/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIamEndPointUserRolesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIamEndPointUserRolesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostIamEndPointUserRolesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
