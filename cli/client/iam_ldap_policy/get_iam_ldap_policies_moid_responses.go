// Code generated by go-swagger; DO NOT EDIT.

package iam_ldap_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetIamLdapPoliciesMoidReader is a Reader for the GetIamLdapPoliciesMoid structure.
type GetIamLdapPoliciesMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIamLdapPoliciesMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIamLdapPoliciesMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetIamLdapPoliciesMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetIamLdapPoliciesMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetIamLdapPoliciesMoidOK creates a GetIamLdapPoliciesMoidOK with default headers values
func NewGetIamLdapPoliciesMoidOK() *GetIamLdapPoliciesMoidOK {
	return &GetIamLdapPoliciesMoidOK{}
}

/*GetIamLdapPoliciesMoidOK handles this case with default header values.

An instance of iamLdapPolicy
*/
type GetIamLdapPoliciesMoidOK struct {
	Payload *models.IamLdapPolicy
}

func (o *GetIamLdapPoliciesMoidOK) Error() string {
	return fmt.Sprintf("[GET /iam/LdapPolicies/{moid}][%d] getIamLdapPoliciesMoidOK  %+v", 200, o.Payload)
}

func (o *GetIamLdapPoliciesMoidOK) GetPayload() *models.IamLdapPolicy {
	return o.Payload
}

func (o *GetIamLdapPoliciesMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IamLdapPolicy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIamLdapPoliciesMoidNotFound creates a GetIamLdapPoliciesMoidNotFound with default headers values
func NewGetIamLdapPoliciesMoidNotFound() *GetIamLdapPoliciesMoidNotFound {
	return &GetIamLdapPoliciesMoidNotFound{}
}

/*GetIamLdapPoliciesMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetIamLdapPoliciesMoidNotFound struct {
}

func (o *GetIamLdapPoliciesMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /iam/LdapPolicies/{moid}][%d] getIamLdapPoliciesMoidNotFound ", 404)
}

func (o *GetIamLdapPoliciesMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIamLdapPoliciesMoidDefault creates a GetIamLdapPoliciesMoidDefault with default headers values
func NewGetIamLdapPoliciesMoidDefault(code int) *GetIamLdapPoliciesMoidDefault {
	return &GetIamLdapPoliciesMoidDefault{
		_statusCode: code,
	}
}

/*GetIamLdapPoliciesMoidDefault handles this case with default header values.

Unexpected error
*/
type GetIamLdapPoliciesMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get iam ldap policies moid default response
func (o *GetIamLdapPoliciesMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetIamLdapPoliciesMoidDefault) Error() string {
	return fmt.Sprintf("[GET /iam/LdapPolicies/{moid}][%d] GetIamLdapPoliciesMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetIamLdapPoliciesMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetIamLdapPoliciesMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
