// Code generated by go-swagger; DO NOT EDIT.

package iam_ldap_provider

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetIamLdapProvidersMoidReader is a Reader for the GetIamLdapProvidersMoid structure.
type GetIamLdapProvidersMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIamLdapProvidersMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIamLdapProvidersMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetIamLdapProvidersMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetIamLdapProvidersMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetIamLdapProvidersMoidOK creates a GetIamLdapProvidersMoidOK with default headers values
func NewGetIamLdapProvidersMoidOK() *GetIamLdapProvidersMoidOK {
	return &GetIamLdapProvidersMoidOK{}
}

/*GetIamLdapProvidersMoidOK handles this case with default header values.

An instance of iamLdapProvider
*/
type GetIamLdapProvidersMoidOK struct {
	Payload *models.IamLdapProvider
}

func (o *GetIamLdapProvidersMoidOK) Error() string {
	return fmt.Sprintf("[GET /iam/LdapProviders/{moid}][%d] getIamLdapProvidersMoidOK  %+v", 200, o.Payload)
}

func (o *GetIamLdapProvidersMoidOK) GetPayload() *models.IamLdapProvider {
	return o.Payload
}

func (o *GetIamLdapProvidersMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IamLdapProvider)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIamLdapProvidersMoidNotFound creates a GetIamLdapProvidersMoidNotFound with default headers values
func NewGetIamLdapProvidersMoidNotFound() *GetIamLdapProvidersMoidNotFound {
	return &GetIamLdapProvidersMoidNotFound{}
}

/*GetIamLdapProvidersMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetIamLdapProvidersMoidNotFound struct {
}

func (o *GetIamLdapProvidersMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /iam/LdapProviders/{moid}][%d] getIamLdapProvidersMoidNotFound ", 404)
}

func (o *GetIamLdapProvidersMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIamLdapProvidersMoidDefault creates a GetIamLdapProvidersMoidDefault with default headers values
func NewGetIamLdapProvidersMoidDefault(code int) *GetIamLdapProvidersMoidDefault {
	return &GetIamLdapProvidersMoidDefault{
		_statusCode: code,
	}
}

/*GetIamLdapProvidersMoidDefault handles this case with default header values.

Unexpected error
*/
type GetIamLdapProvidersMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get iam ldap providers moid default response
func (o *GetIamLdapProvidersMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetIamLdapProvidersMoidDefault) Error() string {
	return fmt.Sprintf("[GET /iam/LdapProviders/{moid}][%d] GetIamLdapProvidersMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetIamLdapProvidersMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetIamLdapProvidersMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
