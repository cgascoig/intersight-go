// Code generated by go-swagger; DO NOT EDIT.

package iam_ldap_provider

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new iam ldap provider API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for iam ldap provider API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteIamLdapProvidersMoid deletes an instance of iam ldap provider
*/
func (a *Client) DeleteIamLdapProvidersMoid(params *DeleteIamLdapProvidersMoidParams) (*DeleteIamLdapProvidersMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIamLdapProvidersMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIamLdapProvidersMoid",
		Method:             "DELETE",
		PathPattern:        "/iam/LdapProviders/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIamLdapProvidersMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIamLdapProvidersMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteIamLdapProvidersMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetIamLdapProviders gets a list of iam ldap provider instances
*/
func (a *Client) GetIamLdapProviders(params *GetIamLdapProvidersParams) (*GetIamLdapProvidersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIamLdapProvidersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIamLdapProviders",
		Method:             "GET",
		PathPattern:        "/iam/LdapProviders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIamLdapProvidersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIamLdapProvidersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIamLdapProvidersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetIamLdapProvidersMoid gets a specific instance of iam ldap provider
*/
func (a *Client) GetIamLdapProvidersMoid(params *GetIamLdapProvidersMoidParams) (*GetIamLdapProvidersMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIamLdapProvidersMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIamLdapProvidersMoid",
		Method:             "GET",
		PathPattern:        "/iam/LdapProviders/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIamLdapProvidersMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIamLdapProvidersMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIamLdapProvidersMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchIamLdapProvidersMoid updates an instance of iam ldap provider
*/
func (a *Client) PatchIamLdapProvidersMoid(params *PatchIamLdapProvidersMoidParams) (*PatchIamLdapProvidersMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchIamLdapProvidersMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchIamLdapProvidersMoid",
		Method:             "PATCH",
		PathPattern:        "/iam/LdapProviders/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchIamLdapProvidersMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchIamLdapProvidersMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchIamLdapProvidersMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostIamLdapProviders creates an instance of iam ldap provider
*/
func (a *Client) PostIamLdapProviders(params *PostIamLdapProvidersParams) (*PostIamLdapProvidersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIamLdapProvidersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIamLdapProviders",
		Method:             "POST",
		PathPattern:        "/iam/LdapProviders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIamLdapProvidersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIamLdapProvidersCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostIamLdapProvidersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostIamLdapProvidersMoid updates an instance of iam ldap provider
*/
func (a *Client) PostIamLdapProvidersMoid(params *PostIamLdapProvidersMoidParams) (*PostIamLdapProvidersMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIamLdapProvidersMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIamLdapProvidersMoid",
		Method:             "POST",
		PathPattern:        "/iam/LdapProviders/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIamLdapProvidersMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIamLdapProvidersMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostIamLdapProvidersMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
