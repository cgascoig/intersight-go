// Code generated by go-swagger; DO NOT EDIT.

package iam_permission

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetIamPermissionsMoidReader is a Reader for the GetIamPermissionsMoid structure.
type GetIamPermissionsMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIamPermissionsMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIamPermissionsMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetIamPermissionsMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetIamPermissionsMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetIamPermissionsMoidOK creates a GetIamPermissionsMoidOK with default headers values
func NewGetIamPermissionsMoidOK() *GetIamPermissionsMoidOK {
	return &GetIamPermissionsMoidOK{}
}

/*GetIamPermissionsMoidOK handles this case with default header values.

An instance of iamPermission
*/
type GetIamPermissionsMoidOK struct {
	Payload *models.IamPermission
}

func (o *GetIamPermissionsMoidOK) Error() string {
	return fmt.Sprintf("[GET /iam/Permissions/{moid}][%d] getIamPermissionsMoidOK  %+v", 200, o.Payload)
}

func (o *GetIamPermissionsMoidOK) GetPayload() *models.IamPermission {
	return o.Payload
}

func (o *GetIamPermissionsMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IamPermission)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIamPermissionsMoidNotFound creates a GetIamPermissionsMoidNotFound with default headers values
func NewGetIamPermissionsMoidNotFound() *GetIamPermissionsMoidNotFound {
	return &GetIamPermissionsMoidNotFound{}
}

/*GetIamPermissionsMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetIamPermissionsMoidNotFound struct {
}

func (o *GetIamPermissionsMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /iam/Permissions/{moid}][%d] getIamPermissionsMoidNotFound ", 404)
}

func (o *GetIamPermissionsMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIamPermissionsMoidDefault creates a GetIamPermissionsMoidDefault with default headers values
func NewGetIamPermissionsMoidDefault(code int) *GetIamPermissionsMoidDefault {
	return &GetIamPermissionsMoidDefault{
		_statusCode: code,
	}
}

/*GetIamPermissionsMoidDefault handles this case with default header values.

Unexpected error
*/
type GetIamPermissionsMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get iam permissions moid default response
func (o *GetIamPermissionsMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetIamPermissionsMoidDefault) Error() string {
	return fmt.Sprintf("[GET /iam/Permissions/{moid}][%d] GetIamPermissionsMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetIamPermissionsMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetIamPermissionsMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
