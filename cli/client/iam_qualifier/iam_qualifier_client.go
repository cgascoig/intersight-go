// Code generated by go-swagger; DO NOT EDIT.

package iam_qualifier

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new iam qualifier API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for iam qualifier API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteIamQualifiersMoid deletes an instance of iam qualifier
*/
func (a *Client) DeleteIamQualifiersMoid(params *DeleteIamQualifiersMoidParams) (*DeleteIamQualifiersMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIamQualifiersMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIamQualifiersMoid",
		Method:             "DELETE",
		PathPattern:        "/iam/Qualifiers/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIamQualifiersMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIamQualifiersMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteIamQualifiersMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetIamQualifiers gets a list of iam qualifier instances
*/
func (a *Client) GetIamQualifiers(params *GetIamQualifiersParams) (*GetIamQualifiersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIamQualifiersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIamQualifiers",
		Method:             "GET",
		PathPattern:        "/iam/Qualifiers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIamQualifiersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIamQualifiersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIamQualifiersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetIamQualifiersMoid gets a specific instance of iam qualifier
*/
func (a *Client) GetIamQualifiersMoid(params *GetIamQualifiersMoidParams) (*GetIamQualifiersMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIamQualifiersMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIamQualifiersMoid",
		Method:             "GET",
		PathPattern:        "/iam/Qualifiers/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIamQualifiersMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIamQualifiersMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIamQualifiersMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchIamQualifiersMoid updates an instance of iam qualifier
*/
func (a *Client) PatchIamQualifiersMoid(params *PatchIamQualifiersMoidParams) (*PatchIamQualifiersMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchIamQualifiersMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchIamQualifiersMoid",
		Method:             "PATCH",
		PathPattern:        "/iam/Qualifiers/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchIamQualifiersMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchIamQualifiersMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchIamQualifiersMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostIamQualifiers creates an instance of iam qualifier
*/
func (a *Client) PostIamQualifiers(params *PostIamQualifiersParams) (*PostIamQualifiersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIamQualifiersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIamQualifiers",
		Method:             "POST",
		PathPattern:        "/iam/Qualifiers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIamQualifiersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIamQualifiersCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostIamQualifiersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostIamQualifiersMoid updates an instance of iam qualifier
*/
func (a *Client) PostIamQualifiersMoid(params *PostIamQualifiersMoidParams) (*PostIamQualifiersMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIamQualifiersMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIamQualifiersMoid",
		Method:             "POST",
		PathPattern:        "/iam/Qualifiers/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIamQualifiersMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIamQualifiersMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostIamQualifiersMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
