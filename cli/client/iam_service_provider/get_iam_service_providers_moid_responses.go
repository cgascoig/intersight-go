// Code generated by go-swagger; DO NOT EDIT.

package iam_service_provider

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetIamServiceProvidersMoidReader is a Reader for the GetIamServiceProvidersMoid structure.
type GetIamServiceProvidersMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIamServiceProvidersMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIamServiceProvidersMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetIamServiceProvidersMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetIamServiceProvidersMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetIamServiceProvidersMoidOK creates a GetIamServiceProvidersMoidOK with default headers values
func NewGetIamServiceProvidersMoidOK() *GetIamServiceProvidersMoidOK {
	return &GetIamServiceProvidersMoidOK{}
}

/*GetIamServiceProvidersMoidOK handles this case with default header values.

An instance of iamServiceProvider
*/
type GetIamServiceProvidersMoidOK struct {
	Payload *models.IamServiceProvider
}

func (o *GetIamServiceProvidersMoidOK) Error() string {
	return fmt.Sprintf("[GET /iam/ServiceProviders/{moid}][%d] getIamServiceProvidersMoidOK  %+v", 200, o.Payload)
}

func (o *GetIamServiceProvidersMoidOK) GetPayload() *models.IamServiceProvider {
	return o.Payload
}

func (o *GetIamServiceProvidersMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IamServiceProvider)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIamServiceProvidersMoidNotFound creates a GetIamServiceProvidersMoidNotFound with default headers values
func NewGetIamServiceProvidersMoidNotFound() *GetIamServiceProvidersMoidNotFound {
	return &GetIamServiceProvidersMoidNotFound{}
}

/*GetIamServiceProvidersMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetIamServiceProvidersMoidNotFound struct {
}

func (o *GetIamServiceProvidersMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /iam/ServiceProviders/{moid}][%d] getIamServiceProvidersMoidNotFound ", 404)
}

func (o *GetIamServiceProvidersMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIamServiceProvidersMoidDefault creates a GetIamServiceProvidersMoidDefault with default headers values
func NewGetIamServiceProvidersMoidDefault(code int) *GetIamServiceProvidersMoidDefault {
	return &GetIamServiceProvidersMoidDefault{
		_statusCode: code,
	}
}

/*GetIamServiceProvidersMoidDefault handles this case with default header values.

Unexpected error
*/
type GetIamServiceProvidersMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get iam service providers moid default response
func (o *GetIamServiceProvidersMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetIamServiceProvidersMoidDefault) Error() string {
	return fmt.Sprintf("[GET /iam/ServiceProviders/{moid}][%d] GetIamServiceProvidersMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetIamServiceProvidersMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetIamServiceProvidersMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
