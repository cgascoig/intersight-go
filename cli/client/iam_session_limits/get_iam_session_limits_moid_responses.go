// Code generated by go-swagger; DO NOT EDIT.

package iam_session_limits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetIamSessionLimitsMoidReader is a Reader for the GetIamSessionLimitsMoid structure.
type GetIamSessionLimitsMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIamSessionLimitsMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIamSessionLimitsMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetIamSessionLimitsMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetIamSessionLimitsMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetIamSessionLimitsMoidOK creates a GetIamSessionLimitsMoidOK with default headers values
func NewGetIamSessionLimitsMoidOK() *GetIamSessionLimitsMoidOK {
	return &GetIamSessionLimitsMoidOK{}
}

/*GetIamSessionLimitsMoidOK handles this case with default header values.

An instance of iamSessionLimits
*/
type GetIamSessionLimitsMoidOK struct {
	Payload *models.IamSessionLimits
}

func (o *GetIamSessionLimitsMoidOK) Error() string {
	return fmt.Sprintf("[GET /iam/SessionLimits/{moid}][%d] getIamSessionLimitsMoidOK  %+v", 200, o.Payload)
}

func (o *GetIamSessionLimitsMoidOK) GetPayload() *models.IamSessionLimits {
	return o.Payload
}

func (o *GetIamSessionLimitsMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IamSessionLimits)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIamSessionLimitsMoidNotFound creates a GetIamSessionLimitsMoidNotFound with default headers values
func NewGetIamSessionLimitsMoidNotFound() *GetIamSessionLimitsMoidNotFound {
	return &GetIamSessionLimitsMoidNotFound{}
}

/*GetIamSessionLimitsMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetIamSessionLimitsMoidNotFound struct {
}

func (o *GetIamSessionLimitsMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /iam/SessionLimits/{moid}][%d] getIamSessionLimitsMoidNotFound ", 404)
}

func (o *GetIamSessionLimitsMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIamSessionLimitsMoidDefault creates a GetIamSessionLimitsMoidDefault with default headers values
func NewGetIamSessionLimitsMoidDefault(code int) *GetIamSessionLimitsMoidDefault {
	return &GetIamSessionLimitsMoidDefault{
		_statusCode: code,
	}
}

/*GetIamSessionLimitsMoidDefault handles this case with default header values.

Unexpected error
*/
type GetIamSessionLimitsMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get iam session limits moid default response
func (o *GetIamSessionLimitsMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetIamSessionLimitsMoidDefault) Error() string {
	return fmt.Sprintf("[GET /iam/SessionLimits/{moid}][%d] GetIamSessionLimitsMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetIamSessionLimitsMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetIamSessionLimitsMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
