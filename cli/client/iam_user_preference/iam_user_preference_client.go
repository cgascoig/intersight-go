// Code generated by go-swagger; DO NOT EDIT.

package iam_user_preference

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new iam user preference API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for iam user preference API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetIamUserPreferences gets a list of iam user preference instances
*/
func (a *Client) GetIamUserPreferences(params *GetIamUserPreferencesParams) (*GetIamUserPreferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIamUserPreferencesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIamUserPreferences",
		Method:             "GET",
		PathPattern:        "/iam/UserPreferences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIamUserPreferencesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIamUserPreferencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIamUserPreferencesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetIamUserPreferencesMoid gets a specific instance of iam user preference
*/
func (a *Client) GetIamUserPreferencesMoid(params *GetIamUserPreferencesMoidParams) (*GetIamUserPreferencesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIamUserPreferencesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIamUserPreferencesMoid",
		Method:             "GET",
		PathPattern:        "/iam/UserPreferences/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIamUserPreferencesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIamUserPreferencesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIamUserPreferencesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchIamUserPreferencesMoid updates an instance of iam user preference
*/
func (a *Client) PatchIamUserPreferencesMoid(params *PatchIamUserPreferencesMoidParams) (*PatchIamUserPreferencesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchIamUserPreferencesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchIamUserPreferencesMoid",
		Method:             "PATCH",
		PathPattern:        "/iam/UserPreferences/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchIamUserPreferencesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchIamUserPreferencesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchIamUserPreferencesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostIamUserPreferencesMoid updates an instance of iam user preference
*/
func (a *Client) PostIamUserPreferencesMoid(params *PostIamUserPreferencesMoidParams) (*PostIamUserPreferencesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIamUserPreferencesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIamUserPreferencesMoid",
		Method:             "POST",
		PathPattern:        "/iam/UserPreferences/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIamUserPreferencesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIamUserPreferencesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostIamUserPreferencesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
