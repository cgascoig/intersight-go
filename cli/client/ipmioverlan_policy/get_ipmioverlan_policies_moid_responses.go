// Code generated by go-swagger; DO NOT EDIT.

package ipmioverlan_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetIpmioverlanPoliciesMoidReader is a Reader for the GetIpmioverlanPoliciesMoid structure.
type GetIpmioverlanPoliciesMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIpmioverlanPoliciesMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIpmioverlanPoliciesMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetIpmioverlanPoliciesMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetIpmioverlanPoliciesMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetIpmioverlanPoliciesMoidOK creates a GetIpmioverlanPoliciesMoidOK with default headers values
func NewGetIpmioverlanPoliciesMoidOK() *GetIpmioverlanPoliciesMoidOK {
	return &GetIpmioverlanPoliciesMoidOK{}
}

/*GetIpmioverlanPoliciesMoidOK handles this case with default header values.

An instance of ipmioverlanPolicy
*/
type GetIpmioverlanPoliciesMoidOK struct {
	Payload *models.IpmioverlanPolicy
}

func (o *GetIpmioverlanPoliciesMoidOK) Error() string {
	return fmt.Sprintf("[GET /ipmioverlan/Policies/{moid}][%d] getIpmioverlanPoliciesMoidOK  %+v", 200, o.Payload)
}

func (o *GetIpmioverlanPoliciesMoidOK) GetPayload() *models.IpmioverlanPolicy {
	return o.Payload
}

func (o *GetIpmioverlanPoliciesMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IpmioverlanPolicy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIpmioverlanPoliciesMoidNotFound creates a GetIpmioverlanPoliciesMoidNotFound with default headers values
func NewGetIpmioverlanPoliciesMoidNotFound() *GetIpmioverlanPoliciesMoidNotFound {
	return &GetIpmioverlanPoliciesMoidNotFound{}
}

/*GetIpmioverlanPoliciesMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetIpmioverlanPoliciesMoidNotFound struct {
}

func (o *GetIpmioverlanPoliciesMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /ipmioverlan/Policies/{moid}][%d] getIpmioverlanPoliciesMoidNotFound ", 404)
}

func (o *GetIpmioverlanPoliciesMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIpmioverlanPoliciesMoidDefault creates a GetIpmioverlanPoliciesMoidDefault with default headers values
func NewGetIpmioverlanPoliciesMoidDefault(code int) *GetIpmioverlanPoliciesMoidDefault {
	return &GetIpmioverlanPoliciesMoidDefault{
		_statusCode: code,
	}
}

/*GetIpmioverlanPoliciesMoidDefault handles this case with default header values.

Unexpected error
*/
type GetIpmioverlanPoliciesMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get ipmioverlan policies moid default response
func (o *GetIpmioverlanPoliciesMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetIpmioverlanPoliciesMoidDefault) Error() string {
	return fmt.Sprintf("[GET /ipmioverlan/Policies/{moid}][%d] GetIpmioverlanPoliciesMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetIpmioverlanPoliciesMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetIpmioverlanPoliciesMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
