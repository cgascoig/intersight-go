// Code generated by go-swagger; DO NOT EDIT.

package license_account_license_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetLicenseAccountLicenseDataMoidReader is a Reader for the GetLicenseAccountLicenseDataMoid structure.
type GetLicenseAccountLicenseDataMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLicenseAccountLicenseDataMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLicenseAccountLicenseDataMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetLicenseAccountLicenseDataMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetLicenseAccountLicenseDataMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetLicenseAccountLicenseDataMoidOK creates a GetLicenseAccountLicenseDataMoidOK with default headers values
func NewGetLicenseAccountLicenseDataMoidOK() *GetLicenseAccountLicenseDataMoidOK {
	return &GetLicenseAccountLicenseDataMoidOK{}
}

/*GetLicenseAccountLicenseDataMoidOK handles this case with default header values.

An instance of licenseAccountLicenseData
*/
type GetLicenseAccountLicenseDataMoidOK struct {
	Payload *models.LicenseAccountLicenseData
}

func (o *GetLicenseAccountLicenseDataMoidOK) Error() string {
	return fmt.Sprintf("[GET /license/AccountLicenseData/{moid}][%d] getLicenseAccountLicenseDataMoidOK  %+v", 200, o.Payload)
}

func (o *GetLicenseAccountLicenseDataMoidOK) GetPayload() *models.LicenseAccountLicenseData {
	return o.Payload
}

func (o *GetLicenseAccountLicenseDataMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LicenseAccountLicenseData)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseAccountLicenseDataMoidNotFound creates a GetLicenseAccountLicenseDataMoidNotFound with default headers values
func NewGetLicenseAccountLicenseDataMoidNotFound() *GetLicenseAccountLicenseDataMoidNotFound {
	return &GetLicenseAccountLicenseDataMoidNotFound{}
}

/*GetLicenseAccountLicenseDataMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetLicenseAccountLicenseDataMoidNotFound struct {
}

func (o *GetLicenseAccountLicenseDataMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /license/AccountLicenseData/{moid}][%d] getLicenseAccountLicenseDataMoidNotFound ", 404)
}

func (o *GetLicenseAccountLicenseDataMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetLicenseAccountLicenseDataMoidDefault creates a GetLicenseAccountLicenseDataMoidDefault with default headers values
func NewGetLicenseAccountLicenseDataMoidDefault(code int) *GetLicenseAccountLicenseDataMoidDefault {
	return &GetLicenseAccountLicenseDataMoidDefault{
		_statusCode: code,
	}
}

/*GetLicenseAccountLicenseDataMoidDefault handles this case with default header values.

Unexpected error
*/
type GetLicenseAccountLicenseDataMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get license account license data moid default response
func (o *GetLicenseAccountLicenseDataMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetLicenseAccountLicenseDataMoidDefault) Error() string {
	return fmt.Sprintf("[GET /license/AccountLicenseData/{moid}][%d] GetLicenseAccountLicenseDataMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetLicenseAccountLicenseDataMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetLicenseAccountLicenseDataMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
