// Code generated by go-swagger; DO NOT EDIT.

package license_customer_op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetLicenseCustomerOpsReader is a Reader for the GetLicenseCustomerOps structure.
type GetLicenseCustomerOpsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLicenseCustomerOpsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLicenseCustomerOpsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetLicenseCustomerOpsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetLicenseCustomerOpsOK creates a GetLicenseCustomerOpsOK with default headers values
func NewGetLicenseCustomerOpsOK() *GetLicenseCustomerOpsOK {
	return &GetLicenseCustomerOpsOK{}
}

/*GetLicenseCustomerOpsOK handles this case with default header values.

List of licenseCustomerOps for the given filter criteria
*/
type GetLicenseCustomerOpsOK struct {
	Payload *models.LicenseCustomerOpList
}

func (o *GetLicenseCustomerOpsOK) Error() string {
	return fmt.Sprintf("[GET /license/CustomerOps][%d] getLicenseCustomerOpsOK  %+v", 200, o.Payload)
}

func (o *GetLicenseCustomerOpsOK) GetPayload() *models.LicenseCustomerOpList {
	return o.Payload
}

func (o *GetLicenseCustomerOpsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LicenseCustomerOpList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseCustomerOpsDefault creates a GetLicenseCustomerOpsDefault with default headers values
func NewGetLicenseCustomerOpsDefault(code int) *GetLicenseCustomerOpsDefault {
	return &GetLicenseCustomerOpsDefault{
		_statusCode: code,
	}
}

/*GetLicenseCustomerOpsDefault handles this case with default header values.

Unexpected error
*/
type GetLicenseCustomerOpsDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get license customer ops default response
func (o *GetLicenseCustomerOpsDefault) Code() int {
	return o._statusCode
}

func (o *GetLicenseCustomerOpsDefault) Error() string {
	return fmt.Sprintf("[GET /license/CustomerOps][%d] GetLicenseCustomerOps default  %+v", o._statusCode, o.Payload)
}

func (o *GetLicenseCustomerOpsDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetLicenseCustomerOpsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
