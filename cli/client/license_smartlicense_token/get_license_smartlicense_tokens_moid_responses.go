// Code generated by go-swagger; DO NOT EDIT.

package license_smartlicense_token

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetLicenseSmartlicenseTokensMoidReader is a Reader for the GetLicenseSmartlicenseTokensMoid structure.
type GetLicenseSmartlicenseTokensMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLicenseSmartlicenseTokensMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLicenseSmartlicenseTokensMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetLicenseSmartlicenseTokensMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetLicenseSmartlicenseTokensMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetLicenseSmartlicenseTokensMoidOK creates a GetLicenseSmartlicenseTokensMoidOK with default headers values
func NewGetLicenseSmartlicenseTokensMoidOK() *GetLicenseSmartlicenseTokensMoidOK {
	return &GetLicenseSmartlicenseTokensMoidOK{}
}

/*GetLicenseSmartlicenseTokensMoidOK handles this case with default header values.

An instance of licenseSmartlicenseToken
*/
type GetLicenseSmartlicenseTokensMoidOK struct {
	Payload *models.LicenseSmartlicenseToken
}

func (o *GetLicenseSmartlicenseTokensMoidOK) Error() string {
	return fmt.Sprintf("[GET /license/SmartlicenseTokens/{moid}][%d] getLicenseSmartlicenseTokensMoidOK  %+v", 200, o.Payload)
}

func (o *GetLicenseSmartlicenseTokensMoidOK) GetPayload() *models.LicenseSmartlicenseToken {
	return o.Payload
}

func (o *GetLicenseSmartlicenseTokensMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LicenseSmartlicenseToken)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLicenseSmartlicenseTokensMoidNotFound creates a GetLicenseSmartlicenseTokensMoidNotFound with default headers values
func NewGetLicenseSmartlicenseTokensMoidNotFound() *GetLicenseSmartlicenseTokensMoidNotFound {
	return &GetLicenseSmartlicenseTokensMoidNotFound{}
}

/*GetLicenseSmartlicenseTokensMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetLicenseSmartlicenseTokensMoidNotFound struct {
}

func (o *GetLicenseSmartlicenseTokensMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /license/SmartlicenseTokens/{moid}][%d] getLicenseSmartlicenseTokensMoidNotFound ", 404)
}

func (o *GetLicenseSmartlicenseTokensMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetLicenseSmartlicenseTokensMoidDefault creates a GetLicenseSmartlicenseTokensMoidDefault with default headers values
func NewGetLicenseSmartlicenseTokensMoidDefault(code int) *GetLicenseSmartlicenseTokensMoidDefault {
	return &GetLicenseSmartlicenseTokensMoidDefault{
		_statusCode: code,
	}
}

/*GetLicenseSmartlicenseTokensMoidDefault handles this case with default header values.

Unexpected error
*/
type GetLicenseSmartlicenseTokensMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get license smartlicense tokens moid default response
func (o *GetLicenseSmartlicenseTokensMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetLicenseSmartlicenseTokensMoidDefault) Error() string {
	return fmt.Sprintf("[GET /license/SmartlicenseTokens/{moid}][%d] GetLicenseSmartlicenseTokensMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetLicenseSmartlicenseTokensMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetLicenseSmartlicenseTokensMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
