// Code generated by go-swagger; DO NOT EDIT.

package license_smartlicense_token

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new license smartlicense token API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for license smartlicense token API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetLicenseSmartlicenseTokens gets a list of license smartlicense token instances
*/
func (a *Client) GetLicenseSmartlicenseTokens(params *GetLicenseSmartlicenseTokensParams) (*GetLicenseSmartlicenseTokensOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLicenseSmartlicenseTokensParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLicenseSmartlicenseTokens",
		Method:             "GET",
		PathPattern:        "/license/SmartlicenseTokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLicenseSmartlicenseTokensReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLicenseSmartlicenseTokensOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLicenseSmartlicenseTokensDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLicenseSmartlicenseTokensMoid gets a specific instance of license smartlicense token
*/
func (a *Client) GetLicenseSmartlicenseTokensMoid(params *GetLicenseSmartlicenseTokensMoidParams) (*GetLicenseSmartlicenseTokensMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLicenseSmartlicenseTokensMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLicenseSmartlicenseTokensMoid",
		Method:             "GET",
		PathPattern:        "/license/SmartlicenseTokens/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLicenseSmartlicenseTokensMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLicenseSmartlicenseTokensMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLicenseSmartlicenseTokensMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchLicenseSmartlicenseTokensMoid updates an instance of license smartlicense token
*/
func (a *Client) PatchLicenseSmartlicenseTokensMoid(params *PatchLicenseSmartlicenseTokensMoidParams) (*PatchLicenseSmartlicenseTokensMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLicenseSmartlicenseTokensMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLicenseSmartlicenseTokensMoid",
		Method:             "PATCH",
		PathPattern:        "/license/SmartlicenseTokens/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchLicenseSmartlicenseTokensMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLicenseSmartlicenseTokensMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchLicenseSmartlicenseTokensMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostLicenseSmartlicenseTokensMoid updates an instance of license smartlicense token
*/
func (a *Client) PostLicenseSmartlicenseTokensMoid(params *PostLicenseSmartlicenseTokensMoidParams) (*PostLicenseSmartlicenseTokensMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLicenseSmartlicenseTokensMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLicenseSmartlicenseTokensMoid",
		Method:             "POST",
		PathPattern:        "/license/SmartlicenseTokens/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLicenseSmartlicenseTokensMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLicenseSmartlicenseTokensMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostLicenseSmartlicenseTokensMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
