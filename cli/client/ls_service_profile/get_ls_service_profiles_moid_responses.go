// Code generated by go-swagger; DO NOT EDIT.

package ls_service_profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetLsServiceProfilesMoidReader is a Reader for the GetLsServiceProfilesMoid structure.
type GetLsServiceProfilesMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLsServiceProfilesMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLsServiceProfilesMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetLsServiceProfilesMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetLsServiceProfilesMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetLsServiceProfilesMoidOK creates a GetLsServiceProfilesMoidOK with default headers values
func NewGetLsServiceProfilesMoidOK() *GetLsServiceProfilesMoidOK {
	return &GetLsServiceProfilesMoidOK{}
}

/*GetLsServiceProfilesMoidOK handles this case with default header values.

An instance of lsServiceProfile
*/
type GetLsServiceProfilesMoidOK struct {
	Payload *models.LsServiceProfile
}

func (o *GetLsServiceProfilesMoidOK) Error() string {
	return fmt.Sprintf("[GET /ls/ServiceProfiles/{moid}][%d] getLsServiceProfilesMoidOK  %+v", 200, o.Payload)
}

func (o *GetLsServiceProfilesMoidOK) GetPayload() *models.LsServiceProfile {
	return o.Payload
}

func (o *GetLsServiceProfilesMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LsServiceProfile)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLsServiceProfilesMoidNotFound creates a GetLsServiceProfilesMoidNotFound with default headers values
func NewGetLsServiceProfilesMoidNotFound() *GetLsServiceProfilesMoidNotFound {
	return &GetLsServiceProfilesMoidNotFound{}
}

/*GetLsServiceProfilesMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetLsServiceProfilesMoidNotFound struct {
}

func (o *GetLsServiceProfilesMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /ls/ServiceProfiles/{moid}][%d] getLsServiceProfilesMoidNotFound ", 404)
}

func (o *GetLsServiceProfilesMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetLsServiceProfilesMoidDefault creates a GetLsServiceProfilesMoidDefault with default headers values
func NewGetLsServiceProfilesMoidDefault(code int) *GetLsServiceProfilesMoidDefault {
	return &GetLsServiceProfilesMoidDefault{
		_statusCode: code,
	}
}

/*GetLsServiceProfilesMoidDefault handles this case with default header values.

Unexpected error
*/
type GetLsServiceProfilesMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get ls service profiles moid default response
func (o *GetLsServiceProfilesMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetLsServiceProfilesMoidDefault) Error() string {
	return fmt.Sprintf("[GET /ls/ServiceProfiles/{moid}][%d] GetLsServiceProfilesMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetLsServiceProfilesMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetLsServiceProfilesMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
