// Code generated by go-swagger; DO NOT EDIT.

package ls_service_profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new ls service profile API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ls service profile API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetLsServiceProfiles gets a list of ls service profile instances
*/
func (a *Client) GetLsServiceProfiles(params *GetLsServiceProfilesParams) (*GetLsServiceProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLsServiceProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLsServiceProfiles",
		Method:             "GET",
		PathPattern:        "/ls/ServiceProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLsServiceProfilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLsServiceProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLsServiceProfilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLsServiceProfilesMoid gets a specific instance of ls service profile
*/
func (a *Client) GetLsServiceProfilesMoid(params *GetLsServiceProfilesMoidParams) (*GetLsServiceProfilesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLsServiceProfilesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLsServiceProfilesMoid",
		Method:             "GET",
		PathPattern:        "/ls/ServiceProfiles/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLsServiceProfilesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLsServiceProfilesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLsServiceProfilesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchLsServiceProfilesMoid updates an instance of ls service profile
*/
func (a *Client) PatchLsServiceProfilesMoid(params *PatchLsServiceProfilesMoidParams) (*PatchLsServiceProfilesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLsServiceProfilesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchLsServiceProfilesMoid",
		Method:             "PATCH",
		PathPattern:        "/ls/ServiceProfiles/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchLsServiceProfilesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLsServiceProfilesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchLsServiceProfilesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostLsServiceProfilesMoid updates an instance of ls service profile
*/
func (a *Client) PostLsServiceProfilesMoid(params *PostLsServiceProfilesMoidParams) (*PostLsServiceProfilesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLsServiceProfilesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLsServiceProfilesMoid",
		Method:             "POST",
		PathPattern:        "/ls/ServiceProfiles/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostLsServiceProfilesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostLsServiceProfilesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostLsServiceProfilesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
