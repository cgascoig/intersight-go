// Code generated by go-swagger; DO NOT EDIT.

package management_interface

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new management interface API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for management interface API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetManagementInterfaces gets a list of management interface instances
*/
func (a *Client) GetManagementInterfaces(params *GetManagementInterfacesParams) (*GetManagementInterfacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetManagementInterfacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetManagementInterfaces",
		Method:             "GET",
		PathPattern:        "/management/Interfaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetManagementInterfacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetManagementInterfacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetManagementInterfacesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetManagementInterfacesMoid gets a specific instance of management interface
*/
func (a *Client) GetManagementInterfacesMoid(params *GetManagementInterfacesMoidParams) (*GetManagementInterfacesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetManagementInterfacesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetManagementInterfacesMoid",
		Method:             "GET",
		PathPattern:        "/management/Interfaces/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetManagementInterfacesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetManagementInterfacesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetManagementInterfacesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchManagementInterfacesMoid updates an instance of management interface
*/
func (a *Client) PatchManagementInterfacesMoid(params *PatchManagementInterfacesMoidParams) (*PatchManagementInterfacesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchManagementInterfacesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchManagementInterfacesMoid",
		Method:             "PATCH",
		PathPattern:        "/management/Interfaces/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchManagementInterfacesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchManagementInterfacesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchManagementInterfacesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostManagementInterfacesMoid updates an instance of management interface
*/
func (a *Client) PostManagementInterfacesMoid(params *PostManagementInterfacesMoidParams) (*PostManagementInterfacesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostManagementInterfacesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostManagementInterfacesMoid",
		Method:             "POST",
		PathPattern:        "/management/Interfaces/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostManagementInterfacesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostManagementInterfacesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostManagementInterfacesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
