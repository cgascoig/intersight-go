// Code generated by go-swagger; DO NOT EDIT.

package network_element

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetNetworkElementsMoidReader is a Reader for the GetNetworkElementsMoid structure.
type GetNetworkElementsMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkElementsMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkElementsMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetNetworkElementsMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetNetworkElementsMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetNetworkElementsMoidOK creates a GetNetworkElementsMoidOK with default headers values
func NewGetNetworkElementsMoidOK() *GetNetworkElementsMoidOK {
	return &GetNetworkElementsMoidOK{}
}

/*GetNetworkElementsMoidOK handles this case with default header values.

An instance of networkElement
*/
type GetNetworkElementsMoidOK struct {
	Payload *models.NetworkElement
}

func (o *GetNetworkElementsMoidOK) Error() string {
	return fmt.Sprintf("[GET /network/Elements/{moid}][%d] getNetworkElementsMoidOK  %+v", 200, o.Payload)
}

func (o *GetNetworkElementsMoidOK) GetPayload() *models.NetworkElement {
	return o.Payload
}

func (o *GetNetworkElementsMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NetworkElement)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkElementsMoidNotFound creates a GetNetworkElementsMoidNotFound with default headers values
func NewGetNetworkElementsMoidNotFound() *GetNetworkElementsMoidNotFound {
	return &GetNetworkElementsMoidNotFound{}
}

/*GetNetworkElementsMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetNetworkElementsMoidNotFound struct {
}

func (o *GetNetworkElementsMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /network/Elements/{moid}][%d] getNetworkElementsMoidNotFound ", 404)
}

func (o *GetNetworkElementsMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNetworkElementsMoidDefault creates a GetNetworkElementsMoidDefault with default headers values
func NewGetNetworkElementsMoidDefault(code int) *GetNetworkElementsMoidDefault {
	return &GetNetworkElementsMoidDefault{
		_statusCode: code,
	}
}

/*GetNetworkElementsMoidDefault handles this case with default header values.

Unexpected error
*/
type GetNetworkElementsMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get network elements moid default response
func (o *GetNetworkElementsMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetNetworkElementsMoidDefault) Error() string {
	return fmt.Sprintf("[GET /network/Elements/{moid}][%d] GetNetworkElementsMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetNetworkElementsMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetNetworkElementsMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
