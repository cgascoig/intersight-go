// Code generated by go-swagger; DO NOT EDIT.

package niaapi_apic_cco_post

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetNiaapiApicCcoPostsMoidReader is a Reader for the GetNiaapiApicCcoPostsMoid structure.
type GetNiaapiApicCcoPostsMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNiaapiApicCcoPostsMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNiaapiApicCcoPostsMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetNiaapiApicCcoPostsMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetNiaapiApicCcoPostsMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetNiaapiApicCcoPostsMoidOK creates a GetNiaapiApicCcoPostsMoidOK with default headers values
func NewGetNiaapiApicCcoPostsMoidOK() *GetNiaapiApicCcoPostsMoidOK {
	return &GetNiaapiApicCcoPostsMoidOK{}
}

/*GetNiaapiApicCcoPostsMoidOK handles this case with default header values.

An instance of niaapiApicCcoPost
*/
type GetNiaapiApicCcoPostsMoidOK struct {
	Payload *models.NiaapiApicCcoPost
}

func (o *GetNiaapiApicCcoPostsMoidOK) Error() string {
	return fmt.Sprintf("[GET /niaapi/ApicCcoPosts/{moid}][%d] getNiaapiApicCcoPostsMoidOK  %+v", 200, o.Payload)
}

func (o *GetNiaapiApicCcoPostsMoidOK) GetPayload() *models.NiaapiApicCcoPost {
	return o.Payload
}

func (o *GetNiaapiApicCcoPostsMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NiaapiApicCcoPost)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNiaapiApicCcoPostsMoidNotFound creates a GetNiaapiApicCcoPostsMoidNotFound with default headers values
func NewGetNiaapiApicCcoPostsMoidNotFound() *GetNiaapiApicCcoPostsMoidNotFound {
	return &GetNiaapiApicCcoPostsMoidNotFound{}
}

/*GetNiaapiApicCcoPostsMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetNiaapiApicCcoPostsMoidNotFound struct {
}

func (o *GetNiaapiApicCcoPostsMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /niaapi/ApicCcoPosts/{moid}][%d] getNiaapiApicCcoPostsMoidNotFound ", 404)
}

func (o *GetNiaapiApicCcoPostsMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNiaapiApicCcoPostsMoidDefault creates a GetNiaapiApicCcoPostsMoidDefault with default headers values
func NewGetNiaapiApicCcoPostsMoidDefault(code int) *GetNiaapiApicCcoPostsMoidDefault {
	return &GetNiaapiApicCcoPostsMoidDefault{
		_statusCode: code,
	}
}

/*GetNiaapiApicCcoPostsMoidDefault handles this case with default header values.

Unexpected error
*/
type GetNiaapiApicCcoPostsMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get niaapi apic cco posts moid default response
func (o *GetNiaapiApicCcoPostsMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetNiaapiApicCcoPostsMoidDefault) Error() string {
	return fmt.Sprintf("[GET /niaapi/ApicCcoPosts/{moid}][%d] GetNiaapiApicCcoPostsMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetNiaapiApicCcoPostsMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetNiaapiApicCcoPostsMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
