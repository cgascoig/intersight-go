// Code generated by go-swagger; DO NOT EDIT.

package niaapi_apic_field_notice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new niaapi apic field notice API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for niaapi apic field notice API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetNiaapiApicFieldNotices gets a list of niaapi apic field notice instances
*/
func (a *Client) GetNiaapiApicFieldNotices(params *GetNiaapiApicFieldNoticesParams) (*GetNiaapiApicFieldNoticesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNiaapiApicFieldNoticesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNiaapiApicFieldNotices",
		Method:             "GET",
		PathPattern:        "/niaapi/ApicFieldNotices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNiaapiApicFieldNoticesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNiaapiApicFieldNoticesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNiaapiApicFieldNoticesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetNiaapiApicFieldNoticesMoid gets a specific instance of niaapi apic field notice
*/
func (a *Client) GetNiaapiApicFieldNoticesMoid(params *GetNiaapiApicFieldNoticesMoidParams) (*GetNiaapiApicFieldNoticesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNiaapiApicFieldNoticesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNiaapiApicFieldNoticesMoid",
		Method:             "GET",
		PathPattern:        "/niaapi/ApicFieldNotices/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNiaapiApicFieldNoticesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNiaapiApicFieldNoticesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNiaapiApicFieldNoticesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
