// Code generated by go-swagger; DO NOT EDIT.

package niaapi_dcnm_hweol

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetNiaapiDcnmHweolsMoidReader is a Reader for the GetNiaapiDcnmHweolsMoid structure.
type GetNiaapiDcnmHweolsMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNiaapiDcnmHweolsMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNiaapiDcnmHweolsMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetNiaapiDcnmHweolsMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetNiaapiDcnmHweolsMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetNiaapiDcnmHweolsMoidOK creates a GetNiaapiDcnmHweolsMoidOK with default headers values
func NewGetNiaapiDcnmHweolsMoidOK() *GetNiaapiDcnmHweolsMoidOK {
	return &GetNiaapiDcnmHweolsMoidOK{}
}

/*GetNiaapiDcnmHweolsMoidOK handles this case with default header values.

An instance of niaapiDcnmHweol
*/
type GetNiaapiDcnmHweolsMoidOK struct {
	Payload *models.NiaapiDcnmHweol
}

func (o *GetNiaapiDcnmHweolsMoidOK) Error() string {
	return fmt.Sprintf("[GET /niaapi/DcnmHweols/{moid}][%d] getNiaapiDcnmHweolsMoidOK  %+v", 200, o.Payload)
}

func (o *GetNiaapiDcnmHweolsMoidOK) GetPayload() *models.NiaapiDcnmHweol {
	return o.Payload
}

func (o *GetNiaapiDcnmHweolsMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NiaapiDcnmHweol)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNiaapiDcnmHweolsMoidNotFound creates a GetNiaapiDcnmHweolsMoidNotFound with default headers values
func NewGetNiaapiDcnmHweolsMoidNotFound() *GetNiaapiDcnmHweolsMoidNotFound {
	return &GetNiaapiDcnmHweolsMoidNotFound{}
}

/*GetNiaapiDcnmHweolsMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetNiaapiDcnmHweolsMoidNotFound struct {
}

func (o *GetNiaapiDcnmHweolsMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /niaapi/DcnmHweols/{moid}][%d] getNiaapiDcnmHweolsMoidNotFound ", 404)
}

func (o *GetNiaapiDcnmHweolsMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNiaapiDcnmHweolsMoidDefault creates a GetNiaapiDcnmHweolsMoidDefault with default headers values
func NewGetNiaapiDcnmHweolsMoidDefault(code int) *GetNiaapiDcnmHweolsMoidDefault {
	return &GetNiaapiDcnmHweolsMoidDefault{
		_statusCode: code,
	}
}

/*GetNiaapiDcnmHweolsMoidDefault handles this case with default header values.

Unexpected error
*/
type GetNiaapiDcnmHweolsMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get niaapi dcnm hweols moid default response
func (o *GetNiaapiDcnmHweolsMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetNiaapiDcnmHweolsMoidDefault) Error() string {
	return fmt.Sprintf("[GET /niaapi/DcnmHweols/{moid}][%d] GetNiaapiDcnmHweolsMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetNiaapiDcnmHweolsMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetNiaapiDcnmHweolsMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
