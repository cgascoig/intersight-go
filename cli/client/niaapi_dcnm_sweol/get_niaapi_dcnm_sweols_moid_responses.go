// Code generated by go-swagger; DO NOT EDIT.

package niaapi_dcnm_sweol

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetNiaapiDcnmSweolsMoidReader is a Reader for the GetNiaapiDcnmSweolsMoid structure.
type GetNiaapiDcnmSweolsMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNiaapiDcnmSweolsMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNiaapiDcnmSweolsMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetNiaapiDcnmSweolsMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetNiaapiDcnmSweolsMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetNiaapiDcnmSweolsMoidOK creates a GetNiaapiDcnmSweolsMoidOK with default headers values
func NewGetNiaapiDcnmSweolsMoidOK() *GetNiaapiDcnmSweolsMoidOK {
	return &GetNiaapiDcnmSweolsMoidOK{}
}

/*GetNiaapiDcnmSweolsMoidOK handles this case with default header values.

An instance of niaapiDcnmSweol
*/
type GetNiaapiDcnmSweolsMoidOK struct {
	Payload *models.NiaapiDcnmSweol
}

func (o *GetNiaapiDcnmSweolsMoidOK) Error() string {
	return fmt.Sprintf("[GET /niaapi/DcnmSweols/{moid}][%d] getNiaapiDcnmSweolsMoidOK  %+v", 200, o.Payload)
}

func (o *GetNiaapiDcnmSweolsMoidOK) GetPayload() *models.NiaapiDcnmSweol {
	return o.Payload
}

func (o *GetNiaapiDcnmSweolsMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NiaapiDcnmSweol)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNiaapiDcnmSweolsMoidNotFound creates a GetNiaapiDcnmSweolsMoidNotFound with default headers values
func NewGetNiaapiDcnmSweolsMoidNotFound() *GetNiaapiDcnmSweolsMoidNotFound {
	return &GetNiaapiDcnmSweolsMoidNotFound{}
}

/*GetNiaapiDcnmSweolsMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetNiaapiDcnmSweolsMoidNotFound struct {
}

func (o *GetNiaapiDcnmSweolsMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /niaapi/DcnmSweols/{moid}][%d] getNiaapiDcnmSweolsMoidNotFound ", 404)
}

func (o *GetNiaapiDcnmSweolsMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNiaapiDcnmSweolsMoidDefault creates a GetNiaapiDcnmSweolsMoidDefault with default headers values
func NewGetNiaapiDcnmSweolsMoidDefault(code int) *GetNiaapiDcnmSweolsMoidDefault {
	return &GetNiaapiDcnmSweolsMoidDefault{
		_statusCode: code,
	}
}

/*GetNiaapiDcnmSweolsMoidDefault handles this case with default header values.

Unexpected error
*/
type GetNiaapiDcnmSweolsMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get niaapi dcnm sweols moid default response
func (o *GetNiaapiDcnmSweolsMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetNiaapiDcnmSweolsMoidDefault) Error() string {
	return fmt.Sprintf("[GET /niaapi/DcnmSweols/{moid}][%d] GetNiaapiDcnmSweolsMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetNiaapiDcnmSweolsMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetNiaapiDcnmSweolsMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
