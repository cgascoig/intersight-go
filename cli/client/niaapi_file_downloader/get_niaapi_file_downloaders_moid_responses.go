// Code generated by go-swagger; DO NOT EDIT.

package niaapi_file_downloader

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetNiaapiFileDownloadersMoidReader is a Reader for the GetNiaapiFileDownloadersMoid structure.
type GetNiaapiFileDownloadersMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNiaapiFileDownloadersMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNiaapiFileDownloadersMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetNiaapiFileDownloadersMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetNiaapiFileDownloadersMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetNiaapiFileDownloadersMoidOK creates a GetNiaapiFileDownloadersMoidOK with default headers values
func NewGetNiaapiFileDownloadersMoidOK() *GetNiaapiFileDownloadersMoidOK {
	return &GetNiaapiFileDownloadersMoidOK{}
}

/*GetNiaapiFileDownloadersMoidOK handles this case with default header values.

An instance of niaapiFileDownloader
*/
type GetNiaapiFileDownloadersMoidOK struct {
	Payload *models.NiaapiFileDownloader
}

func (o *GetNiaapiFileDownloadersMoidOK) Error() string {
	return fmt.Sprintf("[GET /niaapi/FileDownloaders/{moid}][%d] getNiaapiFileDownloadersMoidOK  %+v", 200, o.Payload)
}

func (o *GetNiaapiFileDownloadersMoidOK) GetPayload() *models.NiaapiFileDownloader {
	return o.Payload
}

func (o *GetNiaapiFileDownloadersMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NiaapiFileDownloader)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNiaapiFileDownloadersMoidNotFound creates a GetNiaapiFileDownloadersMoidNotFound with default headers values
func NewGetNiaapiFileDownloadersMoidNotFound() *GetNiaapiFileDownloadersMoidNotFound {
	return &GetNiaapiFileDownloadersMoidNotFound{}
}

/*GetNiaapiFileDownloadersMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetNiaapiFileDownloadersMoidNotFound struct {
}

func (o *GetNiaapiFileDownloadersMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /niaapi/FileDownloaders/{moid}][%d] getNiaapiFileDownloadersMoidNotFound ", 404)
}

func (o *GetNiaapiFileDownloadersMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNiaapiFileDownloadersMoidDefault creates a GetNiaapiFileDownloadersMoidDefault with default headers values
func NewGetNiaapiFileDownloadersMoidDefault(code int) *GetNiaapiFileDownloadersMoidDefault {
	return &GetNiaapiFileDownloadersMoidDefault{
		_statusCode: code,
	}
}

/*GetNiaapiFileDownloadersMoidDefault handles this case with default header values.

Unexpected error
*/
type GetNiaapiFileDownloadersMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get niaapi file downloaders moid default response
func (o *GetNiaapiFileDownloadersMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetNiaapiFileDownloadersMoidDefault) Error() string {
	return fmt.Sprintf("[GET /niaapi/FileDownloaders/{moid}][%d] GetNiaapiFileDownloadersMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetNiaapiFileDownloadersMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetNiaapiFileDownloadersMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
