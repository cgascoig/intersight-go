// Code generated by go-swagger; DO NOT EDIT.

package niaapi_nia_metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetNiaapiNiaMetadataMoidReader is a Reader for the GetNiaapiNiaMetadataMoid structure.
type GetNiaapiNiaMetadataMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNiaapiNiaMetadataMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNiaapiNiaMetadataMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetNiaapiNiaMetadataMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetNiaapiNiaMetadataMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetNiaapiNiaMetadataMoidOK creates a GetNiaapiNiaMetadataMoidOK with default headers values
func NewGetNiaapiNiaMetadataMoidOK() *GetNiaapiNiaMetadataMoidOK {
	return &GetNiaapiNiaMetadataMoidOK{}
}

/*GetNiaapiNiaMetadataMoidOK handles this case with default header values.

An instance of niaapiNiaMetadata
*/
type GetNiaapiNiaMetadataMoidOK struct {
	Payload *models.NiaapiNiaMetadata
}

func (o *GetNiaapiNiaMetadataMoidOK) Error() string {
	return fmt.Sprintf("[GET /niaapi/NiaMetadata/{moid}][%d] getNiaapiNiaMetadataMoidOK  %+v", 200, o.Payload)
}

func (o *GetNiaapiNiaMetadataMoidOK) GetPayload() *models.NiaapiNiaMetadata {
	return o.Payload
}

func (o *GetNiaapiNiaMetadataMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NiaapiNiaMetadata)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNiaapiNiaMetadataMoidNotFound creates a GetNiaapiNiaMetadataMoidNotFound with default headers values
func NewGetNiaapiNiaMetadataMoidNotFound() *GetNiaapiNiaMetadataMoidNotFound {
	return &GetNiaapiNiaMetadataMoidNotFound{}
}

/*GetNiaapiNiaMetadataMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetNiaapiNiaMetadataMoidNotFound struct {
}

func (o *GetNiaapiNiaMetadataMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /niaapi/NiaMetadata/{moid}][%d] getNiaapiNiaMetadataMoidNotFound ", 404)
}

func (o *GetNiaapiNiaMetadataMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNiaapiNiaMetadataMoidDefault creates a GetNiaapiNiaMetadataMoidDefault with default headers values
func NewGetNiaapiNiaMetadataMoidDefault(code int) *GetNiaapiNiaMetadataMoidDefault {
	return &GetNiaapiNiaMetadataMoidDefault{
		_statusCode: code,
	}
}

/*GetNiaapiNiaMetadataMoidDefault handles this case with default header values.

Unexpected error
*/
type GetNiaapiNiaMetadataMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get niaapi nia metadata moid default response
func (o *GetNiaapiNiaMetadataMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetNiaapiNiaMetadataMoidDefault) Error() string {
	return fmt.Sprintf("[GET /niaapi/NiaMetadata/{moid}][%d] GetNiaapiNiaMetadataMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetNiaapiNiaMetadataMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetNiaapiNiaMetadataMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
