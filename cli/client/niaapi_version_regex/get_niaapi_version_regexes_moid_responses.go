// Code generated by go-swagger; DO NOT EDIT.

package niaapi_version_regex

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetNiaapiVersionRegexesMoidReader is a Reader for the GetNiaapiVersionRegexesMoid structure.
type GetNiaapiVersionRegexesMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNiaapiVersionRegexesMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNiaapiVersionRegexesMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetNiaapiVersionRegexesMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetNiaapiVersionRegexesMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetNiaapiVersionRegexesMoidOK creates a GetNiaapiVersionRegexesMoidOK with default headers values
func NewGetNiaapiVersionRegexesMoidOK() *GetNiaapiVersionRegexesMoidOK {
	return &GetNiaapiVersionRegexesMoidOK{}
}

/*GetNiaapiVersionRegexesMoidOK handles this case with default header values.

An instance of niaapiVersionRegex
*/
type GetNiaapiVersionRegexesMoidOK struct {
	Payload *models.NiaapiVersionRegex
}

func (o *GetNiaapiVersionRegexesMoidOK) Error() string {
	return fmt.Sprintf("[GET /niaapi/VersionRegexes/{moid}][%d] getNiaapiVersionRegexesMoidOK  %+v", 200, o.Payload)
}

func (o *GetNiaapiVersionRegexesMoidOK) GetPayload() *models.NiaapiVersionRegex {
	return o.Payload
}

func (o *GetNiaapiVersionRegexesMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NiaapiVersionRegex)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNiaapiVersionRegexesMoidNotFound creates a GetNiaapiVersionRegexesMoidNotFound with default headers values
func NewGetNiaapiVersionRegexesMoidNotFound() *GetNiaapiVersionRegexesMoidNotFound {
	return &GetNiaapiVersionRegexesMoidNotFound{}
}

/*GetNiaapiVersionRegexesMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetNiaapiVersionRegexesMoidNotFound struct {
}

func (o *GetNiaapiVersionRegexesMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /niaapi/VersionRegexes/{moid}][%d] getNiaapiVersionRegexesMoidNotFound ", 404)
}

func (o *GetNiaapiVersionRegexesMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNiaapiVersionRegexesMoidDefault creates a GetNiaapiVersionRegexesMoidDefault with default headers values
func NewGetNiaapiVersionRegexesMoidDefault(code int) *GetNiaapiVersionRegexesMoidDefault {
	return &GetNiaapiVersionRegexesMoidDefault{
		_statusCode: code,
	}
}

/*GetNiaapiVersionRegexesMoidDefault handles this case with default header values.

Unexpected error
*/
type GetNiaapiVersionRegexesMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get niaapi version regexes moid default response
func (o *GetNiaapiVersionRegexesMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetNiaapiVersionRegexesMoidDefault) Error() string {
	return fmt.Sprintf("[GET /niaapi/VersionRegexes/{moid}][%d] GetNiaapiVersionRegexesMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetNiaapiVersionRegexesMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetNiaapiVersionRegexesMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
