// Code generated by go-swagger; DO NOT EDIT.

package pci_coprocessor_card

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetPciCoprocessorCardsMoidReader is a Reader for the GetPciCoprocessorCardsMoid structure.
type GetPciCoprocessorCardsMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPciCoprocessorCardsMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPciCoprocessorCardsMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetPciCoprocessorCardsMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetPciCoprocessorCardsMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetPciCoprocessorCardsMoidOK creates a GetPciCoprocessorCardsMoidOK with default headers values
func NewGetPciCoprocessorCardsMoidOK() *GetPciCoprocessorCardsMoidOK {
	return &GetPciCoprocessorCardsMoidOK{}
}

/*GetPciCoprocessorCardsMoidOK handles this case with default header values.

An instance of pciCoprocessorCard
*/
type GetPciCoprocessorCardsMoidOK struct {
	Payload *models.PciCoprocessorCard
}

func (o *GetPciCoprocessorCardsMoidOK) Error() string {
	return fmt.Sprintf("[GET /pci/CoprocessorCards/{moid}][%d] getPciCoprocessorCardsMoidOK  %+v", 200, o.Payload)
}

func (o *GetPciCoprocessorCardsMoidOK) GetPayload() *models.PciCoprocessorCard {
	return o.Payload
}

func (o *GetPciCoprocessorCardsMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PciCoprocessorCard)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPciCoprocessorCardsMoidNotFound creates a GetPciCoprocessorCardsMoidNotFound with default headers values
func NewGetPciCoprocessorCardsMoidNotFound() *GetPciCoprocessorCardsMoidNotFound {
	return &GetPciCoprocessorCardsMoidNotFound{}
}

/*GetPciCoprocessorCardsMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetPciCoprocessorCardsMoidNotFound struct {
}

func (o *GetPciCoprocessorCardsMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /pci/CoprocessorCards/{moid}][%d] getPciCoprocessorCardsMoidNotFound ", 404)
}

func (o *GetPciCoprocessorCardsMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPciCoprocessorCardsMoidDefault creates a GetPciCoprocessorCardsMoidDefault with default headers values
func NewGetPciCoprocessorCardsMoidDefault(code int) *GetPciCoprocessorCardsMoidDefault {
	return &GetPciCoprocessorCardsMoidDefault{
		_statusCode: code,
	}
}

/*GetPciCoprocessorCardsMoidDefault handles this case with default header values.

Unexpected error
*/
type GetPciCoprocessorCardsMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get pci coprocessor cards moid default response
func (o *GetPciCoprocessorCardsMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetPciCoprocessorCardsMoidDefault) Error() string {
	return fmt.Sprintf("[GET /pci/CoprocessorCards/{moid}][%d] GetPciCoprocessorCardsMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetPciCoprocessorCardsMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetPciCoprocessorCardsMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
