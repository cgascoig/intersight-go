// Code generated by go-swagger; DO NOT EDIT.

package pci_switch

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new pci switch API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for pci switch API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetPciSwitches gets a list of pci switch instances
*/
func (a *Client) GetPciSwitches(params *GetPciSwitchesParams) (*GetPciSwitchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPciSwitchesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPciSwitches",
		Method:             "GET",
		PathPattern:        "/pci/Switches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPciSwitchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPciSwitchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPciSwitchesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetPciSwitchesMoid gets a specific instance of pci switch
*/
func (a *Client) GetPciSwitchesMoid(params *GetPciSwitchesMoidParams) (*GetPciSwitchesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPciSwitchesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPciSwitchesMoid",
		Method:             "GET",
		PathPattern:        "/pci/Switches/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPciSwitchesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPciSwitchesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPciSwitchesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchPciSwitchesMoid updates an instance of pci switch
*/
func (a *Client) PatchPciSwitchesMoid(params *PatchPciSwitchesMoidParams) (*PatchPciSwitchesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchPciSwitchesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchPciSwitchesMoid",
		Method:             "PATCH",
		PathPattern:        "/pci/Switches/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchPciSwitchesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchPciSwitchesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchPciSwitchesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostPciSwitchesMoid updates an instance of pci switch
*/
func (a *Client) PostPciSwitchesMoid(params *PostPciSwitchesMoidParams) (*PostPciSwitchesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPciSwitchesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPciSwitchesMoid",
		Method:             "POST",
		PathPattern:        "/pci/Switches/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPciSwitchesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPciSwitchesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostPciSwitchesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
