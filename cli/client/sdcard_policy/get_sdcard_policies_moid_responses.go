// Code generated by go-swagger; DO NOT EDIT.

package sdcard_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetSdcardPoliciesMoidReader is a Reader for the GetSdcardPoliciesMoid structure.
type GetSdcardPoliciesMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSdcardPoliciesMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSdcardPoliciesMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetSdcardPoliciesMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetSdcardPoliciesMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetSdcardPoliciesMoidOK creates a GetSdcardPoliciesMoidOK with default headers values
func NewGetSdcardPoliciesMoidOK() *GetSdcardPoliciesMoidOK {
	return &GetSdcardPoliciesMoidOK{}
}

/*GetSdcardPoliciesMoidOK handles this case with default header values.

An instance of sdcardPolicy
*/
type GetSdcardPoliciesMoidOK struct {
	Payload *models.SdcardPolicy
}

func (o *GetSdcardPoliciesMoidOK) Error() string {
	return fmt.Sprintf("[GET /sdcard/Policies/{moid}][%d] getSdcardPoliciesMoidOK  %+v", 200, o.Payload)
}

func (o *GetSdcardPoliciesMoidOK) GetPayload() *models.SdcardPolicy {
	return o.Payload
}

func (o *GetSdcardPoliciesMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SdcardPolicy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSdcardPoliciesMoidNotFound creates a GetSdcardPoliciesMoidNotFound with default headers values
func NewGetSdcardPoliciesMoidNotFound() *GetSdcardPoliciesMoidNotFound {
	return &GetSdcardPoliciesMoidNotFound{}
}

/*GetSdcardPoliciesMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetSdcardPoliciesMoidNotFound struct {
}

func (o *GetSdcardPoliciesMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /sdcard/Policies/{moid}][%d] getSdcardPoliciesMoidNotFound ", 404)
}

func (o *GetSdcardPoliciesMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSdcardPoliciesMoidDefault creates a GetSdcardPoliciesMoidDefault with default headers values
func NewGetSdcardPoliciesMoidDefault(code int) *GetSdcardPoliciesMoidDefault {
	return &GetSdcardPoliciesMoidDefault{
		_statusCode: code,
	}
}

/*GetSdcardPoliciesMoidDefault handles this case with default header values.

Unexpected error
*/
type GetSdcardPoliciesMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get sdcard policies moid default response
func (o *GetSdcardPoliciesMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetSdcardPoliciesMoidDefault) Error() string {
	return fmt.Sprintf("[GET /sdcard/Policies/{moid}][%d] GetSdcardPoliciesMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetSdcardPoliciesMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetSdcardPoliciesMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
