// Code generated by go-swagger; DO NOT EDIT.

package server_config_import

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetServerConfigImportsMoidReader is a Reader for the GetServerConfigImportsMoid structure.
type GetServerConfigImportsMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetServerConfigImportsMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetServerConfigImportsMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetServerConfigImportsMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetServerConfigImportsMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetServerConfigImportsMoidOK creates a GetServerConfigImportsMoidOK with default headers values
func NewGetServerConfigImportsMoidOK() *GetServerConfigImportsMoidOK {
	return &GetServerConfigImportsMoidOK{}
}

/*GetServerConfigImportsMoidOK handles this case with default header values.

An instance of serverConfigImport
*/
type GetServerConfigImportsMoidOK struct {
	Payload *models.ServerConfigImport
}

func (o *GetServerConfigImportsMoidOK) Error() string {
	return fmt.Sprintf("[GET /server/ConfigImports/{moid}][%d] getServerConfigImportsMoidOK  %+v", 200, o.Payload)
}

func (o *GetServerConfigImportsMoidOK) GetPayload() *models.ServerConfigImport {
	return o.Payload
}

func (o *GetServerConfigImportsMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServerConfigImport)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServerConfigImportsMoidNotFound creates a GetServerConfigImportsMoidNotFound with default headers values
func NewGetServerConfigImportsMoidNotFound() *GetServerConfigImportsMoidNotFound {
	return &GetServerConfigImportsMoidNotFound{}
}

/*GetServerConfigImportsMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetServerConfigImportsMoidNotFound struct {
}

func (o *GetServerConfigImportsMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /server/ConfigImports/{moid}][%d] getServerConfigImportsMoidNotFound ", 404)
}

func (o *GetServerConfigImportsMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetServerConfigImportsMoidDefault creates a GetServerConfigImportsMoidDefault with default headers values
func NewGetServerConfigImportsMoidDefault(code int) *GetServerConfigImportsMoidDefault {
	return &GetServerConfigImportsMoidDefault{
		_statusCode: code,
	}
}

/*GetServerConfigImportsMoidDefault handles this case with default header values.

Unexpected error
*/
type GetServerConfigImportsMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get server config imports moid default response
func (o *GetServerConfigImportsMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetServerConfigImportsMoidDefault) Error() string {
	return fmt.Sprintf("[GET /server/ConfigImports/{moid}][%d] GetServerConfigImportsMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetServerConfigImportsMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServerConfigImportsMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
