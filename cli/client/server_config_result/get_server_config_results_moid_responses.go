// Code generated by go-swagger; DO NOT EDIT.

package server_config_result

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetServerConfigResultsMoidReader is a Reader for the GetServerConfigResultsMoid structure.
type GetServerConfigResultsMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetServerConfigResultsMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetServerConfigResultsMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetServerConfigResultsMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetServerConfigResultsMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetServerConfigResultsMoidOK creates a GetServerConfigResultsMoidOK with default headers values
func NewGetServerConfigResultsMoidOK() *GetServerConfigResultsMoidOK {
	return &GetServerConfigResultsMoidOK{}
}

/*GetServerConfigResultsMoidOK handles this case with default header values.

An instance of serverConfigResult
*/
type GetServerConfigResultsMoidOK struct {
	Payload *models.ServerConfigResult
}

func (o *GetServerConfigResultsMoidOK) Error() string {
	return fmt.Sprintf("[GET /server/ConfigResults/{moid}][%d] getServerConfigResultsMoidOK  %+v", 200, o.Payload)
}

func (o *GetServerConfigResultsMoidOK) GetPayload() *models.ServerConfigResult {
	return o.Payload
}

func (o *GetServerConfigResultsMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServerConfigResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServerConfigResultsMoidNotFound creates a GetServerConfigResultsMoidNotFound with default headers values
func NewGetServerConfigResultsMoidNotFound() *GetServerConfigResultsMoidNotFound {
	return &GetServerConfigResultsMoidNotFound{}
}

/*GetServerConfigResultsMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetServerConfigResultsMoidNotFound struct {
}

func (o *GetServerConfigResultsMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /server/ConfigResults/{moid}][%d] getServerConfigResultsMoidNotFound ", 404)
}

func (o *GetServerConfigResultsMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetServerConfigResultsMoidDefault creates a GetServerConfigResultsMoidDefault with default headers values
func NewGetServerConfigResultsMoidDefault(code int) *GetServerConfigResultsMoidDefault {
	return &GetServerConfigResultsMoidDefault{
		_statusCode: code,
	}
}

/*GetServerConfigResultsMoidDefault handles this case with default header values.

Unexpected error
*/
type GetServerConfigResultsMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get server config results moid default response
func (o *GetServerConfigResultsMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetServerConfigResultsMoidDefault) Error() string {
	return fmt.Sprintf("[GET /server/ConfigResults/{moid}][%d] GetServerConfigResultsMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetServerConfigResultsMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServerConfigResultsMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
