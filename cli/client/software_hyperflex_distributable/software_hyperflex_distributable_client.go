// Code generated by go-swagger; DO NOT EDIT.

package software_hyperflex_distributable

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new software hyperflex distributable API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for software hyperflex distributable API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteSoftwareHyperflexDistributablesMoid deletes an instance of software hyperflex distributable
*/
func (a *Client) DeleteSoftwareHyperflexDistributablesMoid(params *DeleteSoftwareHyperflexDistributablesMoidParams) (*DeleteSoftwareHyperflexDistributablesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSoftwareHyperflexDistributablesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSoftwareHyperflexDistributablesMoid",
		Method:             "DELETE",
		PathPattern:        "/software/HyperflexDistributables/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSoftwareHyperflexDistributablesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSoftwareHyperflexDistributablesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteSoftwareHyperflexDistributablesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetSoftwareHyperflexDistributables gets a list of software hyperflex distributable instances
*/
func (a *Client) GetSoftwareHyperflexDistributables(params *GetSoftwareHyperflexDistributablesParams) (*GetSoftwareHyperflexDistributablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSoftwareHyperflexDistributablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSoftwareHyperflexDistributables",
		Method:             "GET",
		PathPattern:        "/software/HyperflexDistributables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSoftwareHyperflexDistributablesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSoftwareHyperflexDistributablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSoftwareHyperflexDistributablesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetSoftwareHyperflexDistributablesMoid gets a specific instance of software hyperflex distributable
*/
func (a *Client) GetSoftwareHyperflexDistributablesMoid(params *GetSoftwareHyperflexDistributablesMoidParams) (*GetSoftwareHyperflexDistributablesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSoftwareHyperflexDistributablesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSoftwareHyperflexDistributablesMoid",
		Method:             "GET",
		PathPattern:        "/software/HyperflexDistributables/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSoftwareHyperflexDistributablesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSoftwareHyperflexDistributablesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSoftwareHyperflexDistributablesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchSoftwareHyperflexDistributablesMoid updates an instance of software hyperflex distributable
*/
func (a *Client) PatchSoftwareHyperflexDistributablesMoid(params *PatchSoftwareHyperflexDistributablesMoidParams) (*PatchSoftwareHyperflexDistributablesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSoftwareHyperflexDistributablesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchSoftwareHyperflexDistributablesMoid",
		Method:             "PATCH",
		PathPattern:        "/software/HyperflexDistributables/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchSoftwareHyperflexDistributablesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchSoftwareHyperflexDistributablesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchSoftwareHyperflexDistributablesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostSoftwareHyperflexDistributables creates an instance of software hyperflex distributable
*/
func (a *Client) PostSoftwareHyperflexDistributables(params *PostSoftwareHyperflexDistributablesParams) (*PostSoftwareHyperflexDistributablesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSoftwareHyperflexDistributablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSoftwareHyperflexDistributables",
		Method:             "POST",
		PathPattern:        "/software/HyperflexDistributables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSoftwareHyperflexDistributablesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSoftwareHyperflexDistributablesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostSoftwareHyperflexDistributablesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostSoftwareHyperflexDistributablesMoid updates an instance of software hyperflex distributable
*/
func (a *Client) PostSoftwareHyperflexDistributablesMoid(params *PostSoftwareHyperflexDistributablesMoidParams) (*PostSoftwareHyperflexDistributablesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSoftwareHyperflexDistributablesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSoftwareHyperflexDistributablesMoid",
		Method:             "POST",
		PathPattern:        "/software/HyperflexDistributables/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSoftwareHyperflexDistributablesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSoftwareHyperflexDistributablesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostSoftwareHyperflexDistributablesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
