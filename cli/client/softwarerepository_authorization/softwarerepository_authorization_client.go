// Code generated by go-swagger; DO NOT EDIT.

package softwarerepository_authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new softwarerepository authorization API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for softwarerepository authorization API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetSoftwarerepositoryAuthorizations gets a list of softwarerepository authorization instances
*/
func (a *Client) GetSoftwarerepositoryAuthorizations(params *GetSoftwarerepositoryAuthorizationsParams) (*GetSoftwarerepositoryAuthorizationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSoftwarerepositoryAuthorizationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSoftwarerepositoryAuthorizations",
		Method:             "GET",
		PathPattern:        "/softwarerepository/Authorizations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSoftwarerepositoryAuthorizationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSoftwarerepositoryAuthorizationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSoftwarerepositoryAuthorizationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetSoftwarerepositoryAuthorizationsMoid gets a specific instance of softwarerepository authorization
*/
func (a *Client) GetSoftwarerepositoryAuthorizationsMoid(params *GetSoftwarerepositoryAuthorizationsMoidParams) (*GetSoftwarerepositoryAuthorizationsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSoftwarerepositoryAuthorizationsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSoftwarerepositoryAuthorizationsMoid",
		Method:             "GET",
		PathPattern:        "/softwarerepository/Authorizations/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSoftwarerepositoryAuthorizationsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSoftwarerepositoryAuthorizationsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSoftwarerepositoryAuthorizationsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchSoftwarerepositoryAuthorizationsMoid updates an instance of softwarerepository authorization
*/
func (a *Client) PatchSoftwarerepositoryAuthorizationsMoid(params *PatchSoftwarerepositoryAuthorizationsMoidParams) (*PatchSoftwarerepositoryAuthorizationsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSoftwarerepositoryAuthorizationsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchSoftwarerepositoryAuthorizationsMoid",
		Method:             "PATCH",
		PathPattern:        "/softwarerepository/Authorizations/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchSoftwarerepositoryAuthorizationsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchSoftwarerepositoryAuthorizationsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchSoftwarerepositoryAuthorizationsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostSoftwarerepositoryAuthorizations creates an instance of softwarerepository authorization
*/
func (a *Client) PostSoftwarerepositoryAuthorizations(params *PostSoftwarerepositoryAuthorizationsParams) (*PostSoftwarerepositoryAuthorizationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSoftwarerepositoryAuthorizationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSoftwarerepositoryAuthorizations",
		Method:             "POST",
		PathPattern:        "/softwarerepository/Authorizations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSoftwarerepositoryAuthorizationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSoftwarerepositoryAuthorizationsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostSoftwarerepositoryAuthorizationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostSoftwarerepositoryAuthorizationsMoid updates an instance of softwarerepository authorization
*/
func (a *Client) PostSoftwarerepositoryAuthorizationsMoid(params *PostSoftwarerepositoryAuthorizationsMoidParams) (*PostSoftwarerepositoryAuthorizationsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSoftwarerepositoryAuthorizationsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSoftwarerepositoryAuthorizationsMoid",
		Method:             "POST",
		PathPattern:        "/softwarerepository/Authorizations/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSoftwarerepositoryAuthorizationsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSoftwarerepositoryAuthorizationsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostSoftwarerepositoryAuthorizationsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
