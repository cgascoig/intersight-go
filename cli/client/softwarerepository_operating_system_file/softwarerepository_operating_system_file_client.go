// Code generated by go-swagger; DO NOT EDIT.

package softwarerepository_operating_system_file

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new softwarerepository operating system file API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for softwarerepository operating system file API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteSoftwarerepositoryOperatingSystemFilesMoid deletes an instance of softwarerepository operating system file
*/
func (a *Client) DeleteSoftwarerepositoryOperatingSystemFilesMoid(params *DeleteSoftwarerepositoryOperatingSystemFilesMoidParams) (*DeleteSoftwarerepositoryOperatingSystemFilesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSoftwarerepositoryOperatingSystemFilesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSoftwarerepositoryOperatingSystemFilesMoid",
		Method:             "DELETE",
		PathPattern:        "/softwarerepository/OperatingSystemFiles/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSoftwarerepositoryOperatingSystemFilesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSoftwarerepositoryOperatingSystemFilesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteSoftwarerepositoryOperatingSystemFilesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetSoftwarerepositoryOperatingSystemFiles gets a list of softwarerepository operating system file instances
*/
func (a *Client) GetSoftwarerepositoryOperatingSystemFiles(params *GetSoftwarerepositoryOperatingSystemFilesParams) (*GetSoftwarerepositoryOperatingSystemFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSoftwarerepositoryOperatingSystemFilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSoftwarerepositoryOperatingSystemFiles",
		Method:             "GET",
		PathPattern:        "/softwarerepository/OperatingSystemFiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSoftwarerepositoryOperatingSystemFilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSoftwarerepositoryOperatingSystemFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSoftwarerepositoryOperatingSystemFilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetSoftwarerepositoryOperatingSystemFilesMoid gets a specific instance of softwarerepository operating system file
*/
func (a *Client) GetSoftwarerepositoryOperatingSystemFilesMoid(params *GetSoftwarerepositoryOperatingSystemFilesMoidParams) (*GetSoftwarerepositoryOperatingSystemFilesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSoftwarerepositoryOperatingSystemFilesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSoftwarerepositoryOperatingSystemFilesMoid",
		Method:             "GET",
		PathPattern:        "/softwarerepository/OperatingSystemFiles/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSoftwarerepositoryOperatingSystemFilesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSoftwarerepositoryOperatingSystemFilesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSoftwarerepositoryOperatingSystemFilesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchSoftwarerepositoryOperatingSystemFilesMoid updates an instance of softwarerepository operating system file
*/
func (a *Client) PatchSoftwarerepositoryOperatingSystemFilesMoid(params *PatchSoftwarerepositoryOperatingSystemFilesMoidParams) (*PatchSoftwarerepositoryOperatingSystemFilesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSoftwarerepositoryOperatingSystemFilesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchSoftwarerepositoryOperatingSystemFilesMoid",
		Method:             "PATCH",
		PathPattern:        "/softwarerepository/OperatingSystemFiles/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchSoftwarerepositoryOperatingSystemFilesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchSoftwarerepositoryOperatingSystemFilesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchSoftwarerepositoryOperatingSystemFilesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostSoftwarerepositoryOperatingSystemFiles creates an instance of softwarerepository operating system file
*/
func (a *Client) PostSoftwarerepositoryOperatingSystemFiles(params *PostSoftwarerepositoryOperatingSystemFilesParams) (*PostSoftwarerepositoryOperatingSystemFilesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSoftwarerepositoryOperatingSystemFilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSoftwarerepositoryOperatingSystemFiles",
		Method:             "POST",
		PathPattern:        "/softwarerepository/OperatingSystemFiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSoftwarerepositoryOperatingSystemFilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSoftwarerepositoryOperatingSystemFilesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostSoftwarerepositoryOperatingSystemFilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostSoftwarerepositoryOperatingSystemFilesMoid updates an instance of softwarerepository operating system file
*/
func (a *Client) PostSoftwarerepositoryOperatingSystemFilesMoid(params *PostSoftwarerepositoryOperatingSystemFilesMoidParams) (*PostSoftwarerepositoryOperatingSystemFilesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSoftwarerepositoryOperatingSystemFilesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSoftwarerepositoryOperatingSystemFilesMoid",
		Method:             "POST",
		PathPattern:        "/softwarerepository/OperatingSystemFiles/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSoftwarerepositoryOperatingSystemFilesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSoftwarerepositoryOperatingSystemFilesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostSoftwarerepositoryOperatingSystemFilesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
