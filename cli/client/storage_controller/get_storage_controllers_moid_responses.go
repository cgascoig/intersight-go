// Code generated by go-swagger; DO NOT EDIT.

package storage_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetStorageControllersMoidReader is a Reader for the GetStorageControllersMoid structure.
type GetStorageControllersMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetStorageControllersMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetStorageControllersMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetStorageControllersMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetStorageControllersMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetStorageControllersMoidOK creates a GetStorageControllersMoidOK with default headers values
func NewGetStorageControllersMoidOK() *GetStorageControllersMoidOK {
	return &GetStorageControllersMoidOK{}
}

/*GetStorageControllersMoidOK handles this case with default header values.

An instance of storageController
*/
type GetStorageControllersMoidOK struct {
	Payload *models.StorageController
}

func (o *GetStorageControllersMoidOK) Error() string {
	return fmt.Sprintf("[GET /storage/Controllers/{moid}][%d] getStorageControllersMoidOK  %+v", 200, o.Payload)
}

func (o *GetStorageControllersMoidOK) GetPayload() *models.StorageController {
	return o.Payload
}

func (o *GetStorageControllersMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StorageController)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStorageControllersMoidNotFound creates a GetStorageControllersMoidNotFound with default headers values
func NewGetStorageControllersMoidNotFound() *GetStorageControllersMoidNotFound {
	return &GetStorageControllersMoidNotFound{}
}

/*GetStorageControllersMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetStorageControllersMoidNotFound struct {
}

func (o *GetStorageControllersMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /storage/Controllers/{moid}][%d] getStorageControllersMoidNotFound ", 404)
}

func (o *GetStorageControllersMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetStorageControllersMoidDefault creates a GetStorageControllersMoidDefault with default headers values
func NewGetStorageControllersMoidDefault(code int) *GetStorageControllersMoidDefault {
	return &GetStorageControllersMoidDefault{
		_statusCode: code,
	}
}

/*GetStorageControllersMoidDefault handles this case with default header values.

Unexpected error
*/
type GetStorageControllersMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get storage controllers moid default response
func (o *GetStorageControllersMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetStorageControllersMoidDefault) Error() string {
	return fmt.Sprintf("[GET /storage/Controllers/{moid}][%d] GetStorageControllersMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetStorageControllersMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetStorageControllersMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
