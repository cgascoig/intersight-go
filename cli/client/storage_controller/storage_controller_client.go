// Code generated by go-swagger; DO NOT EDIT.

package storage_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new storage controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for storage controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetStorageControllers gets a list of storage controller instances
*/
func (a *Client) GetStorageControllers(params *GetStorageControllersParams) (*GetStorageControllersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageControllersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStorageControllers",
		Method:             "GET",
		PathPattern:        "/storage/Controllers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStorageControllersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageControllersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStorageControllersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetStorageControllersMoid gets a specific instance of storage controller
*/
func (a *Client) GetStorageControllersMoid(params *GetStorageControllersMoidParams) (*GetStorageControllersMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageControllersMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStorageControllersMoid",
		Method:             "GET",
		PathPattern:        "/storage/Controllers/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStorageControllersMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageControllersMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStorageControllersMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchStorageControllersMoid updates an instance of storage controller
*/
func (a *Client) PatchStorageControllersMoid(params *PatchStorageControllersMoidParams) (*PatchStorageControllersMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchStorageControllersMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchStorageControllersMoid",
		Method:             "PATCH",
		PathPattern:        "/storage/Controllers/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchStorageControllersMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchStorageControllersMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchStorageControllersMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostStorageControllersMoid updates an instance of storage controller
*/
func (a *Client) PostStorageControllersMoid(params *PostStorageControllersMoidParams) (*PostStorageControllersMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageControllersMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostStorageControllersMoid",
		Method:             "POST",
		PathPattern:        "/storage/Controllers/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostStorageControllersMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageControllersMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostStorageControllersMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
