// Code generated by go-swagger; DO NOT EDIT.

package storage_disk_group_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new storage disk group policy API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for storage disk group policy API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteStorageDiskGroupPoliciesMoid deletes an instance of storage disk group policy
*/
func (a *Client) DeleteStorageDiskGroupPoliciesMoid(params *DeleteStorageDiskGroupPoliciesMoidParams) (*DeleteStorageDiskGroupPoliciesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStorageDiskGroupPoliciesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteStorageDiskGroupPoliciesMoid",
		Method:             "DELETE",
		PathPattern:        "/storage/DiskGroupPolicies/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteStorageDiskGroupPoliciesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStorageDiskGroupPoliciesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteStorageDiskGroupPoliciesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetStorageDiskGroupPolicies gets a list of storage disk group policy instances
*/
func (a *Client) GetStorageDiskGroupPolicies(params *GetStorageDiskGroupPoliciesParams) (*GetStorageDiskGroupPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageDiskGroupPoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStorageDiskGroupPolicies",
		Method:             "GET",
		PathPattern:        "/storage/DiskGroupPolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStorageDiskGroupPoliciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageDiskGroupPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStorageDiskGroupPoliciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetStorageDiskGroupPoliciesMoid gets a specific instance of storage disk group policy
*/
func (a *Client) GetStorageDiskGroupPoliciesMoid(params *GetStorageDiskGroupPoliciesMoidParams) (*GetStorageDiskGroupPoliciesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageDiskGroupPoliciesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStorageDiskGroupPoliciesMoid",
		Method:             "GET",
		PathPattern:        "/storage/DiskGroupPolicies/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStorageDiskGroupPoliciesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageDiskGroupPoliciesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStorageDiskGroupPoliciesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchStorageDiskGroupPoliciesMoid updates an instance of storage disk group policy
*/
func (a *Client) PatchStorageDiskGroupPoliciesMoid(params *PatchStorageDiskGroupPoliciesMoidParams) (*PatchStorageDiskGroupPoliciesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchStorageDiskGroupPoliciesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchStorageDiskGroupPoliciesMoid",
		Method:             "PATCH",
		PathPattern:        "/storage/DiskGroupPolicies/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchStorageDiskGroupPoliciesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchStorageDiskGroupPoliciesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchStorageDiskGroupPoliciesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostStorageDiskGroupPolicies creates an instance of storage disk group policy
*/
func (a *Client) PostStorageDiskGroupPolicies(params *PostStorageDiskGroupPoliciesParams) (*PostStorageDiskGroupPoliciesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageDiskGroupPoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostStorageDiskGroupPolicies",
		Method:             "POST",
		PathPattern:        "/storage/DiskGroupPolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostStorageDiskGroupPoliciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageDiskGroupPoliciesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostStorageDiskGroupPoliciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostStorageDiskGroupPoliciesMoid updates an instance of storage disk group policy
*/
func (a *Client) PostStorageDiskGroupPoliciesMoid(params *PostStorageDiskGroupPoliciesMoidParams) (*PostStorageDiskGroupPoliciesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageDiskGroupPoliciesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostStorageDiskGroupPoliciesMoid",
		Method:             "POST",
		PathPattern:        "/storage/DiskGroupPolicies/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostStorageDiskGroupPoliciesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageDiskGroupPoliciesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostStorageDiskGroupPoliciesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
