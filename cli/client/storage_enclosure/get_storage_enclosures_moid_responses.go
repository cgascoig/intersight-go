// Code generated by go-swagger; DO NOT EDIT.

package storage_enclosure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetStorageEnclosuresMoidReader is a Reader for the GetStorageEnclosuresMoid structure.
type GetStorageEnclosuresMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetStorageEnclosuresMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetStorageEnclosuresMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetStorageEnclosuresMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetStorageEnclosuresMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetStorageEnclosuresMoidOK creates a GetStorageEnclosuresMoidOK with default headers values
func NewGetStorageEnclosuresMoidOK() *GetStorageEnclosuresMoidOK {
	return &GetStorageEnclosuresMoidOK{}
}

/*GetStorageEnclosuresMoidOK handles this case with default header values.

An instance of storageEnclosure
*/
type GetStorageEnclosuresMoidOK struct {
	Payload *models.StorageEnclosure
}

func (o *GetStorageEnclosuresMoidOK) Error() string {
	return fmt.Sprintf("[GET /storage/Enclosures/{moid}][%d] getStorageEnclosuresMoidOK  %+v", 200, o.Payload)
}

func (o *GetStorageEnclosuresMoidOK) GetPayload() *models.StorageEnclosure {
	return o.Payload
}

func (o *GetStorageEnclosuresMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StorageEnclosure)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStorageEnclosuresMoidNotFound creates a GetStorageEnclosuresMoidNotFound with default headers values
func NewGetStorageEnclosuresMoidNotFound() *GetStorageEnclosuresMoidNotFound {
	return &GetStorageEnclosuresMoidNotFound{}
}

/*GetStorageEnclosuresMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetStorageEnclosuresMoidNotFound struct {
}

func (o *GetStorageEnclosuresMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /storage/Enclosures/{moid}][%d] getStorageEnclosuresMoidNotFound ", 404)
}

func (o *GetStorageEnclosuresMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetStorageEnclosuresMoidDefault creates a GetStorageEnclosuresMoidDefault with default headers values
func NewGetStorageEnclosuresMoidDefault(code int) *GetStorageEnclosuresMoidDefault {
	return &GetStorageEnclosuresMoidDefault{
		_statusCode: code,
	}
}

/*GetStorageEnclosuresMoidDefault handles this case with default header values.

Unexpected error
*/
type GetStorageEnclosuresMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get storage enclosures moid default response
func (o *GetStorageEnclosuresMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetStorageEnclosuresMoidDefault) Error() string {
	return fmt.Sprintf("[GET /storage/Enclosures/{moid}][%d] GetStorageEnclosuresMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetStorageEnclosuresMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetStorageEnclosuresMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
