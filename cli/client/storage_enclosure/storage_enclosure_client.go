// Code generated by go-swagger; DO NOT EDIT.

package storage_enclosure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new storage enclosure API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for storage enclosure API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetStorageEnclosures gets a list of storage enclosure instances
*/
func (a *Client) GetStorageEnclosures(params *GetStorageEnclosuresParams) (*GetStorageEnclosuresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageEnclosuresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStorageEnclosures",
		Method:             "GET",
		PathPattern:        "/storage/Enclosures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStorageEnclosuresReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageEnclosuresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStorageEnclosuresDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetStorageEnclosuresMoid gets a specific instance of storage enclosure
*/
func (a *Client) GetStorageEnclosuresMoid(params *GetStorageEnclosuresMoidParams) (*GetStorageEnclosuresMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageEnclosuresMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStorageEnclosuresMoid",
		Method:             "GET",
		PathPattern:        "/storage/Enclosures/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStorageEnclosuresMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageEnclosuresMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStorageEnclosuresMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchStorageEnclosuresMoid updates an instance of storage enclosure
*/
func (a *Client) PatchStorageEnclosuresMoid(params *PatchStorageEnclosuresMoidParams) (*PatchStorageEnclosuresMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchStorageEnclosuresMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchStorageEnclosuresMoid",
		Method:             "PATCH",
		PathPattern:        "/storage/Enclosures/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchStorageEnclosuresMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchStorageEnclosuresMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchStorageEnclosuresMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostStorageEnclosuresMoid updates an instance of storage enclosure
*/
func (a *Client) PostStorageEnclosuresMoid(params *PostStorageEnclosuresMoidParams) (*PostStorageEnclosuresMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageEnclosuresMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostStorageEnclosuresMoid",
		Method:             "POST",
		PathPattern:        "/storage/Enclosures/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostStorageEnclosuresMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageEnclosuresMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostStorageEnclosuresMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
