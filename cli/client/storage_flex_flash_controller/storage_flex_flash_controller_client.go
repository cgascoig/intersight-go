// Code generated by go-swagger; DO NOT EDIT.

package storage_flex_flash_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new storage flex flash controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for storage flex flash controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetStorageFlexFlashControllers gets a list of storage flex flash controller instances
*/
func (a *Client) GetStorageFlexFlashControllers(params *GetStorageFlexFlashControllersParams) (*GetStorageFlexFlashControllersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageFlexFlashControllersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStorageFlexFlashControllers",
		Method:             "GET",
		PathPattern:        "/storage/FlexFlashControllers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStorageFlexFlashControllersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageFlexFlashControllersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStorageFlexFlashControllersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetStorageFlexFlashControllersMoid gets a specific instance of storage flex flash controller
*/
func (a *Client) GetStorageFlexFlashControllersMoid(params *GetStorageFlexFlashControllersMoidParams) (*GetStorageFlexFlashControllersMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageFlexFlashControllersMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStorageFlexFlashControllersMoid",
		Method:             "GET",
		PathPattern:        "/storage/FlexFlashControllers/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStorageFlexFlashControllersMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageFlexFlashControllersMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStorageFlexFlashControllersMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchStorageFlexFlashControllersMoid updates an instance of storage flex flash controller
*/
func (a *Client) PatchStorageFlexFlashControllersMoid(params *PatchStorageFlexFlashControllersMoidParams) (*PatchStorageFlexFlashControllersMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchStorageFlexFlashControllersMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchStorageFlexFlashControllersMoid",
		Method:             "PATCH",
		PathPattern:        "/storage/FlexFlashControllers/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchStorageFlexFlashControllersMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchStorageFlexFlashControllersMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchStorageFlexFlashControllersMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostStorageFlexFlashControllersMoid updates an instance of storage flex flash controller
*/
func (a *Client) PostStorageFlexFlashControllersMoid(params *PostStorageFlexFlashControllersMoidParams) (*PostStorageFlexFlashControllersMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageFlexFlashControllersMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostStorageFlexFlashControllersMoid",
		Method:             "POST",
		PathPattern:        "/storage/FlexFlashControllers/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostStorageFlexFlashControllersMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageFlexFlashControllersMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostStorageFlexFlashControllersMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
