// Code generated by go-swagger; DO NOT EDIT.

package storage_flex_flash_controller_props

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new storage flex flash controller props API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for storage flex flash controller props API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetStorageFlexFlashControllerProps gets a list of storage flex flash controller props instances
*/
func (a *Client) GetStorageFlexFlashControllerProps(params *GetStorageFlexFlashControllerPropsParams) (*GetStorageFlexFlashControllerPropsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageFlexFlashControllerPropsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStorageFlexFlashControllerProps",
		Method:             "GET",
		PathPattern:        "/storage/FlexFlashControllerProps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStorageFlexFlashControllerPropsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageFlexFlashControllerPropsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStorageFlexFlashControllerPropsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetStorageFlexFlashControllerPropsMoid gets a specific instance of storage flex flash controller props
*/
func (a *Client) GetStorageFlexFlashControllerPropsMoid(params *GetStorageFlexFlashControllerPropsMoidParams) (*GetStorageFlexFlashControllerPropsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageFlexFlashControllerPropsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStorageFlexFlashControllerPropsMoid",
		Method:             "GET",
		PathPattern:        "/storage/FlexFlashControllerProps/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStorageFlexFlashControllerPropsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageFlexFlashControllerPropsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStorageFlexFlashControllerPropsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchStorageFlexFlashControllerPropsMoid updates an instance of storage flex flash controller props
*/
func (a *Client) PatchStorageFlexFlashControllerPropsMoid(params *PatchStorageFlexFlashControllerPropsMoidParams) (*PatchStorageFlexFlashControllerPropsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchStorageFlexFlashControllerPropsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchStorageFlexFlashControllerPropsMoid",
		Method:             "PATCH",
		PathPattern:        "/storage/FlexFlashControllerProps/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchStorageFlexFlashControllerPropsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchStorageFlexFlashControllerPropsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchStorageFlexFlashControllerPropsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostStorageFlexFlashControllerPropsMoid updates an instance of storage flex flash controller props
*/
func (a *Client) PostStorageFlexFlashControllerPropsMoid(params *PostStorageFlexFlashControllerPropsMoidParams) (*PostStorageFlexFlashControllerPropsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageFlexFlashControllerPropsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostStorageFlexFlashControllerPropsMoid",
		Method:             "POST",
		PathPattern:        "/storage/FlexFlashControllerProps/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostStorageFlexFlashControllerPropsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageFlexFlashControllerPropsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostStorageFlexFlashControllerPropsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
