// Code generated by go-swagger; DO NOT EDIT.

package storage_flex_flash_physical_drive

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new storage flex flash physical drive API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for storage flex flash physical drive API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetStorageFlexFlashPhysicalDrives gets a list of storage flex flash physical drive instances
*/
func (a *Client) GetStorageFlexFlashPhysicalDrives(params *GetStorageFlexFlashPhysicalDrivesParams) (*GetStorageFlexFlashPhysicalDrivesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageFlexFlashPhysicalDrivesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStorageFlexFlashPhysicalDrives",
		Method:             "GET",
		PathPattern:        "/storage/FlexFlashPhysicalDrives",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStorageFlexFlashPhysicalDrivesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageFlexFlashPhysicalDrivesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStorageFlexFlashPhysicalDrivesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetStorageFlexFlashPhysicalDrivesMoid gets a specific instance of storage flex flash physical drive
*/
func (a *Client) GetStorageFlexFlashPhysicalDrivesMoid(params *GetStorageFlexFlashPhysicalDrivesMoidParams) (*GetStorageFlexFlashPhysicalDrivesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageFlexFlashPhysicalDrivesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStorageFlexFlashPhysicalDrivesMoid",
		Method:             "GET",
		PathPattern:        "/storage/FlexFlashPhysicalDrives/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStorageFlexFlashPhysicalDrivesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageFlexFlashPhysicalDrivesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStorageFlexFlashPhysicalDrivesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchStorageFlexFlashPhysicalDrivesMoid updates an instance of storage flex flash physical drive
*/
func (a *Client) PatchStorageFlexFlashPhysicalDrivesMoid(params *PatchStorageFlexFlashPhysicalDrivesMoidParams) (*PatchStorageFlexFlashPhysicalDrivesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchStorageFlexFlashPhysicalDrivesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchStorageFlexFlashPhysicalDrivesMoid",
		Method:             "PATCH",
		PathPattern:        "/storage/FlexFlashPhysicalDrives/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchStorageFlexFlashPhysicalDrivesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchStorageFlexFlashPhysicalDrivesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchStorageFlexFlashPhysicalDrivesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostStorageFlexFlashPhysicalDrivesMoid updates an instance of storage flex flash physical drive
*/
func (a *Client) PostStorageFlexFlashPhysicalDrivesMoid(params *PostStorageFlexFlashPhysicalDrivesMoidParams) (*PostStorageFlexFlashPhysicalDrivesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageFlexFlashPhysicalDrivesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostStorageFlexFlashPhysicalDrivesMoid",
		Method:             "POST",
		PathPattern:        "/storage/FlexFlashPhysicalDrives/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostStorageFlexFlashPhysicalDrivesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageFlexFlashPhysicalDrivesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostStorageFlexFlashPhysicalDrivesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
