// Code generated by go-swagger; DO NOT EDIT.

package storage_flex_flash_virtual_drive

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new storage flex flash virtual drive API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for storage flex flash virtual drive API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetStorageFlexFlashVirtualDrives gets a list of storage flex flash virtual drive instances
*/
func (a *Client) GetStorageFlexFlashVirtualDrives(params *GetStorageFlexFlashVirtualDrivesParams) (*GetStorageFlexFlashVirtualDrivesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageFlexFlashVirtualDrivesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStorageFlexFlashVirtualDrives",
		Method:             "GET",
		PathPattern:        "/storage/FlexFlashVirtualDrives",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStorageFlexFlashVirtualDrivesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageFlexFlashVirtualDrivesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStorageFlexFlashVirtualDrivesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetStorageFlexFlashVirtualDrivesMoid gets a specific instance of storage flex flash virtual drive
*/
func (a *Client) GetStorageFlexFlashVirtualDrivesMoid(params *GetStorageFlexFlashVirtualDrivesMoidParams) (*GetStorageFlexFlashVirtualDrivesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageFlexFlashVirtualDrivesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStorageFlexFlashVirtualDrivesMoid",
		Method:             "GET",
		PathPattern:        "/storage/FlexFlashVirtualDrives/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStorageFlexFlashVirtualDrivesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageFlexFlashVirtualDrivesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStorageFlexFlashVirtualDrivesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchStorageFlexFlashVirtualDrivesMoid updates an instance of storage flex flash virtual drive
*/
func (a *Client) PatchStorageFlexFlashVirtualDrivesMoid(params *PatchStorageFlexFlashVirtualDrivesMoidParams) (*PatchStorageFlexFlashVirtualDrivesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchStorageFlexFlashVirtualDrivesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchStorageFlexFlashVirtualDrivesMoid",
		Method:             "PATCH",
		PathPattern:        "/storage/FlexFlashVirtualDrives/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchStorageFlexFlashVirtualDrivesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchStorageFlexFlashVirtualDrivesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchStorageFlexFlashVirtualDrivesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostStorageFlexFlashVirtualDrivesMoid updates an instance of storage flex flash virtual drive
*/
func (a *Client) PostStorageFlexFlashVirtualDrivesMoid(params *PostStorageFlexFlashVirtualDrivesMoidParams) (*PostStorageFlexFlashVirtualDrivesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageFlexFlashVirtualDrivesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostStorageFlexFlashVirtualDrivesMoid",
		Method:             "POST",
		PathPattern:        "/storage/FlexFlashVirtualDrives/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostStorageFlexFlashVirtualDrivesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageFlexFlashVirtualDrivesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostStorageFlexFlashVirtualDrivesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
