// Code generated by go-swagger; DO NOT EDIT.

package storage_flex_util_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new storage flex util controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for storage flex util controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetStorageFlexUtilControllers gets a list of storage flex util controller instances
*/
func (a *Client) GetStorageFlexUtilControllers(params *GetStorageFlexUtilControllersParams) (*GetStorageFlexUtilControllersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageFlexUtilControllersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStorageFlexUtilControllers",
		Method:             "GET",
		PathPattern:        "/storage/FlexUtilControllers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStorageFlexUtilControllersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageFlexUtilControllersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStorageFlexUtilControllersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetStorageFlexUtilControllersMoid gets a specific instance of storage flex util controller
*/
func (a *Client) GetStorageFlexUtilControllersMoid(params *GetStorageFlexUtilControllersMoidParams) (*GetStorageFlexUtilControllersMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageFlexUtilControllersMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStorageFlexUtilControllersMoid",
		Method:             "GET",
		PathPattern:        "/storage/FlexUtilControllers/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStorageFlexUtilControllersMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageFlexUtilControllersMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStorageFlexUtilControllersMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchStorageFlexUtilControllersMoid updates an instance of storage flex util controller
*/
func (a *Client) PatchStorageFlexUtilControllersMoid(params *PatchStorageFlexUtilControllersMoidParams) (*PatchStorageFlexUtilControllersMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchStorageFlexUtilControllersMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchStorageFlexUtilControllersMoid",
		Method:             "PATCH",
		PathPattern:        "/storage/FlexUtilControllers/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchStorageFlexUtilControllersMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchStorageFlexUtilControllersMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchStorageFlexUtilControllersMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostStorageFlexUtilControllersMoid updates an instance of storage flex util controller
*/
func (a *Client) PostStorageFlexUtilControllersMoid(params *PostStorageFlexUtilControllersMoidParams) (*PostStorageFlexUtilControllersMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageFlexUtilControllersMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostStorageFlexUtilControllersMoid",
		Method:             "POST",
		PathPattern:        "/storage/FlexUtilControllers/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostStorageFlexUtilControllersMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageFlexUtilControllersMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostStorageFlexUtilControllersMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
