// Code generated by go-swagger; DO NOT EDIT.

package storage_flex_util_physical_drive

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new storage flex util physical drive API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for storage flex util physical drive API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetStorageFlexUtilPhysicalDrives gets a list of storage flex util physical drive instances
*/
func (a *Client) GetStorageFlexUtilPhysicalDrives(params *GetStorageFlexUtilPhysicalDrivesParams) (*GetStorageFlexUtilPhysicalDrivesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageFlexUtilPhysicalDrivesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStorageFlexUtilPhysicalDrives",
		Method:             "GET",
		PathPattern:        "/storage/FlexUtilPhysicalDrives",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStorageFlexUtilPhysicalDrivesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageFlexUtilPhysicalDrivesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStorageFlexUtilPhysicalDrivesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetStorageFlexUtilPhysicalDrivesMoid gets a specific instance of storage flex util physical drive
*/
func (a *Client) GetStorageFlexUtilPhysicalDrivesMoid(params *GetStorageFlexUtilPhysicalDrivesMoidParams) (*GetStorageFlexUtilPhysicalDrivesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageFlexUtilPhysicalDrivesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStorageFlexUtilPhysicalDrivesMoid",
		Method:             "GET",
		PathPattern:        "/storage/FlexUtilPhysicalDrives/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStorageFlexUtilPhysicalDrivesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageFlexUtilPhysicalDrivesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStorageFlexUtilPhysicalDrivesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchStorageFlexUtilPhysicalDrivesMoid updates an instance of storage flex util physical drive
*/
func (a *Client) PatchStorageFlexUtilPhysicalDrivesMoid(params *PatchStorageFlexUtilPhysicalDrivesMoidParams) (*PatchStorageFlexUtilPhysicalDrivesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchStorageFlexUtilPhysicalDrivesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchStorageFlexUtilPhysicalDrivesMoid",
		Method:             "PATCH",
		PathPattern:        "/storage/FlexUtilPhysicalDrives/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchStorageFlexUtilPhysicalDrivesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchStorageFlexUtilPhysicalDrivesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchStorageFlexUtilPhysicalDrivesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostStorageFlexUtilPhysicalDrivesMoid updates an instance of storage flex util physical drive
*/
func (a *Client) PostStorageFlexUtilPhysicalDrivesMoid(params *PostStorageFlexUtilPhysicalDrivesMoidParams) (*PostStorageFlexUtilPhysicalDrivesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageFlexUtilPhysicalDrivesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostStorageFlexUtilPhysicalDrivesMoid",
		Method:             "POST",
		PathPattern:        "/storage/FlexUtilPhysicalDrives/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostStorageFlexUtilPhysicalDrivesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageFlexUtilPhysicalDrivesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostStorageFlexUtilPhysicalDrivesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
