// Code generated by go-swagger; DO NOT EDIT.

package storage_physical_disk

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new storage physical disk API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for storage physical disk API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetStoragePhysicalDisks gets a list of storage physical disk instances
*/
func (a *Client) GetStoragePhysicalDisks(params *GetStoragePhysicalDisksParams) (*GetStoragePhysicalDisksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStoragePhysicalDisksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStoragePhysicalDisks",
		Method:             "GET",
		PathPattern:        "/storage/PhysicalDisks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStoragePhysicalDisksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStoragePhysicalDisksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStoragePhysicalDisksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetStoragePhysicalDisksMoid gets a specific instance of storage physical disk
*/
func (a *Client) GetStoragePhysicalDisksMoid(params *GetStoragePhysicalDisksMoidParams) (*GetStoragePhysicalDisksMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStoragePhysicalDisksMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStoragePhysicalDisksMoid",
		Method:             "GET",
		PathPattern:        "/storage/PhysicalDisks/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStoragePhysicalDisksMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStoragePhysicalDisksMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStoragePhysicalDisksMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchStoragePhysicalDisksMoid updates an instance of storage physical disk
*/
func (a *Client) PatchStoragePhysicalDisksMoid(params *PatchStoragePhysicalDisksMoidParams) (*PatchStoragePhysicalDisksMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchStoragePhysicalDisksMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchStoragePhysicalDisksMoid",
		Method:             "PATCH",
		PathPattern:        "/storage/PhysicalDisks/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchStoragePhysicalDisksMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchStoragePhysicalDisksMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchStoragePhysicalDisksMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostStoragePhysicalDisksMoid updates an instance of storage physical disk
*/
func (a *Client) PostStoragePhysicalDisksMoid(params *PostStoragePhysicalDisksMoidParams) (*PostStoragePhysicalDisksMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStoragePhysicalDisksMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostStoragePhysicalDisksMoid",
		Method:             "POST",
		PathPattern:        "/storage/PhysicalDisks/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostStoragePhysicalDisksMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStoragePhysicalDisksMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostStoragePhysicalDisksMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
