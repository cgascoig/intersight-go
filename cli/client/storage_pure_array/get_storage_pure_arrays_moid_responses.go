// Code generated by go-swagger; DO NOT EDIT.

package storage_pure_array

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetStoragePureArraysMoidReader is a Reader for the GetStoragePureArraysMoid structure.
type GetStoragePureArraysMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetStoragePureArraysMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetStoragePureArraysMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetStoragePureArraysMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetStoragePureArraysMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetStoragePureArraysMoidOK creates a GetStoragePureArraysMoidOK with default headers values
func NewGetStoragePureArraysMoidOK() *GetStoragePureArraysMoidOK {
	return &GetStoragePureArraysMoidOK{}
}

/*GetStoragePureArraysMoidOK handles this case with default header values.

An instance of storagePureArray
*/
type GetStoragePureArraysMoidOK struct {
	Payload *models.StoragePureArray
}

func (o *GetStoragePureArraysMoidOK) Error() string {
	return fmt.Sprintf("[GET /storage/PureArrays/{moid}][%d] getStoragePureArraysMoidOK  %+v", 200, o.Payload)
}

func (o *GetStoragePureArraysMoidOK) GetPayload() *models.StoragePureArray {
	return o.Payload
}

func (o *GetStoragePureArraysMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StoragePureArray)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStoragePureArraysMoidNotFound creates a GetStoragePureArraysMoidNotFound with default headers values
func NewGetStoragePureArraysMoidNotFound() *GetStoragePureArraysMoidNotFound {
	return &GetStoragePureArraysMoidNotFound{}
}

/*GetStoragePureArraysMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetStoragePureArraysMoidNotFound struct {
}

func (o *GetStoragePureArraysMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /storage/PureArrays/{moid}][%d] getStoragePureArraysMoidNotFound ", 404)
}

func (o *GetStoragePureArraysMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetStoragePureArraysMoidDefault creates a GetStoragePureArraysMoidDefault with default headers values
func NewGetStoragePureArraysMoidDefault(code int) *GetStoragePureArraysMoidDefault {
	return &GetStoragePureArraysMoidDefault{
		_statusCode: code,
	}
}

/*GetStoragePureArraysMoidDefault handles this case with default header values.

Unexpected error
*/
type GetStoragePureArraysMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get storage pure arrays moid default response
func (o *GetStoragePureArraysMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetStoragePureArraysMoidDefault) Error() string {
	return fmt.Sprintf("[GET /storage/PureArrays/{moid}][%d] GetStoragePureArraysMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetStoragePureArraysMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetStoragePureArraysMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
