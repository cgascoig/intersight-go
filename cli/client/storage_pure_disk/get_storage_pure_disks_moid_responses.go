// Code generated by go-swagger; DO NOT EDIT.

package storage_pure_disk

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetStoragePureDisksMoidReader is a Reader for the GetStoragePureDisksMoid structure.
type GetStoragePureDisksMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetStoragePureDisksMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetStoragePureDisksMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetStoragePureDisksMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetStoragePureDisksMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetStoragePureDisksMoidOK creates a GetStoragePureDisksMoidOK with default headers values
func NewGetStoragePureDisksMoidOK() *GetStoragePureDisksMoidOK {
	return &GetStoragePureDisksMoidOK{}
}

/*GetStoragePureDisksMoidOK handles this case with default header values.

An instance of storagePureDisk
*/
type GetStoragePureDisksMoidOK struct {
	Payload *models.StoragePureDisk
}

func (o *GetStoragePureDisksMoidOK) Error() string {
	return fmt.Sprintf("[GET /storage/PureDisks/{moid}][%d] getStoragePureDisksMoidOK  %+v", 200, o.Payload)
}

func (o *GetStoragePureDisksMoidOK) GetPayload() *models.StoragePureDisk {
	return o.Payload
}

func (o *GetStoragePureDisksMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StoragePureDisk)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStoragePureDisksMoidNotFound creates a GetStoragePureDisksMoidNotFound with default headers values
func NewGetStoragePureDisksMoidNotFound() *GetStoragePureDisksMoidNotFound {
	return &GetStoragePureDisksMoidNotFound{}
}

/*GetStoragePureDisksMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetStoragePureDisksMoidNotFound struct {
}

func (o *GetStoragePureDisksMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /storage/PureDisks/{moid}][%d] getStoragePureDisksMoidNotFound ", 404)
}

func (o *GetStoragePureDisksMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetStoragePureDisksMoidDefault creates a GetStoragePureDisksMoidDefault with default headers values
func NewGetStoragePureDisksMoidDefault(code int) *GetStoragePureDisksMoidDefault {
	return &GetStoragePureDisksMoidDefault{
		_statusCode: code,
	}
}

/*GetStoragePureDisksMoidDefault handles this case with default header values.

Unexpected error
*/
type GetStoragePureDisksMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get storage pure disks moid default response
func (o *GetStoragePureDisksMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetStoragePureDisksMoidDefault) Error() string {
	return fmt.Sprintf("[GET /storage/PureDisks/{moid}][%d] GetStoragePureDisksMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetStoragePureDisksMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetStoragePureDisksMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
