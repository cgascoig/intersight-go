// Code generated by go-swagger; DO NOT EDIT.

package storage_pure_host

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetStoragePureHostsMoidReader is a Reader for the GetStoragePureHostsMoid structure.
type GetStoragePureHostsMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetStoragePureHostsMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetStoragePureHostsMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetStoragePureHostsMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetStoragePureHostsMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetStoragePureHostsMoidOK creates a GetStoragePureHostsMoidOK with default headers values
func NewGetStoragePureHostsMoidOK() *GetStoragePureHostsMoidOK {
	return &GetStoragePureHostsMoidOK{}
}

/*GetStoragePureHostsMoidOK handles this case with default header values.

An instance of storagePureHost
*/
type GetStoragePureHostsMoidOK struct {
	Payload *models.StoragePureHost
}

func (o *GetStoragePureHostsMoidOK) Error() string {
	return fmt.Sprintf("[GET /storage/PureHosts/{moid}][%d] getStoragePureHostsMoidOK  %+v", 200, o.Payload)
}

func (o *GetStoragePureHostsMoidOK) GetPayload() *models.StoragePureHost {
	return o.Payload
}

func (o *GetStoragePureHostsMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StoragePureHost)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStoragePureHostsMoidNotFound creates a GetStoragePureHostsMoidNotFound with default headers values
func NewGetStoragePureHostsMoidNotFound() *GetStoragePureHostsMoidNotFound {
	return &GetStoragePureHostsMoidNotFound{}
}

/*GetStoragePureHostsMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetStoragePureHostsMoidNotFound struct {
}

func (o *GetStoragePureHostsMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /storage/PureHosts/{moid}][%d] getStoragePureHostsMoidNotFound ", 404)
}

func (o *GetStoragePureHostsMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetStoragePureHostsMoidDefault creates a GetStoragePureHostsMoidDefault with default headers values
func NewGetStoragePureHostsMoidDefault(code int) *GetStoragePureHostsMoidDefault {
	return &GetStoragePureHostsMoidDefault{
		_statusCode: code,
	}
}

/*GetStoragePureHostsMoidDefault handles this case with default header values.

Unexpected error
*/
type GetStoragePureHostsMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get storage pure hosts moid default response
func (o *GetStoragePureHostsMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetStoragePureHostsMoidDefault) Error() string {
	return fmt.Sprintf("[GET /storage/PureHosts/{moid}][%d] GetStoragePureHostsMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetStoragePureHostsMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetStoragePureHostsMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
