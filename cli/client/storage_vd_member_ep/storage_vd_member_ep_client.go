// Code generated by go-swagger; DO NOT EDIT.

package storage_vd_member_ep

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new storage vd member ep API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for storage vd member ep API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetStorageVdMemberEps gets a list of storage vd member ep instances
*/
func (a *Client) GetStorageVdMemberEps(params *GetStorageVdMemberEpsParams) (*GetStorageVdMemberEpsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageVdMemberEpsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStorageVdMemberEps",
		Method:             "GET",
		PathPattern:        "/storage/VdMemberEps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStorageVdMemberEpsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageVdMemberEpsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStorageVdMemberEpsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetStorageVdMemberEpsMoid gets a specific instance of storage vd member ep
*/
func (a *Client) GetStorageVdMemberEpsMoid(params *GetStorageVdMemberEpsMoidParams) (*GetStorageVdMemberEpsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageVdMemberEpsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStorageVdMemberEpsMoid",
		Method:             "GET",
		PathPattern:        "/storage/VdMemberEps/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStorageVdMemberEpsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageVdMemberEpsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStorageVdMemberEpsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchStorageVdMemberEpsMoid updates an instance of storage vd member ep
*/
func (a *Client) PatchStorageVdMemberEpsMoid(params *PatchStorageVdMemberEpsMoidParams) (*PatchStorageVdMemberEpsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchStorageVdMemberEpsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchStorageVdMemberEpsMoid",
		Method:             "PATCH",
		PathPattern:        "/storage/VdMemberEps/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchStorageVdMemberEpsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchStorageVdMemberEpsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchStorageVdMemberEpsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostStorageVdMemberEpsMoid updates an instance of storage vd member ep
*/
func (a *Client) PostStorageVdMemberEpsMoid(params *PostStorageVdMemberEpsMoidParams) (*PostStorageVdMemberEpsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageVdMemberEpsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostStorageVdMemberEpsMoid",
		Method:             "POST",
		PathPattern:        "/storage/VdMemberEps/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostStorageVdMemberEpsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageVdMemberEpsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostStorageVdMemberEpsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
