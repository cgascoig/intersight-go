// Code generated by go-swagger; DO NOT EDIT.

package storage_virtual_drive

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new storage virtual drive API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for storage virtual drive API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetStorageVirtualDrives gets a list of storage virtual drive instances
*/
func (a *Client) GetStorageVirtualDrives(params *GetStorageVirtualDrivesParams) (*GetStorageVirtualDrivesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageVirtualDrivesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStorageVirtualDrives",
		Method:             "GET",
		PathPattern:        "/storage/VirtualDrives",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStorageVirtualDrivesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageVirtualDrivesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStorageVirtualDrivesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetStorageVirtualDrivesMoid gets a specific instance of storage virtual drive
*/
func (a *Client) GetStorageVirtualDrivesMoid(params *GetStorageVirtualDrivesMoidParams) (*GetStorageVirtualDrivesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageVirtualDrivesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStorageVirtualDrivesMoid",
		Method:             "GET",
		PathPattern:        "/storage/VirtualDrives/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStorageVirtualDrivesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageVirtualDrivesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStorageVirtualDrivesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchStorageVirtualDrivesMoid updates an instance of storage virtual drive
*/
func (a *Client) PatchStorageVirtualDrivesMoid(params *PatchStorageVirtualDrivesMoidParams) (*PatchStorageVirtualDrivesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchStorageVirtualDrivesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchStorageVirtualDrivesMoid",
		Method:             "PATCH",
		PathPattern:        "/storage/VirtualDrives/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchStorageVirtualDrivesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchStorageVirtualDrivesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchStorageVirtualDrivesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostStorageVirtualDrivesMoid updates an instance of storage virtual drive
*/
func (a *Client) PostStorageVirtualDrivesMoid(params *PostStorageVirtualDrivesMoidParams) (*PostStorageVirtualDrivesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStorageVirtualDrivesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostStorageVirtualDrivesMoid",
		Method:             "POST",
		PathPattern:        "/storage/VirtualDrives/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostStorageVirtualDrivesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStorageVirtualDrivesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostStorageVirtualDrivesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
