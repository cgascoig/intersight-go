// Code generated by go-swagger; DO NOT EDIT.

package tam_advisory_instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// DeleteTamAdvisoryInstancesMoidReader is a Reader for the DeleteTamAdvisoryInstancesMoid structure.
type DeleteTamAdvisoryInstancesMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteTamAdvisoryInstancesMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteTamAdvisoryInstancesMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteTamAdvisoryInstancesMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteTamAdvisoryInstancesMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteTamAdvisoryInstancesMoidOK creates a DeleteTamAdvisoryInstancesMoidOK with default headers values
func NewDeleteTamAdvisoryInstancesMoidOK() *DeleteTamAdvisoryInstancesMoidOK {
	return &DeleteTamAdvisoryInstancesMoidOK{}
}

/*DeleteTamAdvisoryInstancesMoidOK handles this case with default header values.

Delete successful.
*/
type DeleteTamAdvisoryInstancesMoidOK struct {
}

func (o *DeleteTamAdvisoryInstancesMoidOK) Error() string {
	return fmt.Sprintf("[DELETE /tam/AdvisoryInstances/{moid}][%d] deleteTamAdvisoryInstancesMoidOK ", 200)
}

func (o *DeleteTamAdvisoryInstancesMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteTamAdvisoryInstancesMoidNotFound creates a DeleteTamAdvisoryInstancesMoidNotFound with default headers values
func NewDeleteTamAdvisoryInstancesMoidNotFound() *DeleteTamAdvisoryInstancesMoidNotFound {
	return &DeleteTamAdvisoryInstancesMoidNotFound{}
}

/*DeleteTamAdvisoryInstancesMoidNotFound handles this case with default header values.

Instance not found.
*/
type DeleteTamAdvisoryInstancesMoidNotFound struct {
}

func (o *DeleteTamAdvisoryInstancesMoidNotFound) Error() string {
	return fmt.Sprintf("[DELETE /tam/AdvisoryInstances/{moid}][%d] deleteTamAdvisoryInstancesMoidNotFound ", 404)
}

func (o *DeleteTamAdvisoryInstancesMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteTamAdvisoryInstancesMoidDefault creates a DeleteTamAdvisoryInstancesMoidDefault with default headers values
func NewDeleteTamAdvisoryInstancesMoidDefault(code int) *DeleteTamAdvisoryInstancesMoidDefault {
	return &DeleteTamAdvisoryInstancesMoidDefault{
		_statusCode: code,
	}
}

/*DeleteTamAdvisoryInstancesMoidDefault handles this case with default header values.

Unexpected error
*/
type DeleteTamAdvisoryInstancesMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the delete tam advisory instances moid default response
func (o *DeleteTamAdvisoryInstancesMoidDefault) Code() int {
	return o._statusCode
}

func (o *DeleteTamAdvisoryInstancesMoidDefault) Error() string {
	return fmt.Sprintf("[DELETE /tam/AdvisoryInstances/{moid}][%d] DeleteTamAdvisoryInstancesMoid default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteTamAdvisoryInstancesMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteTamAdvisoryInstancesMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
