// Code generated by go-swagger; DO NOT EDIT.

package tam_advisory_instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new tam advisory instance API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tam advisory instance API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteTamAdvisoryInstancesMoid deletes an instance of tam advisory instance
*/
func (a *Client) DeleteTamAdvisoryInstancesMoid(params *DeleteTamAdvisoryInstancesMoidParams) (*DeleteTamAdvisoryInstancesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTamAdvisoryInstancesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteTamAdvisoryInstancesMoid",
		Method:             "DELETE",
		PathPattern:        "/tam/AdvisoryInstances/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTamAdvisoryInstancesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTamAdvisoryInstancesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteTamAdvisoryInstancesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTamAdvisoryInstances gets a list of tam advisory instance instances
*/
func (a *Client) GetTamAdvisoryInstances(params *GetTamAdvisoryInstancesParams) (*GetTamAdvisoryInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTamAdvisoryInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTamAdvisoryInstances",
		Method:             "GET",
		PathPattern:        "/tam/AdvisoryInstances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTamAdvisoryInstancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTamAdvisoryInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTamAdvisoryInstancesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTamAdvisoryInstancesMoid gets a specific instance of tam advisory instance
*/
func (a *Client) GetTamAdvisoryInstancesMoid(params *GetTamAdvisoryInstancesMoidParams) (*GetTamAdvisoryInstancesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTamAdvisoryInstancesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTamAdvisoryInstancesMoid",
		Method:             "GET",
		PathPattern:        "/tam/AdvisoryInstances/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTamAdvisoryInstancesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTamAdvisoryInstancesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTamAdvisoryInstancesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchTamAdvisoryInstancesMoid updates an instance of tam advisory instance
*/
func (a *Client) PatchTamAdvisoryInstancesMoid(params *PatchTamAdvisoryInstancesMoidParams) (*PatchTamAdvisoryInstancesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchTamAdvisoryInstancesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchTamAdvisoryInstancesMoid",
		Method:             "PATCH",
		PathPattern:        "/tam/AdvisoryInstances/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchTamAdvisoryInstancesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchTamAdvisoryInstancesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchTamAdvisoryInstancesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostTamAdvisoryInstances creates an instance of tam advisory instance
*/
func (a *Client) PostTamAdvisoryInstances(params *PostTamAdvisoryInstancesParams) (*PostTamAdvisoryInstancesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTamAdvisoryInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTamAdvisoryInstances",
		Method:             "POST",
		PathPattern:        "/tam/AdvisoryInstances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTamAdvisoryInstancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTamAdvisoryInstancesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostTamAdvisoryInstancesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostTamAdvisoryInstancesMoid updates an instance of tam advisory instance
*/
func (a *Client) PostTamAdvisoryInstancesMoid(params *PostTamAdvisoryInstancesMoidParams) (*PostTamAdvisoryInstancesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTamAdvisoryInstancesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTamAdvisoryInstancesMoid",
		Method:             "POST",
		PathPattern:        "/tam/AdvisoryInstances/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTamAdvisoryInstancesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTamAdvisoryInstancesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostTamAdvisoryInstancesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
