// Code generated by go-swagger; DO NOT EDIT.

package tam_security_advisory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new tam security advisory API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tam security advisory API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteTamSecurityAdvisoriesMoid deletes an instance of tam security advisory
*/
func (a *Client) DeleteTamSecurityAdvisoriesMoid(params *DeleteTamSecurityAdvisoriesMoidParams) (*DeleteTamSecurityAdvisoriesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTamSecurityAdvisoriesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteTamSecurityAdvisoriesMoid",
		Method:             "DELETE",
		PathPattern:        "/tam/SecurityAdvisories/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTamSecurityAdvisoriesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTamSecurityAdvisoriesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteTamSecurityAdvisoriesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTamSecurityAdvisories gets a list of tam security advisory instances
*/
func (a *Client) GetTamSecurityAdvisories(params *GetTamSecurityAdvisoriesParams) (*GetTamSecurityAdvisoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTamSecurityAdvisoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTamSecurityAdvisories",
		Method:             "GET",
		PathPattern:        "/tam/SecurityAdvisories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTamSecurityAdvisoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTamSecurityAdvisoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTamSecurityAdvisoriesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTamSecurityAdvisoriesMoid gets a specific instance of tam security advisory
*/
func (a *Client) GetTamSecurityAdvisoriesMoid(params *GetTamSecurityAdvisoriesMoidParams) (*GetTamSecurityAdvisoriesMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTamSecurityAdvisoriesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTamSecurityAdvisoriesMoid",
		Method:             "GET",
		PathPattern:        "/tam/SecurityAdvisories/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTamSecurityAdvisoriesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTamSecurityAdvisoriesMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTamSecurityAdvisoriesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchTamSecurityAdvisoriesMoid updates an instance of tam security advisory
*/
func (a *Client) PatchTamSecurityAdvisoriesMoid(params *PatchTamSecurityAdvisoriesMoidParams) (*PatchTamSecurityAdvisoriesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchTamSecurityAdvisoriesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchTamSecurityAdvisoriesMoid",
		Method:             "PATCH",
		PathPattern:        "/tam/SecurityAdvisories/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchTamSecurityAdvisoriesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchTamSecurityAdvisoriesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchTamSecurityAdvisoriesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostTamSecurityAdvisories creates an instance of tam security advisory
*/
func (a *Client) PostTamSecurityAdvisories(params *PostTamSecurityAdvisoriesParams) (*PostTamSecurityAdvisoriesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTamSecurityAdvisoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTamSecurityAdvisories",
		Method:             "POST",
		PathPattern:        "/tam/SecurityAdvisories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTamSecurityAdvisoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTamSecurityAdvisoriesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostTamSecurityAdvisoriesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostTamSecurityAdvisoriesMoid updates an instance of tam security advisory
*/
func (a *Client) PostTamSecurityAdvisoriesMoid(params *PostTamSecurityAdvisoriesMoidParams) (*PostTamSecurityAdvisoriesMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTamSecurityAdvisoriesMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTamSecurityAdvisoriesMoid",
		Method:             "POST",
		PathPattern:        "/tam/SecurityAdvisories/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTamSecurityAdvisoriesMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTamSecurityAdvisoriesMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostTamSecurityAdvisoriesMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
