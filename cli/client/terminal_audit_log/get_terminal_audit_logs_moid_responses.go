// Code generated by go-swagger; DO NOT EDIT.

package terminal_audit_log

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetTerminalAuditLogsMoidReader is a Reader for the GetTerminalAuditLogsMoid structure.
type GetTerminalAuditLogsMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTerminalAuditLogsMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTerminalAuditLogsMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetTerminalAuditLogsMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetTerminalAuditLogsMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetTerminalAuditLogsMoidOK creates a GetTerminalAuditLogsMoidOK with default headers values
func NewGetTerminalAuditLogsMoidOK() *GetTerminalAuditLogsMoidOK {
	return &GetTerminalAuditLogsMoidOK{}
}

/*GetTerminalAuditLogsMoidOK handles this case with default header values.

An instance of terminalAuditLog
*/
type GetTerminalAuditLogsMoidOK struct {
	Payload *models.TerminalAuditLog
}

func (o *GetTerminalAuditLogsMoidOK) Error() string {
	return fmt.Sprintf("[GET /terminal/AuditLogs/{moid}][%d] getTerminalAuditLogsMoidOK  %+v", 200, o.Payload)
}

func (o *GetTerminalAuditLogsMoidOK) GetPayload() *models.TerminalAuditLog {
	return o.Payload
}

func (o *GetTerminalAuditLogsMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TerminalAuditLog)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTerminalAuditLogsMoidNotFound creates a GetTerminalAuditLogsMoidNotFound with default headers values
func NewGetTerminalAuditLogsMoidNotFound() *GetTerminalAuditLogsMoidNotFound {
	return &GetTerminalAuditLogsMoidNotFound{}
}

/*GetTerminalAuditLogsMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetTerminalAuditLogsMoidNotFound struct {
}

func (o *GetTerminalAuditLogsMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /terminal/AuditLogs/{moid}][%d] getTerminalAuditLogsMoidNotFound ", 404)
}

func (o *GetTerminalAuditLogsMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTerminalAuditLogsMoidDefault creates a GetTerminalAuditLogsMoidDefault with default headers values
func NewGetTerminalAuditLogsMoidDefault(code int) *GetTerminalAuditLogsMoidDefault {
	return &GetTerminalAuditLogsMoidDefault{
		_statusCode: code,
	}
}

/*GetTerminalAuditLogsMoidDefault handles this case with default header values.

Unexpected error
*/
type GetTerminalAuditLogsMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get terminal audit logs moid default response
func (o *GetTerminalAuditLogsMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetTerminalAuditLogsMoidDefault) Error() string {
	return fmt.Sprintf("[GET /terminal/AuditLogs/{moid}][%d] GetTerminalAuditLogsMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetTerminalAuditLogsMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetTerminalAuditLogsMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
