// Code generated by go-swagger; DO NOT EDIT.

package terminal_audit_log

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new terminal audit log API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for terminal audit log API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetTerminalAuditLogs gets a list of terminal audit log instances
*/
func (a *Client) GetTerminalAuditLogs(params *GetTerminalAuditLogsParams) (*GetTerminalAuditLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTerminalAuditLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTerminalAuditLogs",
		Method:             "GET",
		PathPattern:        "/terminal/AuditLogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTerminalAuditLogsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTerminalAuditLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTerminalAuditLogsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTerminalAuditLogsMoid gets a specific instance of terminal audit log
*/
func (a *Client) GetTerminalAuditLogsMoid(params *GetTerminalAuditLogsMoidParams) (*GetTerminalAuditLogsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTerminalAuditLogsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTerminalAuditLogsMoid",
		Method:             "GET",
		PathPattern:        "/terminal/AuditLogs/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTerminalAuditLogsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTerminalAuditLogsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTerminalAuditLogsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
