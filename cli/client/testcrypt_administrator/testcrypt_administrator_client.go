// Code generated by go-swagger; DO NOT EDIT.

package testcrypt_administrator

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new testcrypt administrator API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for testcrypt administrator API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetTestcryptAdministrators gets a list of testcrypt administrator instances
*/
func (a *Client) GetTestcryptAdministrators(params *GetTestcryptAdministratorsParams) (*GetTestcryptAdministratorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTestcryptAdministratorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTestcryptAdministrators",
		Method:             "GET",
		PathPattern:        "/testcrypt/Administrators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTestcryptAdministratorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTestcryptAdministratorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTestcryptAdministratorsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTestcryptAdministratorsMoid gets a specific instance of testcrypt administrator
*/
func (a *Client) GetTestcryptAdministratorsMoid(params *GetTestcryptAdministratorsMoidParams) (*GetTestcryptAdministratorsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTestcryptAdministratorsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTestcryptAdministratorsMoid",
		Method:             "GET",
		PathPattern:        "/testcrypt/Administrators/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTestcryptAdministratorsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTestcryptAdministratorsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTestcryptAdministratorsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchTestcryptAdministratorsMoid updates an instance of testcrypt administrator
*/
func (a *Client) PatchTestcryptAdministratorsMoid(params *PatchTestcryptAdministratorsMoidParams) (*PatchTestcryptAdministratorsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchTestcryptAdministratorsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchTestcryptAdministratorsMoid",
		Method:             "PATCH",
		PathPattern:        "/testcrypt/Administrators/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchTestcryptAdministratorsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchTestcryptAdministratorsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchTestcryptAdministratorsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostTestcryptAdministrators creates an instance of testcrypt administrator
*/
func (a *Client) PostTestcryptAdministrators(params *PostTestcryptAdministratorsParams) (*PostTestcryptAdministratorsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTestcryptAdministratorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTestcryptAdministrators",
		Method:             "POST",
		PathPattern:        "/testcrypt/Administrators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTestcryptAdministratorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTestcryptAdministratorsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostTestcryptAdministratorsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostTestcryptAdministratorsMoid updates an instance of testcrypt administrator
*/
func (a *Client) PostTestcryptAdministratorsMoid(params *PostTestcryptAdministratorsMoidParams) (*PostTestcryptAdministratorsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTestcryptAdministratorsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTestcryptAdministratorsMoid",
		Method:             "POST",
		PathPattern:        "/testcrypt/Administrators/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTestcryptAdministratorsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTestcryptAdministratorsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostTestcryptAdministratorsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
