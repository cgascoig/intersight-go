// Code generated by go-swagger; DO NOT EDIT.

package testcrypt_credential

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new testcrypt credential API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for testcrypt credential API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteTestcryptCredentialsMoid deletes an instance of testcrypt credential
*/
func (a *Client) DeleteTestcryptCredentialsMoid(params *DeleteTestcryptCredentialsMoidParams) (*DeleteTestcryptCredentialsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTestcryptCredentialsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteTestcryptCredentialsMoid",
		Method:             "DELETE",
		PathPattern:        "/testcrypt/Credentials/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTestcryptCredentialsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTestcryptCredentialsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteTestcryptCredentialsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTestcryptCredentials gets a list of testcrypt credential instances
*/
func (a *Client) GetTestcryptCredentials(params *GetTestcryptCredentialsParams) (*GetTestcryptCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTestcryptCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTestcryptCredentials",
		Method:             "GET",
		PathPattern:        "/testcrypt/Credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTestcryptCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTestcryptCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTestcryptCredentialsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTestcryptCredentialsMoid gets a specific instance of testcrypt credential
*/
func (a *Client) GetTestcryptCredentialsMoid(params *GetTestcryptCredentialsMoidParams) (*GetTestcryptCredentialsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTestcryptCredentialsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTestcryptCredentialsMoid",
		Method:             "GET",
		PathPattern:        "/testcrypt/Credentials/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTestcryptCredentialsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTestcryptCredentialsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTestcryptCredentialsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchTestcryptCredentialsMoid updates an instance of testcrypt credential
*/
func (a *Client) PatchTestcryptCredentialsMoid(params *PatchTestcryptCredentialsMoidParams) (*PatchTestcryptCredentialsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchTestcryptCredentialsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchTestcryptCredentialsMoid",
		Method:             "PATCH",
		PathPattern:        "/testcrypt/Credentials/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchTestcryptCredentialsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchTestcryptCredentialsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchTestcryptCredentialsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostTestcryptCredentials creates an instance of testcrypt credential
*/
func (a *Client) PostTestcryptCredentials(params *PostTestcryptCredentialsParams) (*PostTestcryptCredentialsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTestcryptCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTestcryptCredentials",
		Method:             "POST",
		PathPattern:        "/testcrypt/Credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTestcryptCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTestcryptCredentialsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostTestcryptCredentialsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostTestcryptCredentialsMoid updates an instance of testcrypt credential
*/
func (a *Client) PostTestcryptCredentialsMoid(params *PostTestcryptCredentialsMoidParams) (*PostTestcryptCredentialsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTestcryptCredentialsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTestcryptCredentialsMoid",
		Method:             "POST",
		PathPattern:        "/testcrypt/Credentials/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTestcryptCredentialsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTestcryptCredentialsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostTestcryptCredentialsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
