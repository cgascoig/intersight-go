// Code generated by go-swagger; DO NOT EDIT.

package testcrypt_read_only_user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetTestcryptReadOnlyUsersMoidReader is a Reader for the GetTestcryptReadOnlyUsersMoid structure.
type GetTestcryptReadOnlyUsersMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTestcryptReadOnlyUsersMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTestcryptReadOnlyUsersMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetTestcryptReadOnlyUsersMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetTestcryptReadOnlyUsersMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetTestcryptReadOnlyUsersMoidOK creates a GetTestcryptReadOnlyUsersMoidOK with default headers values
func NewGetTestcryptReadOnlyUsersMoidOK() *GetTestcryptReadOnlyUsersMoidOK {
	return &GetTestcryptReadOnlyUsersMoidOK{}
}

/*GetTestcryptReadOnlyUsersMoidOK handles this case with default header values.

An instance of testcryptReadOnlyUser
*/
type GetTestcryptReadOnlyUsersMoidOK struct {
	Payload *models.TestcryptReadOnlyUser
}

func (o *GetTestcryptReadOnlyUsersMoidOK) Error() string {
	return fmt.Sprintf("[GET /testcrypt/ReadOnlyUsers/{moid}][%d] getTestcryptReadOnlyUsersMoidOK  %+v", 200, o.Payload)
}

func (o *GetTestcryptReadOnlyUsersMoidOK) GetPayload() *models.TestcryptReadOnlyUser {
	return o.Payload
}

func (o *GetTestcryptReadOnlyUsersMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TestcryptReadOnlyUser)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTestcryptReadOnlyUsersMoidNotFound creates a GetTestcryptReadOnlyUsersMoidNotFound with default headers values
func NewGetTestcryptReadOnlyUsersMoidNotFound() *GetTestcryptReadOnlyUsersMoidNotFound {
	return &GetTestcryptReadOnlyUsersMoidNotFound{}
}

/*GetTestcryptReadOnlyUsersMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetTestcryptReadOnlyUsersMoidNotFound struct {
}

func (o *GetTestcryptReadOnlyUsersMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /testcrypt/ReadOnlyUsers/{moid}][%d] getTestcryptReadOnlyUsersMoidNotFound ", 404)
}

func (o *GetTestcryptReadOnlyUsersMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTestcryptReadOnlyUsersMoidDefault creates a GetTestcryptReadOnlyUsersMoidDefault with default headers values
func NewGetTestcryptReadOnlyUsersMoidDefault(code int) *GetTestcryptReadOnlyUsersMoidDefault {
	return &GetTestcryptReadOnlyUsersMoidDefault{
		_statusCode: code,
	}
}

/*GetTestcryptReadOnlyUsersMoidDefault handles this case with default header values.

Unexpected error
*/
type GetTestcryptReadOnlyUsersMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get testcrypt read only users moid default response
func (o *GetTestcryptReadOnlyUsersMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetTestcryptReadOnlyUsersMoidDefault) Error() string {
	return fmt.Sprintf("[GET /testcrypt/ReadOnlyUsers/{moid}][%d] GetTestcryptReadOnlyUsersMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetTestcryptReadOnlyUsersMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetTestcryptReadOnlyUsersMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
