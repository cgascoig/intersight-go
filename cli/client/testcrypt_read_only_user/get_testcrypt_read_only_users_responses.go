// Code generated by go-swagger; DO NOT EDIT.

package testcrypt_read_only_user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetTestcryptReadOnlyUsersReader is a Reader for the GetTestcryptReadOnlyUsers structure.
type GetTestcryptReadOnlyUsersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTestcryptReadOnlyUsersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTestcryptReadOnlyUsersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetTestcryptReadOnlyUsersDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetTestcryptReadOnlyUsersOK creates a GetTestcryptReadOnlyUsersOK with default headers values
func NewGetTestcryptReadOnlyUsersOK() *GetTestcryptReadOnlyUsersOK {
	return &GetTestcryptReadOnlyUsersOK{}
}

/*GetTestcryptReadOnlyUsersOK handles this case with default header values.

List of testcryptReadOnlyUsers for the given filter criteria
*/
type GetTestcryptReadOnlyUsersOK struct {
	Payload *models.TestcryptReadOnlyUserList
}

func (o *GetTestcryptReadOnlyUsersOK) Error() string {
	return fmt.Sprintf("[GET /testcrypt/ReadOnlyUsers][%d] getTestcryptReadOnlyUsersOK  %+v", 200, o.Payload)
}

func (o *GetTestcryptReadOnlyUsersOK) GetPayload() *models.TestcryptReadOnlyUserList {
	return o.Payload
}

func (o *GetTestcryptReadOnlyUsersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TestcryptReadOnlyUserList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTestcryptReadOnlyUsersDefault creates a GetTestcryptReadOnlyUsersDefault with default headers values
func NewGetTestcryptReadOnlyUsersDefault(code int) *GetTestcryptReadOnlyUsersDefault {
	return &GetTestcryptReadOnlyUsersDefault{
		_statusCode: code,
	}
}

/*GetTestcryptReadOnlyUsersDefault handles this case with default header values.

Unexpected error
*/
type GetTestcryptReadOnlyUsersDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get testcrypt read only users default response
func (o *GetTestcryptReadOnlyUsersDefault) Code() int {
	return o._statusCode
}

func (o *GetTestcryptReadOnlyUsersDefault) Error() string {
	return fmt.Sprintf("[GET /testcrypt/ReadOnlyUsers][%d] GetTestcryptReadOnlyUsers default  %+v", o._statusCode, o.Payload)
}

func (o *GetTestcryptReadOnlyUsersDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetTestcryptReadOnlyUsersDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
