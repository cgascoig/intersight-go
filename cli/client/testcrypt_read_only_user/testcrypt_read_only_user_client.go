// Code generated by go-swagger; DO NOT EDIT.

package testcrypt_read_only_user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new testcrypt read only user API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for testcrypt read only user API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteTestcryptReadOnlyUsersMoid deletes an instance of testcrypt read only user
*/
func (a *Client) DeleteTestcryptReadOnlyUsersMoid(params *DeleteTestcryptReadOnlyUsersMoidParams) (*DeleteTestcryptReadOnlyUsersMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTestcryptReadOnlyUsersMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteTestcryptReadOnlyUsersMoid",
		Method:             "DELETE",
		PathPattern:        "/testcrypt/ReadOnlyUsers/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTestcryptReadOnlyUsersMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTestcryptReadOnlyUsersMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteTestcryptReadOnlyUsersMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTestcryptReadOnlyUsers gets a list of testcrypt read only user instances
*/
func (a *Client) GetTestcryptReadOnlyUsers(params *GetTestcryptReadOnlyUsersParams) (*GetTestcryptReadOnlyUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTestcryptReadOnlyUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTestcryptReadOnlyUsers",
		Method:             "GET",
		PathPattern:        "/testcrypt/ReadOnlyUsers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTestcryptReadOnlyUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTestcryptReadOnlyUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTestcryptReadOnlyUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTestcryptReadOnlyUsersMoid gets a specific instance of testcrypt read only user
*/
func (a *Client) GetTestcryptReadOnlyUsersMoid(params *GetTestcryptReadOnlyUsersMoidParams) (*GetTestcryptReadOnlyUsersMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTestcryptReadOnlyUsersMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTestcryptReadOnlyUsersMoid",
		Method:             "GET",
		PathPattern:        "/testcrypt/ReadOnlyUsers/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTestcryptReadOnlyUsersMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTestcryptReadOnlyUsersMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTestcryptReadOnlyUsersMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchTestcryptReadOnlyUsersMoid updates an instance of testcrypt read only user
*/
func (a *Client) PatchTestcryptReadOnlyUsersMoid(params *PatchTestcryptReadOnlyUsersMoidParams) (*PatchTestcryptReadOnlyUsersMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchTestcryptReadOnlyUsersMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchTestcryptReadOnlyUsersMoid",
		Method:             "PATCH",
		PathPattern:        "/testcrypt/ReadOnlyUsers/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchTestcryptReadOnlyUsersMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchTestcryptReadOnlyUsersMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchTestcryptReadOnlyUsersMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostTestcryptReadOnlyUsers creates an instance of testcrypt read only user
*/
func (a *Client) PostTestcryptReadOnlyUsers(params *PostTestcryptReadOnlyUsersParams) (*PostTestcryptReadOnlyUsersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTestcryptReadOnlyUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTestcryptReadOnlyUsers",
		Method:             "POST",
		PathPattern:        "/testcrypt/ReadOnlyUsers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTestcryptReadOnlyUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTestcryptReadOnlyUsersCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostTestcryptReadOnlyUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostTestcryptReadOnlyUsersMoid updates an instance of testcrypt read only user
*/
func (a *Client) PostTestcryptReadOnlyUsersMoid(params *PostTestcryptReadOnlyUsersMoidParams) (*PostTestcryptReadOnlyUsersMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTestcryptReadOnlyUsersMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTestcryptReadOnlyUsersMoid",
		Method:             "POST",
		PathPattern:        "/testcrypt/ReadOnlyUsers/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTestcryptReadOnlyUsersMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTestcryptReadOnlyUsersMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostTestcryptReadOnlyUsersMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
