// Code generated by go-swagger; DO NOT EDIT.

package testcrypt_token_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// DeleteTestcryptTokenApisMoidReader is a Reader for the DeleteTestcryptTokenApisMoid structure.
type DeleteTestcryptTokenApisMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteTestcryptTokenApisMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteTestcryptTokenApisMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteTestcryptTokenApisMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteTestcryptTokenApisMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteTestcryptTokenApisMoidOK creates a DeleteTestcryptTokenApisMoidOK with default headers values
func NewDeleteTestcryptTokenApisMoidOK() *DeleteTestcryptTokenApisMoidOK {
	return &DeleteTestcryptTokenApisMoidOK{}
}

/*DeleteTestcryptTokenApisMoidOK handles this case with default header values.

Delete successful.
*/
type DeleteTestcryptTokenApisMoidOK struct {
}

func (o *DeleteTestcryptTokenApisMoidOK) Error() string {
	return fmt.Sprintf("[DELETE /testcrypt/TokenApis/{moid}][%d] deleteTestcryptTokenApisMoidOK ", 200)
}

func (o *DeleteTestcryptTokenApisMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteTestcryptTokenApisMoidNotFound creates a DeleteTestcryptTokenApisMoidNotFound with default headers values
func NewDeleteTestcryptTokenApisMoidNotFound() *DeleteTestcryptTokenApisMoidNotFound {
	return &DeleteTestcryptTokenApisMoidNotFound{}
}

/*DeleteTestcryptTokenApisMoidNotFound handles this case with default header values.

Instance not found.
*/
type DeleteTestcryptTokenApisMoidNotFound struct {
}

func (o *DeleteTestcryptTokenApisMoidNotFound) Error() string {
	return fmt.Sprintf("[DELETE /testcrypt/TokenApis/{moid}][%d] deleteTestcryptTokenApisMoidNotFound ", 404)
}

func (o *DeleteTestcryptTokenApisMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteTestcryptTokenApisMoidDefault creates a DeleteTestcryptTokenApisMoidDefault with default headers values
func NewDeleteTestcryptTokenApisMoidDefault(code int) *DeleteTestcryptTokenApisMoidDefault {
	return &DeleteTestcryptTokenApisMoidDefault{
		_statusCode: code,
	}
}

/*DeleteTestcryptTokenApisMoidDefault handles this case with default header values.

Unexpected error
*/
type DeleteTestcryptTokenApisMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the delete testcrypt token apis moid default response
func (o *DeleteTestcryptTokenApisMoidDefault) Code() int {
	return o._statusCode
}

func (o *DeleteTestcryptTokenApisMoidDefault) Error() string {
	return fmt.Sprintf("[DELETE /testcrypt/TokenApis/{moid}][%d] DeleteTestcryptTokenApisMoid default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteTestcryptTokenApisMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteTestcryptTokenApisMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
