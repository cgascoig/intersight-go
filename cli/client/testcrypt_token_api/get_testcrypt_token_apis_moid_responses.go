// Code generated by go-swagger; DO NOT EDIT.

package testcrypt_token_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetTestcryptTokenApisMoidReader is a Reader for the GetTestcryptTokenApisMoid structure.
type GetTestcryptTokenApisMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTestcryptTokenApisMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTestcryptTokenApisMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetTestcryptTokenApisMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetTestcryptTokenApisMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetTestcryptTokenApisMoidOK creates a GetTestcryptTokenApisMoidOK with default headers values
func NewGetTestcryptTokenApisMoidOK() *GetTestcryptTokenApisMoidOK {
	return &GetTestcryptTokenApisMoidOK{}
}

/*GetTestcryptTokenApisMoidOK handles this case with default header values.

An instance of testcryptTokenApi
*/
type GetTestcryptTokenApisMoidOK struct {
	Payload *models.TestcryptTokenAPI
}

func (o *GetTestcryptTokenApisMoidOK) Error() string {
	return fmt.Sprintf("[GET /testcrypt/TokenApis/{moid}][%d] getTestcryptTokenApisMoidOK  %+v", 200, o.Payload)
}

func (o *GetTestcryptTokenApisMoidOK) GetPayload() *models.TestcryptTokenAPI {
	return o.Payload
}

func (o *GetTestcryptTokenApisMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TestcryptTokenAPI)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTestcryptTokenApisMoidNotFound creates a GetTestcryptTokenApisMoidNotFound with default headers values
func NewGetTestcryptTokenApisMoidNotFound() *GetTestcryptTokenApisMoidNotFound {
	return &GetTestcryptTokenApisMoidNotFound{}
}

/*GetTestcryptTokenApisMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetTestcryptTokenApisMoidNotFound struct {
}

func (o *GetTestcryptTokenApisMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /testcrypt/TokenApis/{moid}][%d] getTestcryptTokenApisMoidNotFound ", 404)
}

func (o *GetTestcryptTokenApisMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTestcryptTokenApisMoidDefault creates a GetTestcryptTokenApisMoidDefault with default headers values
func NewGetTestcryptTokenApisMoidDefault(code int) *GetTestcryptTokenApisMoidDefault {
	return &GetTestcryptTokenApisMoidDefault{
		_statusCode: code,
	}
}

/*GetTestcryptTokenApisMoidDefault handles this case with default header values.

Unexpected error
*/
type GetTestcryptTokenApisMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get testcrypt token apis moid default response
func (o *GetTestcryptTokenApisMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetTestcryptTokenApisMoidDefault) Error() string {
	return fmt.Sprintf("[GET /testcrypt/TokenApis/{moid}][%d] GetTestcryptTokenApisMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetTestcryptTokenApisMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetTestcryptTokenApisMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
