// Code generated by go-swagger; DO NOT EDIT.

package testcrypt_token_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new testcrypt token api API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for testcrypt token api API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteTestcryptTokenApisMoid deletes an instance of testcrypt token Api
*/
func (a *Client) DeleteTestcryptTokenApisMoid(params *DeleteTestcryptTokenApisMoidParams) (*DeleteTestcryptTokenApisMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTestcryptTokenApisMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteTestcryptTokenApisMoid",
		Method:             "DELETE",
		PathPattern:        "/testcrypt/TokenApis/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTestcryptTokenApisMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTestcryptTokenApisMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteTestcryptTokenApisMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTestcryptTokenApis gets a list of testcrypt token Api instances
*/
func (a *Client) GetTestcryptTokenApis(params *GetTestcryptTokenApisParams) (*GetTestcryptTokenApisOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTestcryptTokenApisParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTestcryptTokenApis",
		Method:             "GET",
		PathPattern:        "/testcrypt/TokenApis",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTestcryptTokenApisReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTestcryptTokenApisOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTestcryptTokenApisDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTestcryptTokenApisMoid gets a specific instance of testcrypt token Api
*/
func (a *Client) GetTestcryptTokenApisMoid(params *GetTestcryptTokenApisMoidParams) (*GetTestcryptTokenApisMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTestcryptTokenApisMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTestcryptTokenApisMoid",
		Method:             "GET",
		PathPattern:        "/testcrypt/TokenApis/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTestcryptTokenApisMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTestcryptTokenApisMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTestcryptTokenApisMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchTestcryptTokenApisMoid updates an instance of testcrypt token Api
*/
func (a *Client) PatchTestcryptTokenApisMoid(params *PatchTestcryptTokenApisMoidParams) (*PatchTestcryptTokenApisMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchTestcryptTokenApisMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchTestcryptTokenApisMoid",
		Method:             "PATCH",
		PathPattern:        "/testcrypt/TokenApis/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchTestcryptTokenApisMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchTestcryptTokenApisMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchTestcryptTokenApisMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostTestcryptTokenApis creates an instance of testcrypt token Api
*/
func (a *Client) PostTestcryptTokenApis(params *PostTestcryptTokenApisParams) (*PostTestcryptTokenApisCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTestcryptTokenApisParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTestcryptTokenApis",
		Method:             "POST",
		PathPattern:        "/testcrypt/TokenApis",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTestcryptTokenApisReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTestcryptTokenApisCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostTestcryptTokenApisDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostTestcryptTokenApisMoid updates an instance of testcrypt token Api
*/
func (a *Client) PostTestcryptTokenApisMoid(params *PostTestcryptTokenApisMoidParams) (*PostTestcryptTokenApisMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTestcryptTokenApisMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTestcryptTokenApisMoid",
		Method:             "POST",
		PathPattern:        "/testcrypt/TokenApis/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTestcryptTokenApisMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTestcryptTokenApisMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostTestcryptTokenApisMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
