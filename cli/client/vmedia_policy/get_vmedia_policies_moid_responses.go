// Code generated by go-swagger; DO NOT EDIT.

package vmedia_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetVmediaPoliciesMoidReader is a Reader for the GetVmediaPoliciesMoid structure.
type GetVmediaPoliciesMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVmediaPoliciesMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVmediaPoliciesMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetVmediaPoliciesMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetVmediaPoliciesMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetVmediaPoliciesMoidOK creates a GetVmediaPoliciesMoidOK with default headers values
func NewGetVmediaPoliciesMoidOK() *GetVmediaPoliciesMoidOK {
	return &GetVmediaPoliciesMoidOK{}
}

/*GetVmediaPoliciesMoidOK handles this case with default header values.

An instance of vmediaPolicy
*/
type GetVmediaPoliciesMoidOK struct {
	Payload *models.VmediaPolicy
}

func (o *GetVmediaPoliciesMoidOK) Error() string {
	return fmt.Sprintf("[GET /vmedia/Policies/{moid}][%d] getVmediaPoliciesMoidOK  %+v", 200, o.Payload)
}

func (o *GetVmediaPoliciesMoidOK) GetPayload() *models.VmediaPolicy {
	return o.Payload
}

func (o *GetVmediaPoliciesMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VmediaPolicy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVmediaPoliciesMoidNotFound creates a GetVmediaPoliciesMoidNotFound with default headers values
func NewGetVmediaPoliciesMoidNotFound() *GetVmediaPoliciesMoidNotFound {
	return &GetVmediaPoliciesMoidNotFound{}
}

/*GetVmediaPoliciesMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetVmediaPoliciesMoidNotFound struct {
}

func (o *GetVmediaPoliciesMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /vmedia/Policies/{moid}][%d] getVmediaPoliciesMoidNotFound ", 404)
}

func (o *GetVmediaPoliciesMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVmediaPoliciesMoidDefault creates a GetVmediaPoliciesMoidDefault with default headers values
func NewGetVmediaPoliciesMoidDefault(code int) *GetVmediaPoliciesMoidDefault {
	return &GetVmediaPoliciesMoidDefault{
		_statusCode: code,
	}
}

/*GetVmediaPoliciesMoidDefault handles this case with default header values.

Unexpected error
*/
type GetVmediaPoliciesMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get vmedia policies moid default response
func (o *GetVmediaPoliciesMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetVmediaPoliciesMoidDefault) Error() string {
	return fmt.Sprintf("[GET /vmedia/Policies/{moid}][%d] GetVmediaPoliciesMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetVmediaPoliciesMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetVmediaPoliciesMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
