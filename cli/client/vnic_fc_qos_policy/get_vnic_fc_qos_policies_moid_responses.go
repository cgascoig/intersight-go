// Code generated by go-swagger; DO NOT EDIT.

package vnic_fc_qos_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetVnicFcQosPoliciesMoidReader is a Reader for the GetVnicFcQosPoliciesMoid structure.
type GetVnicFcQosPoliciesMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVnicFcQosPoliciesMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVnicFcQosPoliciesMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetVnicFcQosPoliciesMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetVnicFcQosPoliciesMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetVnicFcQosPoliciesMoidOK creates a GetVnicFcQosPoliciesMoidOK with default headers values
func NewGetVnicFcQosPoliciesMoidOK() *GetVnicFcQosPoliciesMoidOK {
	return &GetVnicFcQosPoliciesMoidOK{}
}

/*GetVnicFcQosPoliciesMoidOK handles this case with default header values.

An instance of vnicFcQosPolicy
*/
type GetVnicFcQosPoliciesMoidOK struct {
	Payload *models.VnicFcQosPolicy
}

func (o *GetVnicFcQosPoliciesMoidOK) Error() string {
	return fmt.Sprintf("[GET /vnic/FcQosPolicies/{moid}][%d] getVnicFcQosPoliciesMoidOK  %+v", 200, o.Payload)
}

func (o *GetVnicFcQosPoliciesMoidOK) GetPayload() *models.VnicFcQosPolicy {
	return o.Payload
}

func (o *GetVnicFcQosPoliciesMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VnicFcQosPolicy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVnicFcQosPoliciesMoidNotFound creates a GetVnicFcQosPoliciesMoidNotFound with default headers values
func NewGetVnicFcQosPoliciesMoidNotFound() *GetVnicFcQosPoliciesMoidNotFound {
	return &GetVnicFcQosPoliciesMoidNotFound{}
}

/*GetVnicFcQosPoliciesMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetVnicFcQosPoliciesMoidNotFound struct {
}

func (o *GetVnicFcQosPoliciesMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /vnic/FcQosPolicies/{moid}][%d] getVnicFcQosPoliciesMoidNotFound ", 404)
}

func (o *GetVnicFcQosPoliciesMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVnicFcQosPoliciesMoidDefault creates a GetVnicFcQosPoliciesMoidDefault with default headers values
func NewGetVnicFcQosPoliciesMoidDefault(code int) *GetVnicFcQosPoliciesMoidDefault {
	return &GetVnicFcQosPoliciesMoidDefault{
		_statusCode: code,
	}
}

/*GetVnicFcQosPoliciesMoidDefault handles this case with default header values.

Unexpected error
*/
type GetVnicFcQosPoliciesMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get vnic fc qos policies moid default response
func (o *GetVnicFcQosPoliciesMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetVnicFcQosPoliciesMoidDefault) Error() string {
	return fmt.Sprintf("[GET /vnic/FcQosPolicies/{moid}][%d] GetVnicFcQosPoliciesMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetVnicFcQosPoliciesMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetVnicFcQosPoliciesMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
