// Code generated by go-swagger; DO NOT EDIT.

package workflow_catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetWorkflowCatalogsMoidReader is a Reader for the GetWorkflowCatalogsMoid structure.
type GetWorkflowCatalogsMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWorkflowCatalogsMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWorkflowCatalogsMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetWorkflowCatalogsMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetWorkflowCatalogsMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetWorkflowCatalogsMoidOK creates a GetWorkflowCatalogsMoidOK with default headers values
func NewGetWorkflowCatalogsMoidOK() *GetWorkflowCatalogsMoidOK {
	return &GetWorkflowCatalogsMoidOK{}
}

/*GetWorkflowCatalogsMoidOK handles this case with default header values.

An instance of workflowCatalog
*/
type GetWorkflowCatalogsMoidOK struct {
	Payload *models.WorkflowCatalog
}

func (o *GetWorkflowCatalogsMoidOK) Error() string {
	return fmt.Sprintf("[GET /workflow/Catalogs/{moid}][%d] getWorkflowCatalogsMoidOK  %+v", 200, o.Payload)
}

func (o *GetWorkflowCatalogsMoidOK) GetPayload() *models.WorkflowCatalog {
	return o.Payload
}

func (o *GetWorkflowCatalogsMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WorkflowCatalog)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowCatalogsMoidNotFound creates a GetWorkflowCatalogsMoidNotFound with default headers values
func NewGetWorkflowCatalogsMoidNotFound() *GetWorkflowCatalogsMoidNotFound {
	return &GetWorkflowCatalogsMoidNotFound{}
}

/*GetWorkflowCatalogsMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetWorkflowCatalogsMoidNotFound struct {
}

func (o *GetWorkflowCatalogsMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /workflow/Catalogs/{moid}][%d] getWorkflowCatalogsMoidNotFound ", 404)
}

func (o *GetWorkflowCatalogsMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetWorkflowCatalogsMoidDefault creates a GetWorkflowCatalogsMoidDefault with default headers values
func NewGetWorkflowCatalogsMoidDefault(code int) *GetWorkflowCatalogsMoidDefault {
	return &GetWorkflowCatalogsMoidDefault{
		_statusCode: code,
	}
}

/*GetWorkflowCatalogsMoidDefault handles this case with default header values.

Unexpected error
*/
type GetWorkflowCatalogsMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get workflow catalogs moid default response
func (o *GetWorkflowCatalogsMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetWorkflowCatalogsMoidDefault) Error() string {
	return fmt.Sprintf("[GET /workflow/Catalogs/{moid}][%d] GetWorkflowCatalogsMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetWorkflowCatalogsMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetWorkflowCatalogsMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
