// Code generated by go-swagger; DO NOT EDIT.

package workflow_task_definition

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new workflow task definition API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workflow task definition API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteWorkflowTaskDefinitionsMoid deletes an instance of workflow task definition
*/
func (a *Client) DeleteWorkflowTaskDefinitionsMoid(params *DeleteWorkflowTaskDefinitionsMoidParams) (*DeleteWorkflowTaskDefinitionsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWorkflowTaskDefinitionsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteWorkflowTaskDefinitionsMoid",
		Method:             "DELETE",
		PathPattern:        "/workflow/TaskDefinitions/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkflowTaskDefinitionsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWorkflowTaskDefinitionsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteWorkflowTaskDefinitionsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetWorkflowTaskDefinitions gets a list of workflow task definition instances
*/
func (a *Client) GetWorkflowTaskDefinitions(params *GetWorkflowTaskDefinitionsParams) (*GetWorkflowTaskDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowTaskDefinitionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetWorkflowTaskDefinitions",
		Method:             "GET",
		PathPattern:        "/workflow/TaskDefinitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkflowTaskDefinitionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowTaskDefinitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWorkflowTaskDefinitionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetWorkflowTaskDefinitionsMoid gets a specific instance of workflow task definition
*/
func (a *Client) GetWorkflowTaskDefinitionsMoid(params *GetWorkflowTaskDefinitionsMoidParams) (*GetWorkflowTaskDefinitionsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowTaskDefinitionsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetWorkflowTaskDefinitionsMoid",
		Method:             "GET",
		PathPattern:        "/workflow/TaskDefinitions/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkflowTaskDefinitionsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowTaskDefinitionsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWorkflowTaskDefinitionsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchWorkflowTaskDefinitionsMoid updates an instance of workflow task definition
*/
func (a *Client) PatchWorkflowTaskDefinitionsMoid(params *PatchWorkflowTaskDefinitionsMoidParams) (*PatchWorkflowTaskDefinitionsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchWorkflowTaskDefinitionsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchWorkflowTaskDefinitionsMoid",
		Method:             "PATCH",
		PathPattern:        "/workflow/TaskDefinitions/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkflowTaskDefinitionsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchWorkflowTaskDefinitionsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchWorkflowTaskDefinitionsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostWorkflowTaskDefinitions creates an instance of workflow task definition
*/
func (a *Client) PostWorkflowTaskDefinitions(params *PostWorkflowTaskDefinitionsParams) (*PostWorkflowTaskDefinitionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWorkflowTaskDefinitionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostWorkflowTaskDefinitions",
		Method:             "POST",
		PathPattern:        "/workflow/TaskDefinitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkflowTaskDefinitionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWorkflowTaskDefinitionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostWorkflowTaskDefinitionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostWorkflowTaskDefinitionsMoid updates an instance of workflow task definition
*/
func (a *Client) PostWorkflowTaskDefinitionsMoid(params *PostWorkflowTaskDefinitionsMoidParams) (*PostWorkflowTaskDefinitionsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWorkflowTaskDefinitionsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostWorkflowTaskDefinitionsMoid",
		Method:             "POST",
		PathPattern:        "/workflow/TaskDefinitions/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkflowTaskDefinitionsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWorkflowTaskDefinitionsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostWorkflowTaskDefinitionsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
