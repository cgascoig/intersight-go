// Code generated by go-swagger; DO NOT EDIT.

package workflow_task_info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// GetWorkflowTaskInfosMoidReader is a Reader for the GetWorkflowTaskInfosMoid structure.
type GetWorkflowTaskInfosMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWorkflowTaskInfosMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWorkflowTaskInfosMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetWorkflowTaskInfosMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetWorkflowTaskInfosMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetWorkflowTaskInfosMoidOK creates a GetWorkflowTaskInfosMoidOK with default headers values
func NewGetWorkflowTaskInfosMoidOK() *GetWorkflowTaskInfosMoidOK {
	return &GetWorkflowTaskInfosMoidOK{}
}

/*GetWorkflowTaskInfosMoidOK handles this case with default header values.

An instance of workflowTaskInfo
*/
type GetWorkflowTaskInfosMoidOK struct {
	Payload *models.WorkflowTaskInfo
}

func (o *GetWorkflowTaskInfosMoidOK) Error() string {
	return fmt.Sprintf("[GET /workflow/TaskInfos/{moid}][%d] getWorkflowTaskInfosMoidOK  %+v", 200, o.Payload)
}

func (o *GetWorkflowTaskInfosMoidOK) GetPayload() *models.WorkflowTaskInfo {
	return o.Payload
}

func (o *GetWorkflowTaskInfosMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WorkflowTaskInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowTaskInfosMoidNotFound creates a GetWorkflowTaskInfosMoidNotFound with default headers values
func NewGetWorkflowTaskInfosMoidNotFound() *GetWorkflowTaskInfosMoidNotFound {
	return &GetWorkflowTaskInfosMoidNotFound{}
}

/*GetWorkflowTaskInfosMoidNotFound handles this case with default header values.

Instance not found.
*/
type GetWorkflowTaskInfosMoidNotFound struct {
}

func (o *GetWorkflowTaskInfosMoidNotFound) Error() string {
	return fmt.Sprintf("[GET /workflow/TaskInfos/{moid}][%d] getWorkflowTaskInfosMoidNotFound ", 404)
}

func (o *GetWorkflowTaskInfosMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetWorkflowTaskInfosMoidDefault creates a GetWorkflowTaskInfosMoidDefault with default headers values
func NewGetWorkflowTaskInfosMoidDefault(code int) *GetWorkflowTaskInfosMoidDefault {
	return &GetWorkflowTaskInfosMoidDefault{
		_statusCode: code,
	}
}

/*GetWorkflowTaskInfosMoidDefault handles this case with default header values.

Unexpected error
*/
type GetWorkflowTaskInfosMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get workflow task infos moid default response
func (o *GetWorkflowTaskInfosMoidDefault) Code() int {
	return o._statusCode
}

func (o *GetWorkflowTaskInfosMoidDefault) Error() string {
	return fmt.Sprintf("[GET /workflow/TaskInfos/{moid}][%d] GetWorkflowTaskInfosMoid default  %+v", o._statusCode, o.Payload)
}

func (o *GetWorkflowTaskInfosMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetWorkflowTaskInfosMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
