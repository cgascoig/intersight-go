// Code generated by go-swagger; DO NOT EDIT.

package workflow_workflow_definition

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new workflow workflow definition API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workflow workflow definition API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteWorkflowWorkflowDefinitionsMoid deletes an instance of workflow workflow definition
*/
func (a *Client) DeleteWorkflowWorkflowDefinitionsMoid(params *DeleteWorkflowWorkflowDefinitionsMoidParams) (*DeleteWorkflowWorkflowDefinitionsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWorkflowWorkflowDefinitionsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteWorkflowWorkflowDefinitionsMoid",
		Method:             "DELETE",
		PathPattern:        "/workflow/WorkflowDefinitions/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkflowWorkflowDefinitionsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWorkflowWorkflowDefinitionsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteWorkflowWorkflowDefinitionsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetWorkflowWorkflowDefinitions gets a list of workflow workflow definition instances
*/
func (a *Client) GetWorkflowWorkflowDefinitions(params *GetWorkflowWorkflowDefinitionsParams) (*GetWorkflowWorkflowDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowWorkflowDefinitionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetWorkflowWorkflowDefinitions",
		Method:             "GET",
		PathPattern:        "/workflow/WorkflowDefinitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkflowWorkflowDefinitionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowWorkflowDefinitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWorkflowWorkflowDefinitionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetWorkflowWorkflowDefinitionsMoid gets a specific instance of workflow workflow definition
*/
func (a *Client) GetWorkflowWorkflowDefinitionsMoid(params *GetWorkflowWorkflowDefinitionsMoidParams) (*GetWorkflowWorkflowDefinitionsMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowWorkflowDefinitionsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetWorkflowWorkflowDefinitionsMoid",
		Method:             "GET",
		PathPattern:        "/workflow/WorkflowDefinitions/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkflowWorkflowDefinitionsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowWorkflowDefinitionsMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWorkflowWorkflowDefinitionsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchWorkflowWorkflowDefinitionsMoid updates an instance of workflow workflow definition
*/
func (a *Client) PatchWorkflowWorkflowDefinitionsMoid(params *PatchWorkflowWorkflowDefinitionsMoidParams) (*PatchWorkflowWorkflowDefinitionsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchWorkflowWorkflowDefinitionsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchWorkflowWorkflowDefinitionsMoid",
		Method:             "PATCH",
		PathPattern:        "/workflow/WorkflowDefinitions/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkflowWorkflowDefinitionsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchWorkflowWorkflowDefinitionsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchWorkflowWorkflowDefinitionsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostWorkflowWorkflowDefinitions creates an instance of workflow workflow definition
*/
func (a *Client) PostWorkflowWorkflowDefinitions(params *PostWorkflowWorkflowDefinitionsParams) (*PostWorkflowWorkflowDefinitionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWorkflowWorkflowDefinitionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostWorkflowWorkflowDefinitions",
		Method:             "POST",
		PathPattern:        "/workflow/WorkflowDefinitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkflowWorkflowDefinitionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWorkflowWorkflowDefinitionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostWorkflowWorkflowDefinitionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostWorkflowWorkflowDefinitionsMoid updates an instance of workflow workflow definition
*/
func (a *Client) PostWorkflowWorkflowDefinitionsMoid(params *PostWorkflowWorkflowDefinitionsMoidParams) (*PostWorkflowWorkflowDefinitionsMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWorkflowWorkflowDefinitionsMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostWorkflowWorkflowDefinitionsMoid",
		Method:             "POST",
		PathPattern:        "/workflow/WorkflowDefinitions/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkflowWorkflowDefinitionsMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWorkflowWorkflowDefinitionsMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostWorkflowWorkflowDefinitionsMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
