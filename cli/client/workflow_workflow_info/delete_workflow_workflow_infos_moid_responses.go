// Code generated by go-swagger; DO NOT EDIT.

package workflow_workflow_info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cgascoig/intersight-go/cli/models"
)

// DeleteWorkflowWorkflowInfosMoidReader is a Reader for the DeleteWorkflowWorkflowInfosMoid structure.
type DeleteWorkflowWorkflowInfosMoidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteWorkflowWorkflowInfosMoidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteWorkflowWorkflowInfosMoidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteWorkflowWorkflowInfosMoidNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteWorkflowWorkflowInfosMoidDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteWorkflowWorkflowInfosMoidOK creates a DeleteWorkflowWorkflowInfosMoidOK with default headers values
func NewDeleteWorkflowWorkflowInfosMoidOK() *DeleteWorkflowWorkflowInfosMoidOK {
	return &DeleteWorkflowWorkflowInfosMoidOK{}
}

/*DeleteWorkflowWorkflowInfosMoidOK handles this case with default header values.

Delete successful.
*/
type DeleteWorkflowWorkflowInfosMoidOK struct {
}

func (o *DeleteWorkflowWorkflowInfosMoidOK) Error() string {
	return fmt.Sprintf("[DELETE /workflow/WorkflowInfos/{moid}][%d] deleteWorkflowWorkflowInfosMoidOK ", 200)
}

func (o *DeleteWorkflowWorkflowInfosMoidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteWorkflowWorkflowInfosMoidNotFound creates a DeleteWorkflowWorkflowInfosMoidNotFound with default headers values
func NewDeleteWorkflowWorkflowInfosMoidNotFound() *DeleteWorkflowWorkflowInfosMoidNotFound {
	return &DeleteWorkflowWorkflowInfosMoidNotFound{}
}

/*DeleteWorkflowWorkflowInfosMoidNotFound handles this case with default header values.

Instance not found.
*/
type DeleteWorkflowWorkflowInfosMoidNotFound struct {
}

func (o *DeleteWorkflowWorkflowInfosMoidNotFound) Error() string {
	return fmt.Sprintf("[DELETE /workflow/WorkflowInfos/{moid}][%d] deleteWorkflowWorkflowInfosMoidNotFound ", 404)
}

func (o *DeleteWorkflowWorkflowInfosMoidNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteWorkflowWorkflowInfosMoidDefault creates a DeleteWorkflowWorkflowInfosMoidDefault with default headers values
func NewDeleteWorkflowWorkflowInfosMoidDefault(code int) *DeleteWorkflowWorkflowInfosMoidDefault {
	return &DeleteWorkflowWorkflowInfosMoidDefault{
		_statusCode: code,
	}
}

/*DeleteWorkflowWorkflowInfosMoidDefault handles this case with default header values.

Unexpected error
*/
type DeleteWorkflowWorkflowInfosMoidDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the delete workflow workflow infos moid default response
func (o *DeleteWorkflowWorkflowInfosMoidDefault) Code() int {
	return o._statusCode
}

func (o *DeleteWorkflowWorkflowInfosMoidDefault) Error() string {
	return fmt.Sprintf("[DELETE /workflow/WorkflowInfos/{moid}][%d] DeleteWorkflowWorkflowInfosMoid default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteWorkflowWorkflowInfosMoidDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteWorkflowWorkflowInfosMoidDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
