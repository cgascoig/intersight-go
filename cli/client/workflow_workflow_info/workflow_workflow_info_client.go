// Code generated by go-swagger; DO NOT EDIT.

package workflow_workflow_info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new workflow workflow info API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workflow workflow info API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteWorkflowWorkflowInfosMoid deletes an instance of workflow workflow info
*/
func (a *Client) DeleteWorkflowWorkflowInfosMoid(params *DeleteWorkflowWorkflowInfosMoidParams) (*DeleteWorkflowWorkflowInfosMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWorkflowWorkflowInfosMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteWorkflowWorkflowInfosMoid",
		Method:             "DELETE",
		PathPattern:        "/workflow/WorkflowInfos/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkflowWorkflowInfosMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWorkflowWorkflowInfosMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteWorkflowWorkflowInfosMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetWorkflowWorkflowInfos gets a list of workflow workflow info instances
*/
func (a *Client) GetWorkflowWorkflowInfos(params *GetWorkflowWorkflowInfosParams) (*GetWorkflowWorkflowInfosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowWorkflowInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetWorkflowWorkflowInfos",
		Method:             "GET",
		PathPattern:        "/workflow/WorkflowInfos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkflowWorkflowInfosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowWorkflowInfosOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWorkflowWorkflowInfosDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetWorkflowWorkflowInfosMoid gets a specific instance of workflow workflow info
*/
func (a *Client) GetWorkflowWorkflowInfosMoid(params *GetWorkflowWorkflowInfosMoidParams) (*GetWorkflowWorkflowInfosMoidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowWorkflowInfosMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetWorkflowWorkflowInfosMoid",
		Method:             "GET",
		PathPattern:        "/workflow/WorkflowInfos/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkflowWorkflowInfosMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowWorkflowInfosMoidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWorkflowWorkflowInfosMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchWorkflowWorkflowInfosMoid updates an instance of workflow workflow info
*/
func (a *Client) PatchWorkflowWorkflowInfosMoid(params *PatchWorkflowWorkflowInfosMoidParams) (*PatchWorkflowWorkflowInfosMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchWorkflowWorkflowInfosMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchWorkflowWorkflowInfosMoid",
		Method:             "PATCH",
		PathPattern:        "/workflow/WorkflowInfos/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkflowWorkflowInfosMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchWorkflowWorkflowInfosMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchWorkflowWorkflowInfosMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostWorkflowWorkflowInfos creates an instance of workflow workflow info
*/
func (a *Client) PostWorkflowWorkflowInfos(params *PostWorkflowWorkflowInfosParams) (*PostWorkflowWorkflowInfosCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWorkflowWorkflowInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostWorkflowWorkflowInfos",
		Method:             "POST",
		PathPattern:        "/workflow/WorkflowInfos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkflowWorkflowInfosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWorkflowWorkflowInfosCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostWorkflowWorkflowInfosDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostWorkflowWorkflowInfosMoid updates an instance of workflow workflow info
*/
func (a *Client) PostWorkflowWorkflowInfosMoid(params *PostWorkflowWorkflowInfosMoidParams) (*PostWorkflowWorkflowInfosMoidCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWorkflowWorkflowInfosMoidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostWorkflowWorkflowInfosMoid",
		Method:             "POST",
		PathPattern:        "/workflow/WorkflowInfos/{moid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkflowWorkflowInfosMoidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWorkflowWorkflowInfosMoidCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostWorkflowWorkflowInfosMoidDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
