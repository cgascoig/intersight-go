// Code generated by go-swagger; DO NOT EDIT.

package commands

//package IntersightREST

import (
	"fmt"

	"github.com/cgascoig/intersight-go/cli/client"
	httptransport "github.com/go-openapi/runtime/client"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/spf13/cobra"

	"github.com/cgascoig/intersight-go/cli/client/aaa_audit_record"
	"github.com/cgascoig/intersight-go/cli/client/adapter_config_policy"
	"github.com/cgascoig/intersight-go/cli/client/adapter_ext_eth_interface"
	"github.com/cgascoig/intersight-go/cli/client/adapter_host_eth_interface"
	"github.com/cgascoig/intersight-go/cli/client/adapter_host_fc_interface"
	"github.com/cgascoig/intersight-go/cli/client/adapter_host_iscsi_interface"
	"github.com/cgascoig/intersight-go/cli/client/adapter_unit"
	"github.com/cgascoig/intersight-go/cli/client/appliance_backup"
	"github.com/cgascoig/intersight-go/cli/client/appliance_backup_policy"
	"github.com/cgascoig/intersight-go/cli/client/appliance_data_export_policy"
	"github.com/cgascoig/intersight-go/cli/client/appliance_device_claim"
	"github.com/cgascoig/intersight-go/cli/client/appliance_diag_setting"
	"github.com/cgascoig/intersight-go/cli/client/appliance_image_bundle"
	"github.com/cgascoig/intersight-go/cli/client/appliance_node_info"
	"github.com/cgascoig/intersight-go/cli/client/appliance_restore"
	"github.com/cgascoig/intersight-go/cli/client/appliance_setup_info"
	"github.com/cgascoig/intersight-go/cli/client/appliance_system_info"
	"github.com/cgascoig/intersight-go/cli/client/appliance_upgrade"
	"github.com/cgascoig/intersight-go/cli/client/appliance_upgrade_policy"
	"github.com/cgascoig/intersight-go/cli/client/asset_cluster_member"
	"github.com/cgascoig/intersight-go/cli/client/asset_device_claim"
	"github.com/cgascoig/intersight-go/cli/client/asset_device_configuration"
	"github.com/cgascoig/intersight-go/cli/client/asset_device_connector_manager"
	"github.com/cgascoig/intersight-go/cli/client/asset_device_registration"
	"github.com/cgascoig/intersight-go/cli/client/asset_managed_device"
	"github.com/cgascoig/intersight-go/cli/client/bios_boot_mode"
	"github.com/cgascoig/intersight-go/cli/client/bios_policy"
	"github.com/cgascoig/intersight-go/cli/client/bios_unit"
	"github.com/cgascoig/intersight-go/cli/client/boot_device_boot_mode"
	"github.com/cgascoig/intersight-go/cli/client/boot_precision_policy"
	"github.com/cgascoig/intersight-go/cli/client/compute_blade"
	"github.com/cgascoig/intersight-go/cli/client/compute_board"
	"github.com/cgascoig/intersight-go/cli/client/compute_physical_summary"
	"github.com/cgascoig/intersight-go/cli/client/compute_rack_unit"
	"github.com/cgascoig/intersight-go/cli/client/compute_server_setting"
	"github.com/cgascoig/intersight-go/cli/client/cond_alarm"
	"github.com/cgascoig/intersight-go/cli/client/cond_hcl_status"
	"github.com/cgascoig/intersight-go/cli/client/cond_hcl_status_detail"
	"github.com/cgascoig/intersight-go/cli/client/cond_hcl_status_job"
	"github.com/cgascoig/intersight-go/cli/client/cvd_deployment_task"
	"github.com/cgascoig/intersight-go/cli/client/cvd_template"
	"github.com/cgascoig/intersight-go/cli/client/cvd_validation_task"
	"github.com/cgascoig/intersight-go/cli/client/deviceconnector_policy"
	"github.com/cgascoig/intersight-go/cli/client/deviceinfo_serial_number_info"
	"github.com/cgascoig/intersight-go/cli/client/equipment_chassis"
	"github.com/cgascoig/intersight-go/cli/client/equipment_device_summary"
	"github.com/cgascoig/intersight-go/cli/client/equipment_fan"
	"github.com/cgascoig/intersight-go/cli/client/equipment_fan_module"
	"github.com/cgascoig/intersight-go/cli/client/equipment_fex"
	"github.com/cgascoig/intersight-go/cli/client/equipment_io_card"
	"github.com/cgascoig/intersight-go/cli/client/equipment_io_expander"
	"github.com/cgascoig/intersight-go/cli/client/equipment_locator_led"
	"github.com/cgascoig/intersight-go/cli/client/equipment_psu"
	"github.com/cgascoig/intersight-go/cli/client/equipment_rack_enclosure"
	"github.com/cgascoig/intersight-go/cli/client/equipment_rack_enclosure_slot"
	"github.com/cgascoig/intersight-go/cli/client/equipment_switch_card"
	"github.com/cgascoig/intersight-go/cli/client/equipment_system_io_controller"
	"github.com/cgascoig/intersight-go/cli/client/equipment_tpm"
	"github.com/cgascoig/intersight-go/cli/client/ether_physical_port"
	"github.com/cgascoig/intersight-go/cli/client/externalsite_authorization"
	"github.com/cgascoig/intersight-go/cli/client/fault_instance"
	"github.com/cgascoig/intersight-go/cli/client/fc_physical_port"
	"github.com/cgascoig/intersight-go/cli/client/feedback_feedback_post"
	"github.com/cgascoig/intersight-go/cli/client/firmware_distributable"
	"github.com/cgascoig/intersight-go/cli/client/firmware_driver_distributable"
	"github.com/cgascoig/intersight-go/cli/client/firmware_eula"
	"github.com/cgascoig/intersight-go/cli/client/firmware_running_firmware"
	"github.com/cgascoig/intersight-go/cli/client/firmware_server_configuration_utility_distributable"
	"github.com/cgascoig/intersight-go/cli/client/firmware_upgrade"
	"github.com/cgascoig/intersight-go/cli/client/firmware_upgrade_status"
	"github.com/cgascoig/intersight-go/cli/client/graphics_card"
	"github.com/cgascoig/intersight-go/cli/client/graphics_controller"
	"github.com/cgascoig/intersight-go/cli/client/hcl_compatibility_status"
	"github.com/cgascoig/intersight-go/cli/client/hcl_driver_image"
	"github.com/cgascoig/intersight-go/cli/client/hcl_exempted_catalog"
	"github.com/cgascoig/intersight-go/cli/client/hcl_hyperflex_software_compatibility_info"
	"github.com/cgascoig/intersight-go/cli/client/hcl_operating_system"
	"github.com/cgascoig/intersight-go/cli/client/hcl_operating_system_vendor"
	"github.com/cgascoig/intersight-go/cli/client/hcl_service_status"
	"github.com/cgascoig/intersight-go/cli/client/hcl_supported_driver_name"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_alarm"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_app_catalog"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_auto_support_policy"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_capability_info"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_cluster"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_cluster_network_policy"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_cluster_profile"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_cluster_storage_policy"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_config_result"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_config_result_entry"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_ext_fc_storage_policy"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_ext_iscsi_storage_policy"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_feature_limit_external"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_feature_limit_internal"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_health"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_hxdp_version"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_initiate_hx_cluster_upgrade"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_local_credential_policy"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_node"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_node_config_policy"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_node_profile"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_proxy_setting_policy"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_server_firmware_version"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_server_model"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_software_version_policy"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_sys_config_policy"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_ucsm_config_policy"
	"github.com/cgascoig/intersight-go/cli/client/hyperflex_vcenter_config_policy"
	"github.com/cgascoig/intersight-go/cli/client/iaas_connector_pack"
	"github.com/cgascoig/intersight-go/cli/client/iaas_device_status"
	"github.com/cgascoig/intersight-go/cli/client/iaas_license_info"
	"github.com/cgascoig/intersight-go/cli/client/iaas_most_run_tasks"
	"github.com/cgascoig/intersight-go/cli/client/iaas_ucsd_info"
	"github.com/cgascoig/intersight-go/cli/client/iaas_ucsd_managed_infra"
	"github.com/cgascoig/intersight-go/cli/client/iam_account"
	"github.com/cgascoig/intersight-go/cli/client/iam_api_key"
	"github.com/cgascoig/intersight-go/cli/client/iam_domain_group"
	"github.com/cgascoig/intersight-go/cli/client/iam_end_point_privilege"
	"github.com/cgascoig/intersight-go/cli/client/iam_end_point_role"
	"github.com/cgascoig/intersight-go/cli/client/iam_end_point_user"
	"github.com/cgascoig/intersight-go/cli/client/iam_end_point_user_policy"
	"github.com/cgascoig/intersight-go/cli/client/iam_end_point_user_role"
	"github.com/cgascoig/intersight-go/cli/client/iam_idp"
	"github.com/cgascoig/intersight-go/cli/client/iam_idp_reference"
	"github.com/cgascoig/intersight-go/cli/client/iam_ldap_group"
	"github.com/cgascoig/intersight-go/cli/client/iam_ldap_policy"
	"github.com/cgascoig/intersight-go/cli/client/iam_ldap_provider"
	"github.com/cgascoig/intersight-go/cli/client/iam_local_user_password"
	"github.com/cgascoig/intersight-go/cli/client/iam_permission"
	"github.com/cgascoig/intersight-go/cli/client/iam_privilege"
	"github.com/cgascoig/intersight-go/cli/client/iam_privilege_set"
	"github.com/cgascoig/intersight-go/cli/client/iam_qualifier"
	"github.com/cgascoig/intersight-go/cli/client/iam_resource_limits"
	"github.com/cgascoig/intersight-go/cli/client/iam_role"
	"github.com/cgascoig/intersight-go/cli/client/iam_service_provider"
	"github.com/cgascoig/intersight-go/cli/client/iam_session"
	"github.com/cgascoig/intersight-go/cli/client/iam_session_limits"
	"github.com/cgascoig/intersight-go/cli/client/iam_system"
	"github.com/cgascoig/intersight-go/cli/client/iam_trust_point"
	"github.com/cgascoig/intersight-go/cli/client/iam_user"
	"github.com/cgascoig/intersight-go/cli/client/iam_user_group"
	"github.com/cgascoig/intersight-go/cli/client/iam_user_preference"
	"github.com/cgascoig/intersight-go/cli/client/inventory_device_info"
	"github.com/cgascoig/intersight-go/cli/client/inventory_dn_mo_binding"
	"github.com/cgascoig/intersight-go/cli/client/inventory_generic_inventory"
	"github.com/cgascoig/intersight-go/cli/client/inventory_generic_inventory_holder"
	"github.com/cgascoig/intersight-go/cli/client/inventory_request"
	"github.com/cgascoig/intersight-go/cli/client/ipmioverlan_policy"
	"github.com/cgascoig/intersight-go/cli/client/kvm_policy"
	"github.com/cgascoig/intersight-go/cli/client/license_account_license_data"
	"github.com/cgascoig/intersight-go/cli/client/license_customer_op"
	"github.com/cgascoig/intersight-go/cli/client/license_license_info"
	"github.com/cgascoig/intersight-go/cli/client/license_smartlicense_token"
	"github.com/cgascoig/intersight-go/cli/client/ls_service_profile"
	"github.com/cgascoig/intersight-go/cli/client/management_controller"
	"github.com/cgascoig/intersight-go/cli/client/management_entity"
	"github.com/cgascoig/intersight-go/cli/client/management_interface"
	"github.com/cgascoig/intersight-go/cli/client/memory_array"
	"github.com/cgascoig/intersight-go/cli/client/memory_unit"
	"github.com/cgascoig/intersight-go/cli/client/meta_definition"
	"github.com/cgascoig/intersight-go/cli/client/network_element"
	"github.com/cgascoig/intersight-go/cli/client/network_element_summary"
	"github.com/cgascoig/intersight-go/cli/client/networkconfig_policy"
	"github.com/cgascoig/intersight-go/cli/client/niaapi_apic_cco_post"
	"github.com/cgascoig/intersight-go/cli/client/niaapi_apic_field_notice"
	"github.com/cgascoig/intersight-go/cli/client/niaapi_apic_hweol"
	"github.com/cgascoig/intersight-go/cli/client/niaapi_apic_latest_maintained_release"
	"github.com/cgascoig/intersight-go/cli/client/niaapi_apic_release_recommend"
	"github.com/cgascoig/intersight-go/cli/client/niaapi_apic_sweol"
	"github.com/cgascoig/intersight-go/cli/client/niaapi_dcnm_cco_post"
	"github.com/cgascoig/intersight-go/cli/client/niaapi_dcnm_field_notice"
	"github.com/cgascoig/intersight-go/cli/client/niaapi_dcnm_hweol"
	"github.com/cgascoig/intersight-go/cli/client/niaapi_dcnm_latest_maintained_release"
	"github.com/cgascoig/intersight-go/cli/client/niaapi_dcnm_release_recommend"
	"github.com/cgascoig/intersight-go/cli/client/niaapi_dcnm_sweol"
	"github.com/cgascoig/intersight-go/cli/client/niaapi_file_downloader"
	"github.com/cgascoig/intersight-go/cli/client/niaapi_nia_metadata"
	"github.com/cgascoig/intersight-go/cli/client/niaapi_version_regex"
	"github.com/cgascoig/intersight-go/cli/client/ntp_policy"
	"github.com/cgascoig/intersight-go/cli/client/oauth_oauth_user"
	"github.com/cgascoig/intersight-go/cli/client/os_install"
	"github.com/cgascoig/intersight-go/cli/client/pci_coprocessor_card"
	"github.com/cgascoig/intersight-go/cli/client/pci_device"
	"github.com/cgascoig/intersight-go/cli/client/pci_link"
	"github.com/cgascoig/intersight-go/cli/client/pci_switch"
	"github.com/cgascoig/intersight-go/cli/client/port_group"
	"github.com/cgascoig/intersight-go/cli/client/port_sub_group"
	"github.com/cgascoig/intersight-go/cli/client/processor_unit"
	"github.com/cgascoig/intersight-go/cli/client/resource_group"
	"github.com/cgascoig/intersight-go/cli/client/sdcard_policy"
	"github.com/cgascoig/intersight-go/cli/client/search_search_item"
	"github.com/cgascoig/intersight-go/cli/client/search_suggest_item"
	"github.com/cgascoig/intersight-go/cli/client/search_tag_item"
	"github.com/cgascoig/intersight-go/cli/client/security_unit"
	"github.com/cgascoig/intersight-go/cli/client/server_config_change_detail"
	"github.com/cgascoig/intersight-go/cli/client/server_config_import"
	"github.com/cgascoig/intersight-go/cli/client/server_config_result"
	"github.com/cgascoig/intersight-go/cli/client/server_config_result_entry"
	"github.com/cgascoig/intersight-go/cli/client/server_profile"
	"github.com/cgascoig/intersight-go/cli/client/smtp_policy"
	"github.com/cgascoig/intersight-go/cli/client/snmp_policy"
	"github.com/cgascoig/intersight-go/cli/client/software_hyperflex_distributable"
	"github.com/cgascoig/intersight-go/cli/client/softwarerepository_authorization"
	"github.com/cgascoig/intersight-go/cli/client/softwarerepository_operating_system_file"
	"github.com/cgascoig/intersight-go/cli/client/sol_policy"
	"github.com/cgascoig/intersight-go/cli/client/ssh_policy"
	"github.com/cgascoig/intersight-go/cli/client/storage_controller"
	"github.com/cgascoig/intersight-go/cli/client/storage_disk_group_policy"
	"github.com/cgascoig/intersight-go/cli/client/storage_enclosure"
	"github.com/cgascoig/intersight-go/cli/client/storage_flex_flash_controller"
	"github.com/cgascoig/intersight-go/cli/client/storage_flex_flash_controller_props"
	"github.com/cgascoig/intersight-go/cli/client/storage_flex_flash_physical_drive"
	"github.com/cgascoig/intersight-go/cli/client/storage_flex_flash_virtual_drive"
	"github.com/cgascoig/intersight-go/cli/client/storage_flex_util_controller"
	"github.com/cgascoig/intersight-go/cli/client/storage_flex_util_physical_drive"
	"github.com/cgascoig/intersight-go/cli/client/storage_flex_util_virtual_drive"
	"github.com/cgascoig/intersight-go/cli/client/storage_physical_disk"
	"github.com/cgascoig/intersight-go/cli/client/storage_physical_disk_extension"
	"github.com/cgascoig/intersight-go/cli/client/storage_physical_disk_usage"
	"github.com/cgascoig/intersight-go/cli/client/storage_pure_array"
	"github.com/cgascoig/intersight-go/cli/client/storage_pure_controller"
	"github.com/cgascoig/intersight-go/cli/client/storage_pure_disk"
	"github.com/cgascoig/intersight-go/cli/client/storage_pure_host"
	"github.com/cgascoig/intersight-go/cli/client/storage_pure_host_lun"
	"github.com/cgascoig/intersight-go/cli/client/storage_pure_port"
	"github.com/cgascoig/intersight-go/cli/client/storage_pure_protection_group"
	"github.com/cgascoig/intersight-go/cli/client/storage_pure_protection_group_snapshot"
	"github.com/cgascoig/intersight-go/cli/client/storage_pure_replication_schedule"
	"github.com/cgascoig/intersight-go/cli/client/storage_pure_snapshot_schedule"
	"github.com/cgascoig/intersight-go/cli/client/storage_pure_volume"
	"github.com/cgascoig/intersight-go/cli/client/storage_pure_volume_snapshot"
	"github.com/cgascoig/intersight-go/cli/client/storage_sas_expander"
	"github.com/cgascoig/intersight-go/cli/client/storage_storage_policy"
	"github.com/cgascoig/intersight-go/cli/client/storage_vd_member_ep"
	"github.com/cgascoig/intersight-go/cli/client/storage_virtual_drive"
	"github.com/cgascoig/intersight-go/cli/client/storage_virtual_drive_extension"
	"github.com/cgascoig/intersight-go/cli/client/syslog_policy"
	"github.com/cgascoig/intersight-go/cli/client/tam_advisory_instance"
	"github.com/cgascoig/intersight-go/cli/client/tam_security_advisory"
	"github.com/cgascoig/intersight-go/cli/client/task_pure_storage_scoped_inventory"
	"github.com/cgascoig/intersight-go/cli/client/task_workflow_action"
	"github.com/cgascoig/intersight-go/cli/client/telemetry_time_series"
	"github.com/cgascoig/intersight-go/cli/client/terminal_audit_log"
	"github.com/cgascoig/intersight-go/cli/client/testcrypt_administrator"
	"github.com/cgascoig/intersight-go/cli/client/testcrypt_credential"
	"github.com/cgascoig/intersight-go/cli/client/testcrypt_read_only_user"
	"github.com/cgascoig/intersight-go/cli/client/testcrypt_shadow_credential"
	"github.com/cgascoig/intersight-go/cli/client/testcrypt_token_api"
	"github.com/cgascoig/intersight-go/cli/client/top_system"
	"github.com/cgascoig/intersight-go/cli/client/vmedia_policy"
	"github.com/cgascoig/intersight-go/cli/client/vnic_eth_adapter_policy"
	"github.com/cgascoig/intersight-go/cli/client/vnic_eth_if"
	"github.com/cgascoig/intersight-go/cli/client/vnic_eth_network_policy"
	"github.com/cgascoig/intersight-go/cli/client/vnic_eth_qos_policy"
	"github.com/cgascoig/intersight-go/cli/client/vnic_fc_adapter_policy"
	"github.com/cgascoig/intersight-go/cli/client/vnic_fc_if"
	"github.com/cgascoig/intersight-go/cli/client/vnic_fc_network_policy"
	"github.com/cgascoig/intersight-go/cli/client/vnic_fc_qos_policy"
	"github.com/cgascoig/intersight-go/cli/client/vnic_lan_connectivity_policy"
	"github.com/cgascoig/intersight-go/cli/client/vnic_san_connectivity_policy"
	"github.com/cgascoig/intersight-go/cli/client/workflow_batch_api_executor"
	"github.com/cgascoig/intersight-go/cli/client/workflow_build_task_meta"
	"github.com/cgascoig/intersight-go/cli/client/workflow_build_task_meta_owner"
	"github.com/cgascoig/intersight-go/cli/client/workflow_catalog"
	"github.com/cgascoig/intersight-go/cli/client/workflow_pending_dynamic_workflow_info"
	"github.com/cgascoig/intersight-go/cli/client/workflow_task_definition"
	"github.com/cgascoig/intersight-go/cli/client/workflow_task_info"
	"github.com/cgascoig/intersight-go/cli/client/workflow_task_meta"
	"github.com/cgascoig/intersight-go/cli/client/workflow_workflow_definition"
	"github.com/cgascoig/intersight-go/cli/client/workflow_workflow_info"
	"github.com/cgascoig/intersight-go/cli/client/workflow_workflow_meta"
)

func runCmd(cmd *cobra.Command, args []string) {
	fmt.Printf("Running command %s with args %v", cmd.Use, args)
}

type ResultHandler = func(result interface{}, err error)

func GetCommands(transport *httptransport.Runtime, resultHandler ResultHandler) *cobra.Command {
	rootCmd :=
		func() *cobra.Command {
			cmd := &cobra.Command{
				Use: "",
			}

			cmd.AddCommand(
				func() *cobra.Command {
					cmd := &cobra.Command{
						Use: "delete",
					}

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "adapter",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "configpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := adapter_config_policy.NewDeleteAdapterConfigPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.AdapterConfigPolicy.DeleteAdapterConfigPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "appliance",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "backups",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := appliance_backup.NewDeleteApplianceBackupsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ApplianceBackup.DeleteApplianceBackupsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "restores",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := appliance_restore.NewDeleteApplianceRestoresMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ApplianceRestore.DeleteApplianceRestoresMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "asset",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "deviceclaims",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := asset_device_claim.NewDeleteAssetDeviceClaimsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.AssetDeviceClaim.DeleteAssetDeviceClaimsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "deviceregistrations",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := asset_device_registration.NewDeleteAssetDeviceRegistrationsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.AssetDeviceRegistration.DeleteAssetDeviceRegistrationsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "manageddevices",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := asset_managed_device.NewDeleteAssetManagedDevicesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.AssetManagedDevice.DeleteAssetManagedDevicesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "bios",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := bios_policy.NewDeleteBiosPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.BiosPolicy.DeleteBiosPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "boot",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "precisionpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := boot_precision_policy.NewDeleteBootPrecisionPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.BootPrecisionPolicy.DeleteBootPrecisionPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "cvd",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "deploymenttasks",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := cvd_deployment_task.NewDeleteCvdDeploymentTasksMoidParams()

													params.Moid = args[0]

													res, err := apiClient.CvdDeploymentTask.DeleteCvdDeploymentTasksMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "templates",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := cvd_template.NewDeleteCvdTemplatesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.CvdTemplate.DeleteCvdTemplatesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "validationtasks",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := cvd_validation_task.NewDeleteCvdValidationTasksMoidParams()

													params.Moid = args[0]

													res, err := apiClient.CvdValidationTask.DeleteCvdValidationTasksMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "deviceconnector",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := deviceconnector_policy.NewDeleteDeviceconnectorPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.DeviceconnectorPolicy.DeleteDeviceconnectorPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "firmware",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "distributables",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := firmware_distributable.NewDeleteFirmwareDistributablesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.FirmwareDistributable.DeleteFirmwareDistributablesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "driverdistributables",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := firmware_driver_distributable.NewDeleteFirmwareDriverDistributablesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.FirmwareDriverDistributable.DeleteFirmwareDriverDistributablesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "serverconfigurationutilitydistributables",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := firmware_server_configuration_utility_distributable.NewDeleteFirmwareServerConfigurationUtilityDistributablesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.FirmwareServerConfigurationUtilityDistributable.DeleteFirmwareServerConfigurationUtilityDistributablesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "upgrades",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := firmware_upgrade.NewDeleteFirmwareUpgradesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.FirmwareUpgrade.DeleteFirmwareUpgradesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "hcl",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "hyperflexsoftwarecompatibilityinfos",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hcl_hyperflex_software_compatibility_info.NewDeleteHclHyperflexSoftwareCompatibilityInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HclHyperflexSoftwareCompatibilityInfo.DeleteHclHyperflexSoftwareCompatibilityInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "hyperflex",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "appcatalogs",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_app_catalog.NewDeleteHyperflexAppCatalogsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexAppCatalog.DeleteHyperflexAppCatalogsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "autosupportpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_auto_support_policy.NewDeleteHyperflexAutoSupportPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexAutoSupportPolicy.DeleteHyperflexAutoSupportPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "capabilityinfos",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_capability_info.NewDeleteHyperflexCapabilityInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexCapabilityInfo.DeleteHyperflexCapabilityInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "clusternetworkpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_cluster_network_policy.NewDeleteHyperflexClusterNetworkPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexClusterNetworkPolicy.DeleteHyperflexClusterNetworkPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "clusterprofiles",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_cluster_profile.NewDeleteHyperflexClusterProfilesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexClusterProfile.DeleteHyperflexClusterProfilesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "clusterstoragepolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_cluster_storage_policy.NewDeleteHyperflexClusterStoragePoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexClusterStoragePolicy.DeleteHyperflexClusterStoragePoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "extfcstoragepolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_ext_fc_storage_policy.NewDeleteHyperflexExtFcStoragePoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexExtFcStoragePolicy.DeleteHyperflexExtFcStoragePoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "extiscsistoragepolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_ext_iscsi_storage_policy.NewDeleteHyperflexExtIscsiStoragePoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexExtIscsiStoragePolicy.DeleteHyperflexExtIscsiStoragePoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "featurelimitexternals",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_feature_limit_external.NewDeleteHyperflexFeatureLimitExternalsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexFeatureLimitExternal.DeleteHyperflexFeatureLimitExternalsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "featurelimitinternals",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_feature_limit_internal.NewDeleteHyperflexFeatureLimitInternalsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexFeatureLimitInternal.DeleteHyperflexFeatureLimitInternalsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "hxdpversions",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_hxdp_version.NewDeleteHyperflexHxdpVersionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexHxdpVersion.DeleteHyperflexHxdpVersionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "initiatehxclusterupgrades",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_initiate_hx_cluster_upgrade.NewDeleteHyperflexInitiateHxClusterUpgradesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexInitiateHxClusterUpgrade.DeleteHyperflexInitiateHxClusterUpgradesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "localcredentialpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_local_credential_policy.NewDeleteHyperflexLocalCredentialPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexLocalCredentialPolicy.DeleteHyperflexLocalCredentialPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "nodeconfigpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_node_config_policy.NewDeleteHyperflexNodeConfigPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexNodeConfigPolicy.DeleteHyperflexNodeConfigPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "nodeprofiles",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_node_profile.NewDeleteHyperflexNodeProfilesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexNodeProfile.DeleteHyperflexNodeProfilesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "proxysettingpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_proxy_setting_policy.NewDeleteHyperflexProxySettingPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexProxySettingPolicy.DeleteHyperflexProxySettingPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "serverfirmwareversions",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_server_firmware_version.NewDeleteHyperflexServerFirmwareVersionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexServerFirmwareVersion.DeleteHyperflexServerFirmwareVersionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "servermodels",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_server_model.NewDeleteHyperflexServerModelsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexServerModel.DeleteHyperflexServerModelsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "softwareversionpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_software_version_policy.NewDeleteHyperflexSoftwareVersionPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexSoftwareVersionPolicy.DeleteHyperflexSoftwareVersionPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "sysconfigpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_sys_config_policy.NewDeleteHyperflexSysConfigPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexSysConfigPolicy.DeleteHyperflexSysConfigPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ucsmconfigpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_ucsm_config_policy.NewDeleteHyperflexUcsmConfigPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexUcsmConfigPolicy.DeleteHyperflexUcsmConfigPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "vcenterconfigpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_vcenter_config_policy.NewDeleteHyperflexVcenterConfigPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexVcenterConfigPolicy.DeleteHyperflexVcenterConfigPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "iaas",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ucsdinfos",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iaas_ucsd_info.NewDeleteIaasUcsdInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IaasUcsdInfo.DeleteIaasUcsdInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "iam",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "accounts",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_account.NewDeleteIamAccountsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamAccount.DeleteIamAccountsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "apikeys",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_api_key.NewDeleteIamAPIKeysMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamAPIKey.DeleteIamAPIKeysMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "endpointuserpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_end_point_user_policy.NewDeleteIamEndPointUserPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamEndPointUserPolicy.DeleteIamEndPointUserPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "endpointuserroles",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_end_point_user_role.NewDeleteIamEndPointUserRolesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamEndPointUserRole.DeleteIamEndPointUserRolesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "endpointusers",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_end_point_user.NewDeleteIamEndPointUsersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamEndPointUser.DeleteIamEndPointUsersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "idps",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_idp.NewDeleteIamIdpsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamIdp.DeleteIamIdpsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ldapgroups",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_ldap_group.NewDeleteIamLdapGroupsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamLdapGroup.DeleteIamLdapGroupsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ldappolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_ldap_policy.NewDeleteIamLdapPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamLdapPolicy.DeleteIamLdapPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ldapproviders",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_ldap_provider.NewDeleteIamLdapProvidersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamLdapProvider.DeleteIamLdapProvidersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "qualifiers",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_qualifier.NewDeleteIamQualifiersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamQualifier.DeleteIamQualifiersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "sessions",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_session.NewDeleteIamSessionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamSession.DeleteIamSessionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "trustpoints",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_trust_point.NewDeleteIamTrustPointsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamTrustPoint.DeleteIamTrustPointsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "usergroups",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_user_group.NewDeleteIamUserGroupsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamUserGroup.DeleteIamUserGroupsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "users",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_user.NewDeleteIamUsersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamUser.DeleteIamUsersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "ipmioverlan",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := ipmioverlan_policy.NewDeleteIpmioverlanPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IpmioverlanPolicy.DeleteIpmioverlanPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "kvm",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := kvm_policy.NewDeleteKvmPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.KvmPolicy.DeleteKvmPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "meta",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "definitions",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := meta_definition.NewDeleteMetaDefinitionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.MetaDefinition.DeleteMetaDefinitionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "networkconfig",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := networkconfig_policy.NewDeleteNetworkconfigPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NetworkconfigPolicy.DeleteNetworkconfigPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "ntp",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := ntp_policy.NewDeleteNtpPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NtpPolicy.DeleteNtpPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "oauth",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "oauthusers",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := oauth_oauth_user.NewDeleteOauthOauthUsersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.OauthOauthUser.DeleteOauthOauthUsersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "resource",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "groups",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := resource_group.NewDeleteResourceGroupsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ResourceGroup.DeleteResourceGroupsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "sdcard",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := sdcard_policy.NewDeleteSdcardPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SdcardPolicy.DeleteSdcardPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "server",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "profiles",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := server_profile.NewDeleteServerProfilesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ServerProfile.DeleteServerProfilesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "smtp",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := smtp_policy.NewDeleteSMTPPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SMTPPolicy.DeleteSMTPPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "snmp",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := snmp_policy.NewDeleteSnmpPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SnmpPolicy.DeleteSnmpPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "software",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "hyperflexdistributables",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := software_hyperflex_distributable.NewDeleteSoftwareHyperflexDistributablesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SoftwareHyperflexDistributable.DeleteSoftwareHyperflexDistributablesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "softwarerepository",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "operatingsystemfiles",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := softwarerepository_operating_system_file.NewDeleteSoftwarerepositoryOperatingSystemFilesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SoftwarerepositoryOperatingSystemFile.DeleteSoftwarerepositoryOperatingSystemFilesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "sol",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := sol_policy.NewDeleteSolPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SolPolicy.DeleteSolPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "ssh",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := ssh_policy.NewDeleteSSHPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SSHPolicy.DeleteSSHPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "storage",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "diskgrouppolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_disk_group_policy.NewDeleteStorageDiskGroupPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageDiskGroupPolicy.DeleteStorageDiskGroupPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "storagepolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_storage_policy.NewDeleteStorageStoragePoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageStoragePolicy.DeleteStorageStoragePoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "syslog",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := syslog_policy.NewDeleteSyslogPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SyslogPolicy.DeleteSyslogPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "tam",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "advisoryinstances",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := tam_advisory_instance.NewDeleteTamAdvisoryInstancesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TamAdvisoryInstance.DeleteTamAdvisoryInstancesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "securityadvisories",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := tam_security_advisory.NewDeleteTamSecurityAdvisoriesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TamSecurityAdvisory.DeleteTamSecurityAdvisoriesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "testcrypt",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "credentials",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := testcrypt_credential.NewDeleteTestcryptCredentialsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TestcryptCredential.DeleteTestcryptCredentialsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "readonlyusers",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := testcrypt_read_only_user.NewDeleteTestcryptReadOnlyUsersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TestcryptReadOnlyUser.DeleteTestcryptReadOnlyUsersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "tokenapis",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := testcrypt_token_api.NewDeleteTestcryptTokenApisMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TestcryptTokenAPI.DeleteTestcryptTokenApisMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "vmedia",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vmedia_policy.NewDeleteVmediaPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VmediaPolicy.DeleteVmediaPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "vnic",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ethadapterpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_eth_adapter_policy.NewDeleteVnicEthAdapterPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicEthAdapterPolicy.DeleteVnicEthAdapterPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ethifs",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_eth_if.NewDeleteVnicEthIfsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicEthIf.DeleteVnicEthIfsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ethnetworkpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_eth_network_policy.NewDeleteVnicEthNetworkPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicEthNetworkPolicy.DeleteVnicEthNetworkPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ethqospolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_eth_qos_policy.NewDeleteVnicEthQosPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicEthQosPolicy.DeleteVnicEthQosPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "fcadapterpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_fc_adapter_policy.NewDeleteVnicFcAdapterPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicFcAdapterPolicy.DeleteVnicFcAdapterPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "fcifs",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_fc_if.NewDeleteVnicFcIfsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicFcIf.DeleteVnicFcIfsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "fcnetworkpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_fc_network_policy.NewDeleteVnicFcNetworkPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicFcNetworkPolicy.DeleteVnicFcNetworkPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "fcqospolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_fc_qos_policy.NewDeleteVnicFcQosPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicFcQosPolicy.DeleteVnicFcQosPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "lanconnectivitypolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_lan_connectivity_policy.NewDeleteVnicLanConnectivityPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicLanConnectivityPolicy.DeleteVnicLanConnectivityPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "sanconnectivitypolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_san_connectivity_policy.NewDeleteVnicSanConnectivityPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicSanConnectivityPolicy.DeleteVnicSanConnectivityPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "workflow",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "batchapiexecutors",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := workflow_batch_api_executor.NewDeleteWorkflowBatchAPIExecutorsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.WorkflowBatchAPIExecutor.DeleteWorkflowBatchAPIExecutorsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "taskdefinitions",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := workflow_task_definition.NewDeleteWorkflowTaskDefinitionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.WorkflowTaskDefinition.DeleteWorkflowTaskDefinitionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "workflowdefinitions",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := workflow_workflow_definition.NewDeleteWorkflowWorkflowDefinitionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.WorkflowWorkflowDefinition.DeleteWorkflowWorkflowDefinitionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "workflowinfos",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := workflow_workflow_info.NewDeleteWorkflowWorkflowInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.WorkflowWorkflowInfo.DeleteWorkflowWorkflowInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					return cmd
				}())

			cmd.AddCommand(
				func() *cobra.Command {
					cmd := &cobra.Command{
						Use: "get",
					}

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "aaa",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "auditrecords",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := aaa_audit_record.NewGetAaaAuditRecordsParams()

											res, err := apiClient.AaaAuditRecord.GetAaaAuditRecords(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := aaa_audit_record.NewGetAaaAuditRecordsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.AaaAuditRecord.GetAaaAuditRecordsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "adapter",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "configpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := adapter_config_policy.NewGetAdapterConfigPoliciesParams()

											res, err := apiClient.AdapterConfigPolicy.GetAdapterConfigPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := adapter_config_policy.NewGetAdapterConfigPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.AdapterConfigPolicy.GetAdapterConfigPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "extethinterfaces",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := adapter_ext_eth_interface.NewGetAdapterExtEthInterfacesParams()

											res, err := apiClient.AdapterExtEthInterface.GetAdapterExtEthInterfaces(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := adapter_ext_eth_interface.NewGetAdapterExtEthInterfacesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.AdapterExtEthInterface.GetAdapterExtEthInterfacesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "hostethinterfaces",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := adapter_host_eth_interface.NewGetAdapterHostEthInterfacesParams()

											res, err := apiClient.AdapterHostEthInterface.GetAdapterHostEthInterfaces(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := adapter_host_eth_interface.NewGetAdapterHostEthInterfacesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.AdapterHostEthInterface.GetAdapterHostEthInterfacesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "hostfcinterfaces",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := adapter_host_fc_interface.NewGetAdapterHostFcInterfacesParams()

											res, err := apiClient.AdapterHostFcInterface.GetAdapterHostFcInterfaces(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := adapter_host_fc_interface.NewGetAdapterHostFcInterfacesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.AdapterHostFcInterface.GetAdapterHostFcInterfacesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "hostiscsiinterfaces",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := adapter_host_iscsi_interface.NewGetAdapterHostIscsiInterfacesParams()

											res, err := apiClient.AdapterHostIscsiInterface.GetAdapterHostIscsiInterfaces(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := adapter_host_iscsi_interface.NewGetAdapterHostIscsiInterfacesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.AdapterHostIscsiInterface.GetAdapterHostIscsiInterfacesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "units",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := adapter_unit.NewGetAdapterUnitsParams()

											res, err := apiClient.AdapterUnit.GetAdapterUnits(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := adapter_unit.NewGetAdapterUnitsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.AdapterUnit.GetAdapterUnitsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "appliance",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "backuppolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := appliance_backup_policy.NewGetApplianceBackupPoliciesParams()

											res, err := apiClient.ApplianceBackupPolicy.GetApplianceBackupPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := appliance_backup_policy.NewGetApplianceBackupPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ApplianceBackupPolicy.GetApplianceBackupPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "backups",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := appliance_backup.NewGetApplianceBackupsParams()

											res, err := apiClient.ApplianceBackup.GetApplianceBackups(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := appliance_backup.NewGetApplianceBackupsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ApplianceBackup.GetApplianceBackupsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "dataexportpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := appliance_data_export_policy.NewGetApplianceDataExportPoliciesParams()

											res, err := apiClient.ApplianceDataExportPolicy.GetApplianceDataExportPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := appliance_data_export_policy.NewGetApplianceDataExportPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ApplianceDataExportPolicy.GetApplianceDataExportPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "deviceclaims",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := appliance_device_claim.NewGetApplianceDeviceClaimsParams()

											res, err := apiClient.ApplianceDeviceClaim.GetApplianceDeviceClaims(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := appliance_device_claim.NewGetApplianceDeviceClaimsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ApplianceDeviceClaim.GetApplianceDeviceClaimsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "diagsettings",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := appliance_diag_setting.NewGetApplianceDiagSettingsParams()

											res, err := apiClient.ApplianceDiagSetting.GetApplianceDiagSettings(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := appliance_diag_setting.NewGetApplianceDiagSettingsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ApplianceDiagSetting.GetApplianceDiagSettingsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "imagebundles",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := appliance_image_bundle.NewGetApplianceImageBundlesParams()

											res, err := apiClient.ApplianceImageBundle.GetApplianceImageBundles(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := appliance_image_bundle.NewGetApplianceImageBundlesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ApplianceImageBundle.GetApplianceImageBundlesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "nodeinfos",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := appliance_node_info.NewGetApplianceNodeInfosParams()

											res, err := apiClient.ApplianceNodeInfo.GetApplianceNodeInfos(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := appliance_node_info.NewGetApplianceNodeInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ApplianceNodeInfo.GetApplianceNodeInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "restores",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := appliance_restore.NewGetApplianceRestoresParams()

											res, err := apiClient.ApplianceRestore.GetApplianceRestores(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := appliance_restore.NewGetApplianceRestoresMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ApplianceRestore.GetApplianceRestoresMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "setupinfos",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := appliance_setup_info.NewGetApplianceSetupInfosParams()

											res, err := apiClient.ApplianceSetupInfo.GetApplianceSetupInfos(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := appliance_setup_info.NewGetApplianceSetupInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ApplianceSetupInfo.GetApplianceSetupInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "systeminfos",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := appliance_system_info.NewGetApplianceSystemInfosParams()

											res, err := apiClient.ApplianceSystemInfo.GetApplianceSystemInfos(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := appliance_system_info.NewGetApplianceSystemInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ApplianceSystemInfo.GetApplianceSystemInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "upgradepolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := appliance_upgrade_policy.NewGetApplianceUpgradePoliciesParams()

											res, err := apiClient.ApplianceUpgradePolicy.GetApplianceUpgradePolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := appliance_upgrade_policy.NewGetApplianceUpgradePoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ApplianceUpgradePolicy.GetApplianceUpgradePoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "upgrades",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := appliance_upgrade.NewGetApplianceUpgradesParams()

											res, err := apiClient.ApplianceUpgrade.GetApplianceUpgrades(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := appliance_upgrade.NewGetApplianceUpgradesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ApplianceUpgrade.GetApplianceUpgradesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "asset",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "clustermembers",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := asset_cluster_member.NewGetAssetClusterMembersParams()

											res, err := apiClient.AssetClusterMember.GetAssetClusterMembers(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := asset_cluster_member.NewGetAssetClusterMembersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.AssetClusterMember.GetAssetClusterMembersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "deviceconfigurations",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := asset_device_configuration.NewGetAssetDeviceConfigurationsParams()

											res, err := apiClient.AssetDeviceConfiguration.GetAssetDeviceConfigurations(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := asset_device_configuration.NewGetAssetDeviceConfigurationsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.AssetDeviceConfiguration.GetAssetDeviceConfigurationsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "deviceconnectormanagers",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := asset_device_connector_manager.NewGetAssetDeviceConnectorManagersParams()

											res, err := apiClient.AssetDeviceConnectorManager.GetAssetDeviceConnectorManagers(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := asset_device_connector_manager.NewGetAssetDeviceConnectorManagersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.AssetDeviceConnectorManager.GetAssetDeviceConnectorManagersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "deviceregistrations",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := asset_device_registration.NewGetAssetDeviceRegistrationsParams()

											res, err := apiClient.AssetDeviceRegistration.GetAssetDeviceRegistrations(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := asset_device_registration.NewGetAssetDeviceRegistrationsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.AssetDeviceRegistration.GetAssetDeviceRegistrationsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "manageddevices",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := asset_managed_device.NewGetAssetManagedDevicesParams()

											res, err := apiClient.AssetManagedDevice.GetAssetManagedDevices(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := asset_managed_device.NewGetAssetManagedDevicesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.AssetManagedDevice.GetAssetManagedDevicesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "bios",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "bootmodes",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := bios_boot_mode.NewGetBiosBootModesParams()

											res, err := apiClient.BiosBootMode.GetBiosBootModes(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := bios_boot_mode.NewGetBiosBootModesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.BiosBootMode.GetBiosBootModesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := bios_policy.NewGetBiosPoliciesParams()

											res, err := apiClient.BiosPolicy.GetBiosPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := bios_policy.NewGetBiosPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.BiosPolicy.GetBiosPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "units",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := bios_unit.NewGetBiosUnitsParams()

											res, err := apiClient.BiosUnit.GetBiosUnits(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := bios_unit.NewGetBiosUnitsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.BiosUnit.GetBiosUnitsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "boot",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "devicebootmodes",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := boot_device_boot_mode.NewGetBootDeviceBootModesParams()

											res, err := apiClient.BootDeviceBootMode.GetBootDeviceBootModes(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := boot_device_boot_mode.NewGetBootDeviceBootModesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.BootDeviceBootMode.GetBootDeviceBootModesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "precisionpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := boot_precision_policy.NewGetBootPrecisionPoliciesParams()

											res, err := apiClient.BootPrecisionPolicy.GetBootPrecisionPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := boot_precision_policy.NewGetBootPrecisionPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.BootPrecisionPolicy.GetBootPrecisionPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "compute",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "blades",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := compute_blade.NewGetComputeBladesParams()

											res, err := apiClient.ComputeBlade.GetComputeBlades(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := compute_blade.NewGetComputeBladesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ComputeBlade.GetComputeBladesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "boards",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := compute_board.NewGetComputeBoardsParams()

											res, err := apiClient.ComputeBoard.GetComputeBoards(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := compute_board.NewGetComputeBoardsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ComputeBoard.GetComputeBoardsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "physicalsummaries",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := compute_physical_summary.NewGetComputePhysicalSummariesParams()

											res, err := apiClient.ComputePhysicalSummary.GetComputePhysicalSummaries(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := compute_physical_summary.NewGetComputePhysicalSummariesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ComputePhysicalSummary.GetComputePhysicalSummariesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "rackunits",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := compute_rack_unit.NewGetComputeRackUnitsParams()

											res, err := apiClient.ComputeRackUnit.GetComputeRackUnits(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := compute_rack_unit.NewGetComputeRackUnitsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ComputeRackUnit.GetComputeRackUnitsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "serversettings",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := compute_server_setting.NewGetComputeServerSettingsParams()

											res, err := apiClient.ComputeServerSetting.GetComputeServerSettings(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := compute_server_setting.NewGetComputeServerSettingsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ComputeServerSetting.GetComputeServerSettingsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "cond",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "alarms",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := cond_alarm.NewGetCondAlarmsParams()

											res, err := apiClient.CondAlarm.GetCondAlarms(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := cond_alarm.NewGetCondAlarmsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.CondAlarm.GetCondAlarmsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "hclstatusdetails",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := cond_hcl_status_detail.NewGetCondHclStatusDetailsParams()

											res, err := apiClient.CondHclStatusDetail.GetCondHclStatusDetails(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := cond_hcl_status_detail.NewGetCondHclStatusDetailsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.CondHclStatusDetail.GetCondHclStatusDetailsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "hclstatuses",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := cond_hcl_status.NewGetCondHclStatusesParams()

											res, err := apiClient.CondHclStatus.GetCondHclStatuses(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := cond_hcl_status.NewGetCondHclStatusesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.CondHclStatus.GetCondHclStatusesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "hclstatusjobs",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := cond_hcl_status_job.NewGetCondHclStatusJobsParams()

											res, err := apiClient.CondHclStatusJob.GetCondHclStatusJobs(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := cond_hcl_status_job.NewGetCondHclStatusJobsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.CondHclStatusJob.GetCondHclStatusJobsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "cvd",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "deploymenttasks",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := cvd_deployment_task.NewGetCvdDeploymentTasksParams()

											res, err := apiClient.CvdDeploymentTask.GetCvdDeploymentTasks(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := cvd_deployment_task.NewGetCvdDeploymentTasksMoidParams()

													params.Moid = args[0]

													res, err := apiClient.CvdDeploymentTask.GetCvdDeploymentTasksMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "templates",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := cvd_template.NewGetCvdTemplatesParams()

											res, err := apiClient.CvdTemplate.GetCvdTemplates(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := cvd_template.NewGetCvdTemplatesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.CvdTemplate.GetCvdTemplatesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "validationtasks",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := cvd_validation_task.NewGetCvdValidationTasksParams()

											res, err := apiClient.CvdValidationTask.GetCvdValidationTasks(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := cvd_validation_task.NewGetCvdValidationTasksMoidParams()

													params.Moid = args[0]

													res, err := apiClient.CvdValidationTask.GetCvdValidationTasksMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "deviceconnector",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := deviceconnector_policy.NewGetDeviceconnectorPoliciesParams()

											res, err := apiClient.DeviceconnectorPolicy.GetDeviceconnectorPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := deviceconnector_policy.NewGetDeviceconnectorPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.DeviceconnectorPolicy.GetDeviceconnectorPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "deviceinfo",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "serialnumberinfos",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := deviceinfo_serial_number_info.NewGetDeviceinfoSerialNumberInfosParams()

											res, err := apiClient.DeviceinfoSerialNumberInfo.GetDeviceinfoSerialNumberInfos(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := deviceinfo_serial_number_info.NewGetDeviceinfoSerialNumberInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.DeviceinfoSerialNumberInfo.GetDeviceinfoSerialNumberInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "equipment",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "chasses",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := equipment_chassis.NewGetEquipmentChassesParams()

											res, err := apiClient.EquipmentChassis.GetEquipmentChasses(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_chassis.NewGetEquipmentChassesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentChassis.GetEquipmentChassesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "devicesummaries",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := equipment_device_summary.NewGetEquipmentDeviceSummariesParams()

											res, err := apiClient.EquipmentDeviceSummary.GetEquipmentDeviceSummaries(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_device_summary.NewGetEquipmentDeviceSummariesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentDeviceSummary.GetEquipmentDeviceSummariesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "fanmodules",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := equipment_fan_module.NewGetEquipmentFanModulesParams()

											res, err := apiClient.EquipmentFanModule.GetEquipmentFanModules(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_fan_module.NewGetEquipmentFanModulesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentFanModule.GetEquipmentFanModulesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "fans",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := equipment_fan.NewGetEquipmentFansParams()

											res, err := apiClient.EquipmentFan.GetEquipmentFans(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_fan.NewGetEquipmentFansMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentFan.GetEquipmentFansMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "fexes",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := equipment_fex.NewGetEquipmentFexesParams()

											res, err := apiClient.EquipmentFex.GetEquipmentFexes(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_fex.NewGetEquipmentFexesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentFex.GetEquipmentFexesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "iocards",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := equipment_io_card.NewGetEquipmentIoCardsParams()

											res, err := apiClient.EquipmentIoCard.GetEquipmentIoCards(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_io_card.NewGetEquipmentIoCardsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentIoCard.GetEquipmentIoCardsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ioexpanders",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := equipment_io_expander.NewGetEquipmentIoExpandersParams()

											res, err := apiClient.EquipmentIoExpander.GetEquipmentIoExpanders(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_io_expander.NewGetEquipmentIoExpandersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentIoExpander.GetEquipmentIoExpandersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "locatorleds",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := equipment_locator_led.NewGetEquipmentLocatorLedsParams()

											res, err := apiClient.EquipmentLocatorLed.GetEquipmentLocatorLeds(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_locator_led.NewGetEquipmentLocatorLedsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentLocatorLed.GetEquipmentLocatorLedsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "psus",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := equipment_psu.NewGetEquipmentPsusParams()

											res, err := apiClient.EquipmentPsu.GetEquipmentPsus(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_psu.NewGetEquipmentPsusMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentPsu.GetEquipmentPsusMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "rackenclosures",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := equipment_rack_enclosure.NewGetEquipmentRackEnclosuresParams()

											res, err := apiClient.EquipmentRackEnclosure.GetEquipmentRackEnclosures(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_rack_enclosure.NewGetEquipmentRackEnclosuresMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentRackEnclosure.GetEquipmentRackEnclosuresMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "rackenclosureslots",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := equipment_rack_enclosure_slot.NewGetEquipmentRackEnclosureSlotsParams()

											res, err := apiClient.EquipmentRackEnclosureSlot.GetEquipmentRackEnclosureSlots(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_rack_enclosure_slot.NewGetEquipmentRackEnclosureSlotsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentRackEnclosureSlot.GetEquipmentRackEnclosureSlotsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "switchcards",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := equipment_switch_card.NewGetEquipmentSwitchCardsParams()

											res, err := apiClient.EquipmentSwitchCard.GetEquipmentSwitchCards(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_switch_card.NewGetEquipmentSwitchCardsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentSwitchCard.GetEquipmentSwitchCardsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "systemiocontrollers",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := equipment_system_io_controller.NewGetEquipmentSystemIoControllersParams()

											res, err := apiClient.EquipmentSystemIoController.GetEquipmentSystemIoControllers(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_system_io_controller.NewGetEquipmentSystemIoControllersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentSystemIoController.GetEquipmentSystemIoControllersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "tpms",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := equipment_tpm.NewGetEquipmentTpmsParams()

											res, err := apiClient.EquipmentTpm.GetEquipmentTpms(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_tpm.NewGetEquipmentTpmsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentTpm.GetEquipmentTpmsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "ether",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "physicalports",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := ether_physical_port.NewGetEtherPhysicalPortsParams()

											res, err := apiClient.EtherPhysicalPort.GetEtherPhysicalPorts(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := ether_physical_port.NewGetEtherPhysicalPortsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EtherPhysicalPort.GetEtherPhysicalPortsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "externalsite",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "authorizations",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := externalsite_authorization.NewGetExternalsiteAuthorizationsParams()

											res, err := apiClient.ExternalsiteAuthorization.GetExternalsiteAuthorizations(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := externalsite_authorization.NewGetExternalsiteAuthorizationsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ExternalsiteAuthorization.GetExternalsiteAuthorizationsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "fault",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "instances",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := fault_instance.NewGetFaultInstancesParams()

											res, err := apiClient.FaultInstance.GetFaultInstances(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := fault_instance.NewGetFaultInstancesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.FaultInstance.GetFaultInstancesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "fc",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "physicalports",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := fc_physical_port.NewGetFcPhysicalPortsParams()

											res, err := apiClient.FcPhysicalPort.GetFcPhysicalPorts(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := fc_physical_port.NewGetFcPhysicalPortsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.FcPhysicalPort.GetFcPhysicalPortsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "firmware",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "distributables",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := firmware_distributable.NewGetFirmwareDistributablesParams()

											res, err := apiClient.FirmwareDistributable.GetFirmwareDistributables(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := firmware_distributable.NewGetFirmwareDistributablesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.FirmwareDistributable.GetFirmwareDistributablesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "driverdistributables",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := firmware_driver_distributable.NewGetFirmwareDriverDistributablesParams()

											res, err := apiClient.FirmwareDriverDistributable.GetFirmwareDriverDistributables(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := firmware_driver_distributable.NewGetFirmwareDriverDistributablesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.FirmwareDriverDistributable.GetFirmwareDriverDistributablesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "eulas",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := firmware_eula.NewGetFirmwareEulasParams()

											res, err := apiClient.FirmwareEula.GetFirmwareEulas(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := firmware_eula.NewGetFirmwareEulasMoidParams()

													params.Moid = args[0]

													res, err := apiClient.FirmwareEula.GetFirmwareEulasMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "runningfirmwares",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := firmware_running_firmware.NewGetFirmwareRunningFirmwaresParams()

											res, err := apiClient.FirmwareRunningFirmware.GetFirmwareRunningFirmwares(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := firmware_running_firmware.NewGetFirmwareRunningFirmwaresMoidParams()

													params.Moid = args[0]

													res, err := apiClient.FirmwareRunningFirmware.GetFirmwareRunningFirmwaresMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "serverconfigurationutilitydistributables",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := firmware_server_configuration_utility_distributable.NewGetFirmwareServerConfigurationUtilityDistributablesParams()

											res, err := apiClient.FirmwareServerConfigurationUtilityDistributable.GetFirmwareServerConfigurationUtilityDistributables(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := firmware_server_configuration_utility_distributable.NewGetFirmwareServerConfigurationUtilityDistributablesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.FirmwareServerConfigurationUtilityDistributable.GetFirmwareServerConfigurationUtilityDistributablesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "upgrades",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := firmware_upgrade.NewGetFirmwareUpgradesParams()

											res, err := apiClient.FirmwareUpgrade.GetFirmwareUpgrades(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := firmware_upgrade.NewGetFirmwareUpgradesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.FirmwareUpgrade.GetFirmwareUpgradesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "upgradestatuses",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := firmware_upgrade_status.NewGetFirmwareUpgradeStatusesParams()

											res, err := apiClient.FirmwareUpgradeStatus.GetFirmwareUpgradeStatuses(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := firmware_upgrade_status.NewGetFirmwareUpgradeStatusesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.FirmwareUpgradeStatus.GetFirmwareUpgradeStatusesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "graphics",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "cards",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := graphics_card.NewGetGraphicsCardsParams()

											res, err := apiClient.GraphicsCard.GetGraphicsCards(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := graphics_card.NewGetGraphicsCardsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.GraphicsCard.GetGraphicsCardsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "controllers",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := graphics_controller.NewGetGraphicsControllersParams()

											res, err := apiClient.GraphicsController.GetGraphicsControllers(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := graphics_controller.NewGetGraphicsControllersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.GraphicsController.GetGraphicsControllersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "hcl",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "driverimages",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hcl_driver_image.NewGetHclDriverImagesParams()

											res, err := apiClient.HclDriverImage.GetHclDriverImages(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hcl_driver_image.NewGetHclDriverImagesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HclDriverImage.GetHclDriverImagesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "exemptedcatalogs",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hcl_exempted_catalog.NewGetHclExemptedCatalogsParams()

											res, err := apiClient.HclExemptedCatalog.GetHclExemptedCatalogs(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hcl_exempted_catalog.NewGetHclExemptedCatalogsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HclExemptedCatalog.GetHclExemptedCatalogsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "hyperflexsoftwarecompatibilityinfos",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hcl_hyperflex_software_compatibility_info.NewGetHclHyperflexSoftwareCompatibilityInfosParams()

											res, err := apiClient.HclHyperflexSoftwareCompatibilityInfo.GetHclHyperflexSoftwareCompatibilityInfos(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hcl_hyperflex_software_compatibility_info.NewGetHclHyperflexSoftwareCompatibilityInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HclHyperflexSoftwareCompatibilityInfo.GetHclHyperflexSoftwareCompatibilityInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "operatingsystems",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hcl_operating_system.NewGetHclOperatingSystemsParams()

											res, err := apiClient.HclOperatingSystem.GetHclOperatingSystems(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hcl_operating_system.NewGetHclOperatingSystemsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HclOperatingSystem.GetHclOperatingSystemsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "operatingsystemvendors",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hcl_operating_system_vendor.NewGetHclOperatingSystemVendorsParams()

											res, err := apiClient.HclOperatingSystemVendor.GetHclOperatingSystemVendors(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hcl_operating_system_vendor.NewGetHclOperatingSystemVendorsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HclOperatingSystemVendor.GetHclOperatingSystemVendorsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "servicestatuses",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hcl_service_status.NewGetHclServiceStatusesParams()

											res, err := apiClient.HclServiceStatus.GetHclServiceStatuses(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hcl_service_status.NewGetHclServiceStatusesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HclServiceStatus.GetHclServiceStatusesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "hyperflex",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "alarms",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_alarm.NewGetHyperflexAlarmsParams()

											res, err := apiClient.HyperflexAlarm.GetHyperflexAlarms(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_alarm.NewGetHyperflexAlarmsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexAlarm.GetHyperflexAlarmsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "appcatalogs",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_app_catalog.NewGetHyperflexAppCatalogsParams()

											res, err := apiClient.HyperflexAppCatalog.GetHyperflexAppCatalogs(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_app_catalog.NewGetHyperflexAppCatalogsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexAppCatalog.GetHyperflexAppCatalogsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "autosupportpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_auto_support_policy.NewGetHyperflexAutoSupportPoliciesParams()

											res, err := apiClient.HyperflexAutoSupportPolicy.GetHyperflexAutoSupportPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_auto_support_policy.NewGetHyperflexAutoSupportPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexAutoSupportPolicy.GetHyperflexAutoSupportPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "capabilityinfos",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_capability_info.NewGetHyperflexCapabilityInfosParams()

											res, err := apiClient.HyperflexCapabilityInfo.GetHyperflexCapabilityInfos(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_capability_info.NewGetHyperflexCapabilityInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexCapabilityInfo.GetHyperflexCapabilityInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "clusternetworkpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_cluster_network_policy.NewGetHyperflexClusterNetworkPoliciesParams()

											res, err := apiClient.HyperflexClusterNetworkPolicy.GetHyperflexClusterNetworkPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_cluster_network_policy.NewGetHyperflexClusterNetworkPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexClusterNetworkPolicy.GetHyperflexClusterNetworkPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "clusterprofiles",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_cluster_profile.NewGetHyperflexClusterProfilesParams()

											res, err := apiClient.HyperflexClusterProfile.GetHyperflexClusterProfiles(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_cluster_profile.NewGetHyperflexClusterProfilesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexClusterProfile.GetHyperflexClusterProfilesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "clusters",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_cluster.NewGetHyperflexClustersParams()

											res, err := apiClient.HyperflexCluster.GetHyperflexClusters(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_cluster.NewGetHyperflexClustersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexCluster.GetHyperflexClustersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "clusterstoragepolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_cluster_storage_policy.NewGetHyperflexClusterStoragePoliciesParams()

											res, err := apiClient.HyperflexClusterStoragePolicy.GetHyperflexClusterStoragePolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_cluster_storage_policy.NewGetHyperflexClusterStoragePoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexClusterStoragePolicy.GetHyperflexClusterStoragePoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "configresultentries",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_config_result_entry.NewGetHyperflexConfigResultEntriesParams()

											res, err := apiClient.HyperflexConfigResultEntry.GetHyperflexConfigResultEntries(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_config_result_entry.NewGetHyperflexConfigResultEntriesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexConfigResultEntry.GetHyperflexConfigResultEntriesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "configresults",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_config_result.NewGetHyperflexConfigResultsParams()

											res, err := apiClient.HyperflexConfigResult.GetHyperflexConfigResults(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_config_result.NewGetHyperflexConfigResultsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexConfigResult.GetHyperflexConfigResultsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "extfcstoragepolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_ext_fc_storage_policy.NewGetHyperflexExtFcStoragePoliciesParams()

											res, err := apiClient.HyperflexExtFcStoragePolicy.GetHyperflexExtFcStoragePolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_ext_fc_storage_policy.NewGetHyperflexExtFcStoragePoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexExtFcStoragePolicy.GetHyperflexExtFcStoragePoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "extiscsistoragepolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_ext_iscsi_storage_policy.NewGetHyperflexExtIscsiStoragePoliciesParams()

											res, err := apiClient.HyperflexExtIscsiStoragePolicy.GetHyperflexExtIscsiStoragePolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_ext_iscsi_storage_policy.NewGetHyperflexExtIscsiStoragePoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexExtIscsiStoragePolicy.GetHyperflexExtIscsiStoragePoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "featurelimitexternals",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_feature_limit_external.NewGetHyperflexFeatureLimitExternalsParams()

											res, err := apiClient.HyperflexFeatureLimitExternal.GetHyperflexFeatureLimitExternals(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_feature_limit_external.NewGetHyperflexFeatureLimitExternalsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexFeatureLimitExternal.GetHyperflexFeatureLimitExternalsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "featurelimitinternals",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_feature_limit_internal.NewGetHyperflexFeatureLimitInternalsParams()

											res, err := apiClient.HyperflexFeatureLimitInternal.GetHyperflexFeatureLimitInternals(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_feature_limit_internal.NewGetHyperflexFeatureLimitInternalsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexFeatureLimitInternal.GetHyperflexFeatureLimitInternalsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "healths",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_health.NewGetHyperflexHealthsParams()

											res, err := apiClient.HyperflexHealth.GetHyperflexHealths(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_health.NewGetHyperflexHealthsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexHealth.GetHyperflexHealthsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "hxdpversions",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_hxdp_version.NewGetHyperflexHxdpVersionsParams()

											res, err := apiClient.HyperflexHxdpVersion.GetHyperflexHxdpVersions(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_hxdp_version.NewGetHyperflexHxdpVersionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexHxdpVersion.GetHyperflexHxdpVersionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "initiatehxclusterupgrades",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_initiate_hx_cluster_upgrade.NewGetHyperflexInitiateHxClusterUpgradesParams()

											res, err := apiClient.HyperflexInitiateHxClusterUpgrade.GetHyperflexInitiateHxClusterUpgrades(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_initiate_hx_cluster_upgrade.NewGetHyperflexInitiateHxClusterUpgradesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexInitiateHxClusterUpgrade.GetHyperflexInitiateHxClusterUpgradesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "localcredentialpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_local_credential_policy.NewGetHyperflexLocalCredentialPoliciesParams()

											res, err := apiClient.HyperflexLocalCredentialPolicy.GetHyperflexLocalCredentialPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_local_credential_policy.NewGetHyperflexLocalCredentialPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexLocalCredentialPolicy.GetHyperflexLocalCredentialPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "nodeconfigpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_node_config_policy.NewGetHyperflexNodeConfigPoliciesParams()

											res, err := apiClient.HyperflexNodeConfigPolicy.GetHyperflexNodeConfigPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_node_config_policy.NewGetHyperflexNodeConfigPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexNodeConfigPolicy.GetHyperflexNodeConfigPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "nodeprofiles",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_node_profile.NewGetHyperflexNodeProfilesParams()

											res, err := apiClient.HyperflexNodeProfile.GetHyperflexNodeProfiles(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_node_profile.NewGetHyperflexNodeProfilesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexNodeProfile.GetHyperflexNodeProfilesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "nodes",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_node.NewGetHyperflexNodesParams()

											res, err := apiClient.HyperflexNode.GetHyperflexNodes(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_node.NewGetHyperflexNodesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexNode.GetHyperflexNodesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "proxysettingpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_proxy_setting_policy.NewGetHyperflexProxySettingPoliciesParams()

											res, err := apiClient.HyperflexProxySettingPolicy.GetHyperflexProxySettingPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_proxy_setting_policy.NewGetHyperflexProxySettingPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexProxySettingPolicy.GetHyperflexProxySettingPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "serverfirmwareversions",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_server_firmware_version.NewGetHyperflexServerFirmwareVersionsParams()

											res, err := apiClient.HyperflexServerFirmwareVersion.GetHyperflexServerFirmwareVersions(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_server_firmware_version.NewGetHyperflexServerFirmwareVersionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexServerFirmwareVersion.GetHyperflexServerFirmwareVersionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "servermodels",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_server_model.NewGetHyperflexServerModelsParams()

											res, err := apiClient.HyperflexServerModel.GetHyperflexServerModels(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_server_model.NewGetHyperflexServerModelsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexServerModel.GetHyperflexServerModelsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "softwareversionpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_software_version_policy.NewGetHyperflexSoftwareVersionPoliciesParams()

											res, err := apiClient.HyperflexSoftwareVersionPolicy.GetHyperflexSoftwareVersionPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_software_version_policy.NewGetHyperflexSoftwareVersionPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexSoftwareVersionPolicy.GetHyperflexSoftwareVersionPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "sysconfigpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_sys_config_policy.NewGetHyperflexSysConfigPoliciesParams()

											res, err := apiClient.HyperflexSysConfigPolicy.GetHyperflexSysConfigPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_sys_config_policy.NewGetHyperflexSysConfigPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexSysConfigPolicy.GetHyperflexSysConfigPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ucsmconfigpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_ucsm_config_policy.NewGetHyperflexUcsmConfigPoliciesParams()

											res, err := apiClient.HyperflexUcsmConfigPolicy.GetHyperflexUcsmConfigPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_ucsm_config_policy.NewGetHyperflexUcsmConfigPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexUcsmConfigPolicy.GetHyperflexUcsmConfigPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "vcenterconfigpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_vcenter_config_policy.NewGetHyperflexVcenterConfigPoliciesParams()

											res, err := apiClient.HyperflexVcenterConfigPolicy.GetHyperflexVcenterConfigPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_vcenter_config_policy.NewGetHyperflexVcenterConfigPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexVcenterConfigPolicy.GetHyperflexVcenterConfigPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "iaas",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "connectorpacks",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iaas_connector_pack.NewGetIaasConnectorPacksParams()

											res, err := apiClient.IaasConnectorPack.GetIaasConnectorPacks(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iaas_connector_pack.NewGetIaasConnectorPacksMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IaasConnectorPack.GetIaasConnectorPacksMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "devicestatuses",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iaas_device_status.NewGetIaasDeviceStatusesParams()

											res, err := apiClient.IaasDeviceStatus.GetIaasDeviceStatuses(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iaas_device_status.NewGetIaasDeviceStatusesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IaasDeviceStatus.GetIaasDeviceStatusesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "licenseinfos",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iaas_license_info.NewGetIaasLicenseInfosParams()

											res, err := apiClient.IaasLicenseInfo.GetIaasLicenseInfos(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iaas_license_info.NewGetIaasLicenseInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IaasLicenseInfo.GetIaasLicenseInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "mostruntasks",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iaas_most_run_tasks.NewGetIaasMostRunTasksParams()

											res, err := apiClient.IaasMostRunTasks.GetIaasMostRunTasks(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iaas_most_run_tasks.NewGetIaasMostRunTasksMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IaasMostRunTasks.GetIaasMostRunTasksMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ucsdinfos",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iaas_ucsd_info.NewGetIaasUcsdInfosParams()

											res, err := apiClient.IaasUcsdInfo.GetIaasUcsdInfos(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iaas_ucsd_info.NewGetIaasUcsdInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IaasUcsdInfo.GetIaasUcsdInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ucsdmanagedinfras",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iaas_ucsd_managed_infra.NewGetIaasUcsdManagedInfrasParams()

											res, err := apiClient.IaasUcsdManagedInfra.GetIaasUcsdManagedInfras(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iaas_ucsd_managed_infra.NewGetIaasUcsdManagedInfrasMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IaasUcsdManagedInfra.GetIaasUcsdManagedInfrasMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "iam",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "accounts",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_account.NewGetIamAccountsParams()

											res, err := apiClient.IamAccount.GetIamAccounts(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_account.NewGetIamAccountsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamAccount.GetIamAccountsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "apikeys",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_api_key.NewGetIamAPIKeysParams()

											res, err := apiClient.IamAPIKey.GetIamAPIKeys(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_api_key.NewGetIamAPIKeysMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamAPIKey.GetIamAPIKeysMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "domaingroups",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_domain_group.NewGetIamDomainGroupsParams()

											res, err := apiClient.IamDomainGroup.GetIamDomainGroups(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_domain_group.NewGetIamDomainGroupsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamDomainGroup.GetIamDomainGroupsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "endpointprivileges",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_end_point_privilege.NewGetIamEndPointPrivilegesParams()

											res, err := apiClient.IamEndPointPrivilege.GetIamEndPointPrivileges(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_end_point_privilege.NewGetIamEndPointPrivilegesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamEndPointPrivilege.GetIamEndPointPrivilegesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "endpointroles",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_end_point_role.NewGetIamEndPointRolesParams()

											res, err := apiClient.IamEndPointRole.GetIamEndPointRoles(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_end_point_role.NewGetIamEndPointRolesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamEndPointRole.GetIamEndPointRolesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "endpointuserpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_end_point_user_policy.NewGetIamEndPointUserPoliciesParams()

											res, err := apiClient.IamEndPointUserPolicy.GetIamEndPointUserPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_end_point_user_policy.NewGetIamEndPointUserPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamEndPointUserPolicy.GetIamEndPointUserPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "endpointuserroles",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_end_point_user_role.NewGetIamEndPointUserRolesParams()

											res, err := apiClient.IamEndPointUserRole.GetIamEndPointUserRoles(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_end_point_user_role.NewGetIamEndPointUserRolesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamEndPointUserRole.GetIamEndPointUserRolesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "endpointusers",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_end_point_user.NewGetIamEndPointUsersParams()

											res, err := apiClient.IamEndPointUser.GetIamEndPointUsers(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_end_point_user.NewGetIamEndPointUsersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamEndPointUser.GetIamEndPointUsersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "idpreferences",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_idp_reference.NewGetIamIdpReferencesParams()

											res, err := apiClient.IamIdpReference.GetIamIdpReferences(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_idp_reference.NewGetIamIdpReferencesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamIdpReference.GetIamIdpReferencesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "idps",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_idp.NewGetIamIdpsParams()

											res, err := apiClient.IamIdp.GetIamIdps(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_idp.NewGetIamIdpsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamIdp.GetIamIdpsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ldapgroups",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_ldap_group.NewGetIamLdapGroupsParams()

											res, err := apiClient.IamLdapGroup.GetIamLdapGroups(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_ldap_group.NewGetIamLdapGroupsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamLdapGroup.GetIamLdapGroupsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ldappolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_ldap_policy.NewGetIamLdapPoliciesParams()

											res, err := apiClient.IamLdapPolicy.GetIamLdapPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_ldap_policy.NewGetIamLdapPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamLdapPolicy.GetIamLdapPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ldapproviders",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_ldap_provider.NewGetIamLdapProvidersParams()

											res, err := apiClient.IamLdapProvider.GetIamLdapProviders(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_ldap_provider.NewGetIamLdapProvidersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamLdapProvider.GetIamLdapProvidersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "permissions",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_permission.NewGetIamPermissionsParams()

											res, err := apiClient.IamPermission.GetIamPermissions(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_permission.NewGetIamPermissionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamPermission.GetIamPermissionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "privileges",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_privilege.NewGetIamPrivilegesParams()

											res, err := apiClient.IamPrivilege.GetIamPrivileges(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_privilege.NewGetIamPrivilegesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamPrivilege.GetIamPrivilegesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "privilegesets",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_privilege_set.NewGetIamPrivilegeSetsParams()

											res, err := apiClient.IamPrivilegeSet.GetIamPrivilegeSets(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_privilege_set.NewGetIamPrivilegeSetsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamPrivilegeSet.GetIamPrivilegeSetsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "qualifiers",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_qualifier.NewGetIamQualifiersParams()

											res, err := apiClient.IamQualifier.GetIamQualifiers(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_qualifier.NewGetIamQualifiersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamQualifier.GetIamQualifiersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "resourcelimits",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_resource_limits.NewGetIamResourceLimitsParams()

											res, err := apiClient.IamResourceLimits.GetIamResourceLimits(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_resource_limits.NewGetIamResourceLimitsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamResourceLimits.GetIamResourceLimitsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "roles",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_role.NewGetIamRolesParams()

											res, err := apiClient.IamRole.GetIamRoles(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_role.NewGetIamRolesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamRole.GetIamRolesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "serviceproviders",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_service_provider.NewGetIamServiceProvidersParams()

											res, err := apiClient.IamServiceProvider.GetIamServiceProviders(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_service_provider.NewGetIamServiceProvidersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamServiceProvider.GetIamServiceProvidersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "sessionlimits",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_session_limits.NewGetIamSessionLimitsParams()

											res, err := apiClient.IamSessionLimits.GetIamSessionLimits(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_session_limits.NewGetIamSessionLimitsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamSessionLimits.GetIamSessionLimitsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "sessions",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_session.NewGetIamSessionsParams()

											res, err := apiClient.IamSession.GetIamSessions(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_session.NewGetIamSessionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamSession.GetIamSessionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "systems",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_system.NewGetIamSystemsParams()

											res, err := apiClient.IamSystem.GetIamSystems(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_system.NewGetIamSystemsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamSystem.GetIamSystemsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "trustpoints",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_trust_point.NewGetIamTrustPointsParams()

											res, err := apiClient.IamTrustPoint.GetIamTrustPoints(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_trust_point.NewGetIamTrustPointsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamTrustPoint.GetIamTrustPointsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "usergroups",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_user_group.NewGetIamUserGroupsParams()

											res, err := apiClient.IamUserGroup.GetIamUserGroups(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_user_group.NewGetIamUserGroupsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamUserGroup.GetIamUserGroupsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "userpreferences",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_user_preference.NewGetIamUserPreferencesParams()

											res, err := apiClient.IamUserPreference.GetIamUserPreferences(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_user_preference.NewGetIamUserPreferencesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamUserPreference.GetIamUserPreferencesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "users",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_user.NewGetIamUsersParams()

											res, err := apiClient.IamUser.GetIamUsers(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_user.NewGetIamUsersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamUser.GetIamUsersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "inventory",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "deviceinfos",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := inventory_device_info.NewGetInventoryDeviceInfosParams()

											res, err := apiClient.InventoryDeviceInfo.GetInventoryDeviceInfos(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := inventory_device_info.NewGetInventoryDeviceInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.InventoryDeviceInfo.GetInventoryDeviceInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "dnmobindings",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := inventory_dn_mo_binding.NewGetInventoryDnMoBindingsParams()

											res, err := apiClient.InventoryDnMoBinding.GetInventoryDnMoBindings(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := inventory_dn_mo_binding.NewGetInventoryDnMoBindingsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.InventoryDnMoBinding.GetInventoryDnMoBindingsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "genericinventories",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := inventory_generic_inventory.NewGetInventoryGenericInventoriesParams()

											res, err := apiClient.InventoryGenericInventory.GetInventoryGenericInventories(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := inventory_generic_inventory.NewGetInventoryGenericInventoriesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.InventoryGenericInventory.GetInventoryGenericInventoriesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "genericinventoryholders",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := inventory_generic_inventory_holder.NewGetInventoryGenericInventoryHoldersParams()

											res, err := apiClient.InventoryGenericInventoryHolder.GetInventoryGenericInventoryHolders(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := inventory_generic_inventory_holder.NewGetInventoryGenericInventoryHoldersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.InventoryGenericInventoryHolder.GetInventoryGenericInventoryHoldersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "ipmioverlan",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := ipmioverlan_policy.NewGetIpmioverlanPoliciesParams()

											res, err := apiClient.IpmioverlanPolicy.GetIpmioverlanPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := ipmioverlan_policy.NewGetIpmioverlanPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IpmioverlanPolicy.GetIpmioverlanPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "kvm",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := kvm_policy.NewGetKvmPoliciesParams()

											res, err := apiClient.KvmPolicy.GetKvmPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := kvm_policy.NewGetKvmPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.KvmPolicy.GetKvmPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "license",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "accountlicensedata",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := license_account_license_data.NewGetLicenseAccountLicenseDataParams()

											res, err := apiClient.LicenseAccountLicenseData.GetLicenseAccountLicenseData(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := license_account_license_data.NewGetLicenseAccountLicenseDataMoidParams()

													params.Moid = args[0]

													res, err := apiClient.LicenseAccountLicenseData.GetLicenseAccountLicenseDataMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "customerops",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := license_customer_op.NewGetLicenseCustomerOpsParams()

											res, err := apiClient.LicenseCustomerOp.GetLicenseCustomerOps(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := license_customer_op.NewGetLicenseCustomerOpsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.LicenseCustomerOp.GetLicenseCustomerOpsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "licenseinfos",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := license_license_info.NewGetLicenseLicenseInfosParams()

											res, err := apiClient.LicenseLicenseInfo.GetLicenseLicenseInfos(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := license_license_info.NewGetLicenseLicenseInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.LicenseLicenseInfo.GetLicenseLicenseInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "smartlicensetokens",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := license_smartlicense_token.NewGetLicenseSmartlicenseTokensParams()

											res, err := apiClient.LicenseSmartlicenseToken.GetLicenseSmartlicenseTokens(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := license_smartlicense_token.NewGetLicenseSmartlicenseTokensMoidParams()

													params.Moid = args[0]

													res, err := apiClient.LicenseSmartlicenseToken.GetLicenseSmartlicenseTokensMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "ls",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "serviceprofiles",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := ls_service_profile.NewGetLsServiceProfilesParams()

											res, err := apiClient.LsServiceProfile.GetLsServiceProfiles(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := ls_service_profile.NewGetLsServiceProfilesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.LsServiceProfile.GetLsServiceProfilesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "management",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "controllers",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := management_controller.NewGetManagementControllersParams()

											res, err := apiClient.ManagementController.GetManagementControllers(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := management_controller.NewGetManagementControllersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ManagementController.GetManagementControllersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "entities",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := management_entity.NewGetManagementEntitiesParams()

											res, err := apiClient.ManagementEntity.GetManagementEntities(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := management_entity.NewGetManagementEntitiesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ManagementEntity.GetManagementEntitiesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "interfaces",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := management_interface.NewGetManagementInterfacesParams()

											res, err := apiClient.ManagementInterface.GetManagementInterfaces(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := management_interface.NewGetManagementInterfacesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ManagementInterface.GetManagementInterfacesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "memory",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "arrays",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := memory_array.NewGetMemoryArraysParams()

											res, err := apiClient.MemoryArray.GetMemoryArrays(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := memory_array.NewGetMemoryArraysMoidParams()

													params.Moid = args[0]

													res, err := apiClient.MemoryArray.GetMemoryArraysMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "units",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := memory_unit.NewGetMemoryUnitsParams()

											res, err := apiClient.MemoryUnit.GetMemoryUnits(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := memory_unit.NewGetMemoryUnitsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.MemoryUnit.GetMemoryUnitsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "meta",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "definitions",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := meta_definition.NewGetMetaDefinitionsParams()

											res, err := apiClient.MetaDefinition.GetMetaDefinitions(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := meta_definition.NewGetMetaDefinitionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.MetaDefinition.GetMetaDefinitionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "network",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "elements",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := network_element.NewGetNetworkElementsParams()

											res, err := apiClient.NetworkElement.GetNetworkElements(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := network_element.NewGetNetworkElementsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NetworkElement.GetNetworkElementsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "elementsummaries",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := network_element_summary.NewGetNetworkElementSummariesParams()

											res, err := apiClient.NetworkElementSummary.GetNetworkElementSummaries(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := network_element_summary.NewGetNetworkElementSummariesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NetworkElementSummary.GetNetworkElementSummariesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "networkconfig",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := networkconfig_policy.NewGetNetworkconfigPoliciesParams()

											res, err := apiClient.NetworkconfigPolicy.GetNetworkconfigPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := networkconfig_policy.NewGetNetworkconfigPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NetworkconfigPolicy.GetNetworkconfigPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "niaapi",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "apicccoposts",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := niaapi_apic_cco_post.NewGetNiaapiApicCcoPostsParams()

											res, err := apiClient.NiaapiApicCcoPost.GetNiaapiApicCcoPosts(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := niaapi_apic_cco_post.NewGetNiaapiApicCcoPostsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NiaapiApicCcoPost.GetNiaapiApicCcoPostsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "apicfieldnotices",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := niaapi_apic_field_notice.NewGetNiaapiApicFieldNoticesParams()

											res, err := apiClient.NiaapiApicFieldNotice.GetNiaapiApicFieldNotices(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := niaapi_apic_field_notice.NewGetNiaapiApicFieldNoticesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NiaapiApicFieldNotice.GetNiaapiApicFieldNoticesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "apichweols",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := niaapi_apic_hweol.NewGetNiaapiApicHweolsParams()

											res, err := apiClient.NiaapiApicHweol.GetNiaapiApicHweols(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := niaapi_apic_hweol.NewGetNiaapiApicHweolsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NiaapiApicHweol.GetNiaapiApicHweolsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "apiclatestmaintainedreleases",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := niaapi_apic_latest_maintained_release.NewGetNiaapiApicLatestMaintainedReleasesParams()

											res, err := apiClient.NiaapiApicLatestMaintainedRelease.GetNiaapiApicLatestMaintainedReleases(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := niaapi_apic_latest_maintained_release.NewGetNiaapiApicLatestMaintainedReleasesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NiaapiApicLatestMaintainedRelease.GetNiaapiApicLatestMaintainedReleasesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "apicreleaserecommends",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := niaapi_apic_release_recommend.NewGetNiaapiApicReleaseRecommendsParams()

											res, err := apiClient.NiaapiApicReleaseRecommend.GetNiaapiApicReleaseRecommends(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := niaapi_apic_release_recommend.NewGetNiaapiApicReleaseRecommendsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NiaapiApicReleaseRecommend.GetNiaapiApicReleaseRecommendsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "apicsweols",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := niaapi_apic_sweol.NewGetNiaapiApicSweolsParams()

											res, err := apiClient.NiaapiApicSweol.GetNiaapiApicSweols(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := niaapi_apic_sweol.NewGetNiaapiApicSweolsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NiaapiApicSweol.GetNiaapiApicSweolsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "dcnmccoposts",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := niaapi_dcnm_cco_post.NewGetNiaapiDcnmCcoPostsParams()

											res, err := apiClient.NiaapiDcnmCcoPost.GetNiaapiDcnmCcoPosts(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := niaapi_dcnm_cco_post.NewGetNiaapiDcnmCcoPostsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NiaapiDcnmCcoPost.GetNiaapiDcnmCcoPostsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "dcnmfieldnotices",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := niaapi_dcnm_field_notice.NewGetNiaapiDcnmFieldNoticesParams()

											res, err := apiClient.NiaapiDcnmFieldNotice.GetNiaapiDcnmFieldNotices(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := niaapi_dcnm_field_notice.NewGetNiaapiDcnmFieldNoticesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NiaapiDcnmFieldNotice.GetNiaapiDcnmFieldNoticesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "dcnmhweols",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := niaapi_dcnm_hweol.NewGetNiaapiDcnmHweolsParams()

											res, err := apiClient.NiaapiDcnmHweol.GetNiaapiDcnmHweols(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := niaapi_dcnm_hweol.NewGetNiaapiDcnmHweolsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NiaapiDcnmHweol.GetNiaapiDcnmHweolsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "dcnmlatestmaintainedreleases",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := niaapi_dcnm_latest_maintained_release.NewGetNiaapiDcnmLatestMaintainedReleasesParams()

											res, err := apiClient.NiaapiDcnmLatestMaintainedRelease.GetNiaapiDcnmLatestMaintainedReleases(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := niaapi_dcnm_latest_maintained_release.NewGetNiaapiDcnmLatestMaintainedReleasesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NiaapiDcnmLatestMaintainedRelease.GetNiaapiDcnmLatestMaintainedReleasesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "dcnmreleaserecommends",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := niaapi_dcnm_release_recommend.NewGetNiaapiDcnmReleaseRecommendsParams()

											res, err := apiClient.NiaapiDcnmReleaseRecommend.GetNiaapiDcnmReleaseRecommends(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := niaapi_dcnm_release_recommend.NewGetNiaapiDcnmReleaseRecommendsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NiaapiDcnmReleaseRecommend.GetNiaapiDcnmReleaseRecommendsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "dcnmsweols",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := niaapi_dcnm_sweol.NewGetNiaapiDcnmSweolsParams()

											res, err := apiClient.NiaapiDcnmSweol.GetNiaapiDcnmSweols(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := niaapi_dcnm_sweol.NewGetNiaapiDcnmSweolsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NiaapiDcnmSweol.GetNiaapiDcnmSweolsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "filedownloaders",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := niaapi_file_downloader.NewGetNiaapiFileDownloadersParams()

											res, err := apiClient.NiaapiFileDownloader.GetNiaapiFileDownloaders(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := niaapi_file_downloader.NewGetNiaapiFileDownloadersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NiaapiFileDownloader.GetNiaapiFileDownloadersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "niametadata",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := niaapi_nia_metadata.NewGetNiaapiNiaMetadataParams()

											res, err := apiClient.NiaapiNiaMetadata.GetNiaapiNiaMetadata(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := niaapi_nia_metadata.NewGetNiaapiNiaMetadataMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NiaapiNiaMetadata.GetNiaapiNiaMetadataMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "versionregexes",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := niaapi_version_regex.NewGetNiaapiVersionRegexesParams()

											res, err := apiClient.NiaapiVersionRegex.GetNiaapiVersionRegexes(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := niaapi_version_regex.NewGetNiaapiVersionRegexesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NiaapiVersionRegex.GetNiaapiVersionRegexesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "ntp",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := ntp_policy.NewGetNtpPoliciesParams()

											res, err := apiClient.NtpPolicy.GetNtpPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := ntp_policy.NewGetNtpPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NtpPolicy.GetNtpPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "oauth",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "oauthusers",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := oauth_oauth_user.NewGetOauthOauthUsersParams()

											res, err := apiClient.OauthOauthUser.GetOauthOauthUsers(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := oauth_oauth_user.NewGetOauthOauthUsersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.OauthOauthUser.GetOauthOauthUsersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "os",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "installs",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := os_install.NewGetOsInstallsParams()

											res, err := apiClient.OsInstall.GetOsInstalls(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := os_install.NewGetOsInstallsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.OsInstall.GetOsInstallsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "pci",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "coprocessorcards",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := pci_coprocessor_card.NewGetPciCoprocessorCardsParams()

											res, err := apiClient.PciCoprocessorCard.GetPciCoprocessorCards(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := pci_coprocessor_card.NewGetPciCoprocessorCardsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.PciCoprocessorCard.GetPciCoprocessorCardsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "devices",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := pci_device.NewGetPciDevicesParams()

											res, err := apiClient.PciDevice.GetPciDevices(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := pci_device.NewGetPciDevicesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.PciDevice.GetPciDevicesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "links",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := pci_link.NewGetPciLinksParams()

											res, err := apiClient.PciLink.GetPciLinks(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := pci_link.NewGetPciLinksMoidParams()

													params.Moid = args[0]

													res, err := apiClient.PciLink.GetPciLinksMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "switches",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := pci_switch.NewGetPciSwitchesParams()

											res, err := apiClient.PciSwitch.GetPciSwitches(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := pci_switch.NewGetPciSwitchesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.PciSwitch.GetPciSwitchesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "port",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "groups",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := port_group.NewGetPortGroupsParams()

											res, err := apiClient.PortGroup.GetPortGroups(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := port_group.NewGetPortGroupsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.PortGroup.GetPortGroupsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "subgroups",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := port_sub_group.NewGetPortSubGroupsParams()

											res, err := apiClient.PortSubGroup.GetPortSubGroups(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := port_sub_group.NewGetPortSubGroupsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.PortSubGroup.GetPortSubGroupsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "processor",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "units",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := processor_unit.NewGetProcessorUnitsParams()

											res, err := apiClient.ProcessorUnit.GetProcessorUnits(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := processor_unit.NewGetProcessorUnitsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ProcessorUnit.GetProcessorUnitsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "resource",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "groups",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := resource_group.NewGetResourceGroupsParams()

											res, err := apiClient.ResourceGroup.GetResourceGroups(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := resource_group.NewGetResourceGroupsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ResourceGroup.GetResourceGroupsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "sdcard",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := sdcard_policy.NewGetSdcardPoliciesParams()

											res, err := apiClient.SdcardPolicy.GetSdcardPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := sdcard_policy.NewGetSdcardPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SdcardPolicy.GetSdcardPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "search",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "searchitems",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := search_search_item.NewGetSearchSearchItemsParams()

											res, err := apiClient.SearchSearchItem.GetSearchSearchItems(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := search_search_item.NewGetSearchSearchItemsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SearchSearchItem.GetSearchSearchItemsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "tagitems",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := search_tag_item.NewGetSearchTagItemsParams()

											res, err := apiClient.SearchTagItem.GetSearchTagItems(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := search_tag_item.NewGetSearchTagItemsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SearchTagItem.GetSearchTagItemsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "security",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "units",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := security_unit.NewGetSecurityUnitsParams()

											res, err := apiClient.SecurityUnit.GetSecurityUnits(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := security_unit.NewGetSecurityUnitsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SecurityUnit.GetSecurityUnitsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "server",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "configchangedetails",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := server_config_change_detail.NewGetServerConfigChangeDetailsParams()

											res, err := apiClient.ServerConfigChangeDetail.GetServerConfigChangeDetails(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := server_config_change_detail.NewGetServerConfigChangeDetailsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ServerConfigChangeDetail.GetServerConfigChangeDetailsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "configimports",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := server_config_import.NewGetServerConfigImportsParams()

											res, err := apiClient.ServerConfigImport.GetServerConfigImports(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := server_config_import.NewGetServerConfigImportsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ServerConfigImport.GetServerConfigImportsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "configresultentries",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := server_config_result_entry.NewGetServerConfigResultEntriesParams()

											res, err := apiClient.ServerConfigResultEntry.GetServerConfigResultEntries(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := server_config_result_entry.NewGetServerConfigResultEntriesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ServerConfigResultEntry.GetServerConfigResultEntriesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "configresults",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := server_config_result.NewGetServerConfigResultsParams()

											res, err := apiClient.ServerConfigResult.GetServerConfigResults(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := server_config_result.NewGetServerConfigResultsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ServerConfigResult.GetServerConfigResultsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "profiles",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := server_profile.NewGetServerProfilesParams()

											res, err := apiClient.ServerProfile.GetServerProfiles(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := server_profile.NewGetServerProfilesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ServerProfile.GetServerProfilesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "smtp",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := smtp_policy.NewGetSMTPPoliciesParams()

											res, err := apiClient.SMTPPolicy.GetSMTPPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := smtp_policy.NewGetSMTPPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SMTPPolicy.GetSMTPPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "snmp",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := snmp_policy.NewGetSnmpPoliciesParams()

											res, err := apiClient.SnmpPolicy.GetSnmpPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := snmp_policy.NewGetSnmpPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SnmpPolicy.GetSnmpPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "software",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "hyperflexdistributables",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := software_hyperflex_distributable.NewGetSoftwareHyperflexDistributablesParams()

											res, err := apiClient.SoftwareHyperflexDistributable.GetSoftwareHyperflexDistributables(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := software_hyperflex_distributable.NewGetSoftwareHyperflexDistributablesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SoftwareHyperflexDistributable.GetSoftwareHyperflexDistributablesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "softwarerepository",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "authorizations",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := softwarerepository_authorization.NewGetSoftwarerepositoryAuthorizationsParams()

											res, err := apiClient.SoftwarerepositoryAuthorization.GetSoftwarerepositoryAuthorizations(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := softwarerepository_authorization.NewGetSoftwarerepositoryAuthorizationsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SoftwarerepositoryAuthorization.GetSoftwarerepositoryAuthorizationsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "operatingsystemfiles",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := softwarerepository_operating_system_file.NewGetSoftwarerepositoryOperatingSystemFilesParams()

											res, err := apiClient.SoftwarerepositoryOperatingSystemFile.GetSoftwarerepositoryOperatingSystemFiles(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := softwarerepository_operating_system_file.NewGetSoftwarerepositoryOperatingSystemFilesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SoftwarerepositoryOperatingSystemFile.GetSoftwarerepositoryOperatingSystemFilesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "sol",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := sol_policy.NewGetSolPoliciesParams()

											res, err := apiClient.SolPolicy.GetSolPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := sol_policy.NewGetSolPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SolPolicy.GetSolPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "ssh",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := ssh_policy.NewGetSSHPoliciesParams()

											res, err := apiClient.SSHPolicy.GetSSHPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := ssh_policy.NewGetSSHPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SSHPolicy.GetSSHPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "storage",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "controllers",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_controller.NewGetStorageControllersParams()

											res, err := apiClient.StorageController.GetStorageControllers(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_controller.NewGetStorageControllersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageController.GetStorageControllersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "diskgrouppolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_disk_group_policy.NewGetStorageDiskGroupPoliciesParams()

											res, err := apiClient.StorageDiskGroupPolicy.GetStorageDiskGroupPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_disk_group_policy.NewGetStorageDiskGroupPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageDiskGroupPolicy.GetStorageDiskGroupPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "enclosures",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_enclosure.NewGetStorageEnclosuresParams()

											res, err := apiClient.StorageEnclosure.GetStorageEnclosures(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_enclosure.NewGetStorageEnclosuresMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageEnclosure.GetStorageEnclosuresMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "flexflashcontrollerprops",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_flex_flash_controller_props.NewGetStorageFlexFlashControllerPropsParams()

											res, err := apiClient.StorageFlexFlashControllerProps.GetStorageFlexFlashControllerProps(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_flex_flash_controller_props.NewGetStorageFlexFlashControllerPropsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageFlexFlashControllerProps.GetStorageFlexFlashControllerPropsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "flexflashcontrollers",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_flex_flash_controller.NewGetStorageFlexFlashControllersParams()

											res, err := apiClient.StorageFlexFlashController.GetStorageFlexFlashControllers(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_flex_flash_controller.NewGetStorageFlexFlashControllersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageFlexFlashController.GetStorageFlexFlashControllersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "flexflashphysicaldrives",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_flex_flash_physical_drive.NewGetStorageFlexFlashPhysicalDrivesParams()

											res, err := apiClient.StorageFlexFlashPhysicalDrive.GetStorageFlexFlashPhysicalDrives(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_flex_flash_physical_drive.NewGetStorageFlexFlashPhysicalDrivesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageFlexFlashPhysicalDrive.GetStorageFlexFlashPhysicalDrivesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "flexflashvirtualdrives",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_flex_flash_virtual_drive.NewGetStorageFlexFlashVirtualDrivesParams()

											res, err := apiClient.StorageFlexFlashVirtualDrive.GetStorageFlexFlashVirtualDrives(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_flex_flash_virtual_drive.NewGetStorageFlexFlashVirtualDrivesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageFlexFlashVirtualDrive.GetStorageFlexFlashVirtualDrivesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "flexutilcontrollers",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_flex_util_controller.NewGetStorageFlexUtilControllersParams()

											res, err := apiClient.StorageFlexUtilController.GetStorageFlexUtilControllers(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_flex_util_controller.NewGetStorageFlexUtilControllersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageFlexUtilController.GetStorageFlexUtilControllersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "flexutilphysicaldrives",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_flex_util_physical_drive.NewGetStorageFlexUtilPhysicalDrivesParams()

											res, err := apiClient.StorageFlexUtilPhysicalDrive.GetStorageFlexUtilPhysicalDrives(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_flex_util_physical_drive.NewGetStorageFlexUtilPhysicalDrivesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageFlexUtilPhysicalDrive.GetStorageFlexUtilPhysicalDrivesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "flexutilvirtualdrives",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_flex_util_virtual_drive.NewGetStorageFlexUtilVirtualDrivesParams()

											res, err := apiClient.StorageFlexUtilVirtualDrive.GetStorageFlexUtilVirtualDrives(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_flex_util_virtual_drive.NewGetStorageFlexUtilVirtualDrivesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageFlexUtilVirtualDrive.GetStorageFlexUtilVirtualDrivesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "physicaldiskextensions",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_physical_disk_extension.NewGetStoragePhysicalDiskExtensionsParams()

											res, err := apiClient.StoragePhysicalDiskExtension.GetStoragePhysicalDiskExtensions(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_physical_disk_extension.NewGetStoragePhysicalDiskExtensionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StoragePhysicalDiskExtension.GetStoragePhysicalDiskExtensionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "physicaldisks",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_physical_disk.NewGetStoragePhysicalDisksParams()

											res, err := apiClient.StoragePhysicalDisk.GetStoragePhysicalDisks(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_physical_disk.NewGetStoragePhysicalDisksMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StoragePhysicalDisk.GetStoragePhysicalDisksMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "physicaldiskusages",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_physical_disk_usage.NewGetStoragePhysicalDiskUsagesParams()

											res, err := apiClient.StoragePhysicalDiskUsage.GetStoragePhysicalDiskUsages(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_physical_disk_usage.NewGetStoragePhysicalDiskUsagesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StoragePhysicalDiskUsage.GetStoragePhysicalDiskUsagesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "purearrays",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_pure_array.NewGetStoragePureArraysParams()

											res, err := apiClient.StoragePureArray.GetStoragePureArrays(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_pure_array.NewGetStoragePureArraysMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StoragePureArray.GetStoragePureArraysMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "purecontrollers",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_pure_controller.NewGetStoragePureControllersParams()

											res, err := apiClient.StoragePureController.GetStoragePureControllers(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_pure_controller.NewGetStoragePureControllersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StoragePureController.GetStoragePureControllersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "puredisks",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_pure_disk.NewGetStoragePureDisksParams()

											res, err := apiClient.StoragePureDisk.GetStoragePureDisks(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_pure_disk.NewGetStoragePureDisksMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StoragePureDisk.GetStoragePureDisksMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "purehostluns",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_pure_host_lun.NewGetStoragePureHostLunsParams()

											res, err := apiClient.StoragePureHostLun.GetStoragePureHostLuns(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_pure_host_lun.NewGetStoragePureHostLunsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StoragePureHostLun.GetStoragePureHostLunsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "purehosts",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_pure_host.NewGetStoragePureHostsParams()

											res, err := apiClient.StoragePureHost.GetStoragePureHosts(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_pure_host.NewGetStoragePureHostsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StoragePureHost.GetStoragePureHostsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "pureports",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_pure_port.NewGetStoragePurePortsParams()

											res, err := apiClient.StoragePurePort.GetStoragePurePorts(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_pure_port.NewGetStoragePurePortsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StoragePurePort.GetStoragePurePortsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "pureprotectiongroups",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_pure_protection_group.NewGetStoragePureProtectionGroupsParams()

											res, err := apiClient.StoragePureProtectionGroup.GetStoragePureProtectionGroups(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_pure_protection_group.NewGetStoragePureProtectionGroupsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StoragePureProtectionGroup.GetStoragePureProtectionGroupsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "pureprotectiongroupsnapshots",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_pure_protection_group_snapshot.NewGetStoragePureProtectionGroupSnapshotsParams()

											res, err := apiClient.StoragePureProtectionGroupSnapshot.GetStoragePureProtectionGroupSnapshots(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_pure_protection_group_snapshot.NewGetStoragePureProtectionGroupSnapshotsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StoragePureProtectionGroupSnapshot.GetStoragePureProtectionGroupSnapshotsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "purereplicationschedules",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_pure_replication_schedule.NewGetStoragePureReplicationSchedulesParams()

											res, err := apiClient.StoragePureReplicationSchedule.GetStoragePureReplicationSchedules(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_pure_replication_schedule.NewGetStoragePureReplicationSchedulesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StoragePureReplicationSchedule.GetStoragePureReplicationSchedulesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "puresnapshotschedules",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_pure_snapshot_schedule.NewGetStoragePureSnapshotSchedulesParams()

											res, err := apiClient.StoragePureSnapshotSchedule.GetStoragePureSnapshotSchedules(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_pure_snapshot_schedule.NewGetStoragePureSnapshotSchedulesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StoragePureSnapshotSchedule.GetStoragePureSnapshotSchedulesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "purevolumes",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_pure_volume.NewGetStoragePureVolumesParams()

											res, err := apiClient.StoragePureVolume.GetStoragePureVolumes(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_pure_volume.NewGetStoragePureVolumesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StoragePureVolume.GetStoragePureVolumesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "purevolumesnapshots",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_pure_volume_snapshot.NewGetStoragePureVolumeSnapshotsParams()

											res, err := apiClient.StoragePureVolumeSnapshot.GetStoragePureVolumeSnapshots(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_pure_volume_snapshot.NewGetStoragePureVolumeSnapshotsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StoragePureVolumeSnapshot.GetStoragePureVolumeSnapshotsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "sasexpanders",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_sas_expander.NewGetStorageSasExpandersParams()

											res, err := apiClient.StorageSasExpander.GetStorageSasExpanders(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_sas_expander.NewGetStorageSasExpandersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageSasExpander.GetStorageSasExpandersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "storagepolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_storage_policy.NewGetStorageStoragePoliciesParams()

											res, err := apiClient.StorageStoragePolicy.GetStorageStoragePolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_storage_policy.NewGetStorageStoragePoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageStoragePolicy.GetStorageStoragePoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "vdmembereps",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_vd_member_ep.NewGetStorageVdMemberEpsParams()

											res, err := apiClient.StorageVdMemberEp.GetStorageVdMemberEps(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_vd_member_ep.NewGetStorageVdMemberEpsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageVdMemberEp.GetStorageVdMemberEpsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "virtualdriveextensions",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_virtual_drive_extension.NewGetStorageVirtualDriveExtensionsParams()

											res, err := apiClient.StorageVirtualDriveExtension.GetStorageVirtualDriveExtensions(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_virtual_drive_extension.NewGetStorageVirtualDriveExtensionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageVirtualDriveExtension.GetStorageVirtualDriveExtensionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "virtualdrives",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_virtual_drive.NewGetStorageVirtualDrivesParams()

											res, err := apiClient.StorageVirtualDrive.GetStorageVirtualDrives(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_virtual_drive.NewGetStorageVirtualDrivesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageVirtualDrive.GetStorageVirtualDrivesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "syslog",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := syslog_policy.NewGetSyslogPoliciesParams()

											res, err := apiClient.SyslogPolicy.GetSyslogPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := syslog_policy.NewGetSyslogPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SyslogPolicy.GetSyslogPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "tam",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "advisoryinstances",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := tam_advisory_instance.NewGetTamAdvisoryInstancesParams()

											res, err := apiClient.TamAdvisoryInstance.GetTamAdvisoryInstances(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := tam_advisory_instance.NewGetTamAdvisoryInstancesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TamAdvisoryInstance.GetTamAdvisoryInstancesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "securityadvisories",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := tam_security_advisory.NewGetTamSecurityAdvisoriesParams()

											res, err := apiClient.TamSecurityAdvisory.GetTamSecurityAdvisories(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := tam_security_advisory.NewGetTamSecurityAdvisoriesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TamSecurityAdvisory.GetTamSecurityAdvisoriesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "task",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "workflowactions",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := task_workflow_action.NewGetTaskWorkflowActionsParams()

											res, err := apiClient.TaskWorkflowAction.GetTaskWorkflowActions(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := task_workflow_action.NewGetTaskWorkflowActionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TaskWorkflowAction.GetTaskWorkflowActionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "telemetry",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "timeseries",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := telemetry_time_series.NewGetTelemetryTimeSeriesParams()

											res, err := apiClient.TelemetryTimeSeries.GetTelemetryTimeSeries(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := telemetry_time_series.NewGetTelemetryTimeSeriesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TelemetryTimeSeries.GetTelemetryTimeSeriesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "terminal",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "auditlogs",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := terminal_audit_log.NewGetTerminalAuditLogsParams()

											res, err := apiClient.TerminalAuditLog.GetTerminalAuditLogs(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := terminal_audit_log.NewGetTerminalAuditLogsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TerminalAuditLog.GetTerminalAuditLogsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "testcrypt",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "administrators",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := testcrypt_administrator.NewGetTestcryptAdministratorsParams()

											res, err := apiClient.TestcryptAdministrator.GetTestcryptAdministrators(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := testcrypt_administrator.NewGetTestcryptAdministratorsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TestcryptAdministrator.GetTestcryptAdministratorsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "credentials",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := testcrypt_credential.NewGetTestcryptCredentialsParams()

											res, err := apiClient.TestcryptCredential.GetTestcryptCredentials(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := testcrypt_credential.NewGetTestcryptCredentialsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TestcryptCredential.GetTestcryptCredentialsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "readonlyusers",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := testcrypt_read_only_user.NewGetTestcryptReadOnlyUsersParams()

											res, err := apiClient.TestcryptReadOnlyUser.GetTestcryptReadOnlyUsers(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := testcrypt_read_only_user.NewGetTestcryptReadOnlyUsersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TestcryptReadOnlyUser.GetTestcryptReadOnlyUsersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "shadowcredentials",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := testcrypt_shadow_credential.NewGetTestcryptShadowCredentialsParams()

											res, err := apiClient.TestcryptShadowCredential.GetTestcryptShadowCredentials(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := testcrypt_shadow_credential.NewGetTestcryptShadowCredentialsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TestcryptShadowCredential.GetTestcryptShadowCredentialsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "tokenapis",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := testcrypt_token_api.NewGetTestcryptTokenApisParams()

											res, err := apiClient.TestcryptTokenAPI.GetTestcryptTokenApis(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := testcrypt_token_api.NewGetTestcryptTokenApisMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TestcryptTokenAPI.GetTestcryptTokenApisMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "top",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "systems",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := top_system.NewGetTopSystemsParams()

											res, err := apiClient.TopSystem.GetTopSystems(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := top_system.NewGetTopSystemsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TopSystem.GetTopSystemsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "vmedia",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := vmedia_policy.NewGetVmediaPoliciesParams()

											res, err := apiClient.VmediaPolicy.GetVmediaPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vmedia_policy.NewGetVmediaPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VmediaPolicy.GetVmediaPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "vnic",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ethadapterpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := vnic_eth_adapter_policy.NewGetVnicEthAdapterPoliciesParams()

											res, err := apiClient.VnicEthAdapterPolicy.GetVnicEthAdapterPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_eth_adapter_policy.NewGetVnicEthAdapterPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicEthAdapterPolicy.GetVnicEthAdapterPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ethifs",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := vnic_eth_if.NewGetVnicEthIfsParams()

											res, err := apiClient.VnicEthIf.GetVnicEthIfs(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_eth_if.NewGetVnicEthIfsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicEthIf.GetVnicEthIfsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ethnetworkpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := vnic_eth_network_policy.NewGetVnicEthNetworkPoliciesParams()

											res, err := apiClient.VnicEthNetworkPolicy.GetVnicEthNetworkPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_eth_network_policy.NewGetVnicEthNetworkPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicEthNetworkPolicy.GetVnicEthNetworkPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ethqospolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := vnic_eth_qos_policy.NewGetVnicEthQosPoliciesParams()

											res, err := apiClient.VnicEthQosPolicy.GetVnicEthQosPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_eth_qos_policy.NewGetVnicEthQosPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicEthQosPolicy.GetVnicEthQosPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "fcadapterpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := vnic_fc_adapter_policy.NewGetVnicFcAdapterPoliciesParams()

											res, err := apiClient.VnicFcAdapterPolicy.GetVnicFcAdapterPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_fc_adapter_policy.NewGetVnicFcAdapterPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicFcAdapterPolicy.GetVnicFcAdapterPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "fcifs",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := vnic_fc_if.NewGetVnicFcIfsParams()

											res, err := apiClient.VnicFcIf.GetVnicFcIfs(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_fc_if.NewGetVnicFcIfsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicFcIf.GetVnicFcIfsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "fcnetworkpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := vnic_fc_network_policy.NewGetVnicFcNetworkPoliciesParams()

											res, err := apiClient.VnicFcNetworkPolicy.GetVnicFcNetworkPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_fc_network_policy.NewGetVnicFcNetworkPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicFcNetworkPolicy.GetVnicFcNetworkPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "fcqospolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := vnic_fc_qos_policy.NewGetVnicFcQosPoliciesParams()

											res, err := apiClient.VnicFcQosPolicy.GetVnicFcQosPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_fc_qos_policy.NewGetVnicFcQosPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicFcQosPolicy.GetVnicFcQosPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "lanconnectivitypolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := vnic_lan_connectivity_policy.NewGetVnicLanConnectivityPoliciesParams()

											res, err := apiClient.VnicLanConnectivityPolicy.GetVnicLanConnectivityPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_lan_connectivity_policy.NewGetVnicLanConnectivityPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicLanConnectivityPolicy.GetVnicLanConnectivityPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "sanconnectivitypolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := vnic_san_connectivity_policy.NewGetVnicSanConnectivityPoliciesParams()

											res, err := apiClient.VnicSanConnectivityPolicy.GetVnicSanConnectivityPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_san_connectivity_policy.NewGetVnicSanConnectivityPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicSanConnectivityPolicy.GetVnicSanConnectivityPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "workflow",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "batchapiexecutors",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := workflow_batch_api_executor.NewGetWorkflowBatchAPIExecutorsParams()

											res, err := apiClient.WorkflowBatchAPIExecutor.GetWorkflowBatchAPIExecutors(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := workflow_batch_api_executor.NewGetWorkflowBatchAPIExecutorsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.WorkflowBatchAPIExecutor.GetWorkflowBatchAPIExecutorsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "buildtaskmeta",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := workflow_build_task_meta.NewGetWorkflowBuildTaskMetaParams()

											res, err := apiClient.WorkflowBuildTaskMeta.GetWorkflowBuildTaskMeta(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := workflow_build_task_meta.NewGetWorkflowBuildTaskMetaMoidParams()

													params.Moid = args[0]

													res, err := apiClient.WorkflowBuildTaskMeta.GetWorkflowBuildTaskMetaMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "buildtaskmetaowners",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := workflow_build_task_meta_owner.NewGetWorkflowBuildTaskMetaOwnersParams()

											res, err := apiClient.WorkflowBuildTaskMetaOwner.GetWorkflowBuildTaskMetaOwners(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := workflow_build_task_meta_owner.NewGetWorkflowBuildTaskMetaOwnersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.WorkflowBuildTaskMetaOwner.GetWorkflowBuildTaskMetaOwnersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "catalogs",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := workflow_catalog.NewGetWorkflowCatalogsParams()

											res, err := apiClient.WorkflowCatalog.GetWorkflowCatalogs(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := workflow_catalog.NewGetWorkflowCatalogsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.WorkflowCatalog.GetWorkflowCatalogsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "pendingdynamicworkflowinfos",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := workflow_pending_dynamic_workflow_info.NewGetWorkflowPendingDynamicWorkflowInfosParams()

											res, err := apiClient.WorkflowPendingDynamicWorkflowInfo.GetWorkflowPendingDynamicWorkflowInfos(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := workflow_pending_dynamic_workflow_info.NewGetWorkflowPendingDynamicWorkflowInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.WorkflowPendingDynamicWorkflowInfo.GetWorkflowPendingDynamicWorkflowInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "taskdefinitions",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := workflow_task_definition.NewGetWorkflowTaskDefinitionsParams()

											res, err := apiClient.WorkflowTaskDefinition.GetWorkflowTaskDefinitions(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := workflow_task_definition.NewGetWorkflowTaskDefinitionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.WorkflowTaskDefinition.GetWorkflowTaskDefinitionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "taskinfos",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := workflow_task_info.NewGetWorkflowTaskInfosParams()

											res, err := apiClient.WorkflowTaskInfo.GetWorkflowTaskInfos(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := workflow_task_info.NewGetWorkflowTaskInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.WorkflowTaskInfo.GetWorkflowTaskInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "taskmeta",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := workflow_task_meta.NewGetWorkflowTaskMetaParams()

											res, err := apiClient.WorkflowTaskMeta.GetWorkflowTaskMeta(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := workflow_task_meta.NewGetWorkflowTaskMetaMoidParams()

													params.Moid = args[0]

													res, err := apiClient.WorkflowTaskMeta.GetWorkflowTaskMetaMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "workflowdefinitions",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := workflow_workflow_definition.NewGetWorkflowWorkflowDefinitionsParams()

											res, err := apiClient.WorkflowWorkflowDefinition.GetWorkflowWorkflowDefinitions(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := workflow_workflow_definition.NewGetWorkflowWorkflowDefinitionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.WorkflowWorkflowDefinition.GetWorkflowWorkflowDefinitionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "workflowinfos",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := workflow_workflow_info.NewGetWorkflowWorkflowInfosParams()

											res, err := apiClient.WorkflowWorkflowInfo.GetWorkflowWorkflowInfos(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := workflow_workflow_info.NewGetWorkflowWorkflowInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.WorkflowWorkflowInfo.GetWorkflowWorkflowInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "workflowmeta",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := workflow_workflow_meta.NewGetWorkflowWorkflowMetaParams()

											res, err := apiClient.WorkflowWorkflowMeta.GetWorkflowWorkflowMeta(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := workflow_workflow_meta.NewGetWorkflowWorkflowMetaMoidParams()

													params.Moid = args[0]

													res, err := apiClient.WorkflowWorkflowMeta.GetWorkflowWorkflowMetaMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					return cmd
				}())

			cmd.AddCommand(
				func() *cobra.Command {
					cmd := &cobra.Command{
						Use: "patch",
					}

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "adapter",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "configpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := adapter_config_policy.NewPatchAdapterConfigPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.AdapterConfigPolicy.PatchAdapterConfigPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "appliance",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "backuppolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := appliance_backup_policy.NewPatchApplianceBackupPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ApplianceBackupPolicy.PatchApplianceBackupPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "dataexportpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := appliance_data_export_policy.NewPatchApplianceDataExportPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ApplianceDataExportPolicy.PatchApplianceDataExportPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "diagsettings",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := appliance_diag_setting.NewPatchApplianceDiagSettingsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ApplianceDiagSetting.PatchApplianceDiagSettingsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "setupinfos",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := appliance_setup_info.NewPatchApplianceSetupInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ApplianceSetupInfo.PatchApplianceSetupInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "upgradepolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := appliance_upgrade_policy.NewPatchApplianceUpgradePoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ApplianceUpgradePolicy.PatchApplianceUpgradePoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "upgrades",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := appliance_upgrade.NewPatchApplianceUpgradesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ApplianceUpgrade.PatchApplianceUpgradesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "asset",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "deviceconfigurations",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := asset_device_configuration.NewPatchAssetDeviceConfigurationsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.AssetDeviceConfiguration.PatchAssetDeviceConfigurationsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "deviceregistrations",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := asset_device_registration.NewPatchAssetDeviceRegistrationsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.AssetDeviceRegistration.PatchAssetDeviceRegistrationsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "manageddevices",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := asset_managed_device.NewPatchAssetManagedDevicesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.AssetManagedDevice.PatchAssetManagedDevicesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "bios",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "bootmodes",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := bios_boot_mode.NewPatchBiosBootModesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.BiosBootMode.PatchBiosBootModesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := bios_policy.NewPatchBiosPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.BiosPolicy.PatchBiosPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "units",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := bios_unit.NewPatchBiosUnitsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.BiosUnit.PatchBiosUnitsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "boot",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "devicebootmodes",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := boot_device_boot_mode.NewPatchBootDeviceBootModesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.BootDeviceBootMode.PatchBootDeviceBootModesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "precisionpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := boot_precision_policy.NewPatchBootPrecisionPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.BootPrecisionPolicy.PatchBootPrecisionPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "compute",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "blades",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := compute_blade.NewPatchComputeBladesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ComputeBlade.PatchComputeBladesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "boards",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := compute_board.NewPatchComputeBoardsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ComputeBoard.PatchComputeBoardsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "rackunits",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := compute_rack_unit.NewPatchComputeRackUnitsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ComputeRackUnit.PatchComputeRackUnitsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "serversettings",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := compute_server_setting.NewPatchComputeServerSettingsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ComputeServerSetting.PatchComputeServerSettingsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "cvd",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "deploymenttasks",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := cvd_deployment_task.NewPatchCvdDeploymentTasksMoidParams()

													params.Moid = args[0]

													res, err := apiClient.CvdDeploymentTask.PatchCvdDeploymentTasksMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "templates",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := cvd_template.NewPatchCvdTemplatesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.CvdTemplate.PatchCvdTemplatesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "validationtasks",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := cvd_validation_task.NewPatchCvdValidationTasksMoidParams()

													params.Moid = args[0]

													res, err := apiClient.CvdValidationTask.PatchCvdValidationTasksMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "deviceconnector",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := deviceconnector_policy.NewPatchDeviceconnectorPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.DeviceconnectorPolicy.PatchDeviceconnectorPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "equipment",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "chasses",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_chassis.NewPatchEquipmentChassesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentChassis.PatchEquipmentChassesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "fanmodules",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_fan_module.NewPatchEquipmentFanModulesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentFanModule.PatchEquipmentFanModulesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "fans",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_fan.NewPatchEquipmentFansMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentFan.PatchEquipmentFansMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "fexes",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_fex.NewPatchEquipmentFexesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentFex.PatchEquipmentFexesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "iocards",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_io_card.NewPatchEquipmentIoCardsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentIoCard.PatchEquipmentIoCardsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ioexpanders",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_io_expander.NewPatchEquipmentIoExpandersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentIoExpander.PatchEquipmentIoExpandersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "locatorleds",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_locator_led.NewPatchEquipmentLocatorLedsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentLocatorLed.PatchEquipmentLocatorLedsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "psus",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_psu.NewPatchEquipmentPsusMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentPsu.PatchEquipmentPsusMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "rackenclosures",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_rack_enclosure.NewPatchEquipmentRackEnclosuresMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentRackEnclosure.PatchEquipmentRackEnclosuresMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "rackenclosureslots",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_rack_enclosure_slot.NewPatchEquipmentRackEnclosureSlotsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentRackEnclosureSlot.PatchEquipmentRackEnclosureSlotsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "switchcards",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_switch_card.NewPatchEquipmentSwitchCardsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentSwitchCard.PatchEquipmentSwitchCardsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "systemiocontrollers",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_system_io_controller.NewPatchEquipmentSystemIoControllersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentSystemIoController.PatchEquipmentSystemIoControllersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "tpms",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_tpm.NewPatchEquipmentTpmsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentTpm.PatchEquipmentTpmsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "ether",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "physicalports",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := ether_physical_port.NewPatchEtherPhysicalPortsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EtherPhysicalPort.PatchEtherPhysicalPortsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "externalsite",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "authorizations",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := externalsite_authorization.NewPatchExternalsiteAuthorizationsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ExternalsiteAuthorization.PatchExternalsiteAuthorizationsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "fault",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "instances",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := fault_instance.NewPatchFaultInstancesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.FaultInstance.PatchFaultInstancesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "fc",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "physicalports",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := fc_physical_port.NewPatchFcPhysicalPortsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.FcPhysicalPort.PatchFcPhysicalPortsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "firmware",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "distributables",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := firmware_distributable.NewPatchFirmwareDistributablesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.FirmwareDistributable.PatchFirmwareDistributablesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "driverdistributables",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := firmware_driver_distributable.NewPatchFirmwareDriverDistributablesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.FirmwareDriverDistributable.PatchFirmwareDriverDistributablesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "runningfirmwares",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := firmware_running_firmware.NewPatchFirmwareRunningFirmwaresMoidParams()

													params.Moid = args[0]

													res, err := apiClient.FirmwareRunningFirmware.PatchFirmwareRunningFirmwaresMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "serverconfigurationutilitydistributables",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := firmware_server_configuration_utility_distributable.NewPatchFirmwareServerConfigurationUtilityDistributablesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.FirmwareServerConfigurationUtilityDistributable.PatchFirmwareServerConfigurationUtilityDistributablesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "graphics",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "cards",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := graphics_card.NewPatchGraphicsCardsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.GraphicsCard.PatchGraphicsCardsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "controllers",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := graphics_controller.NewPatchGraphicsControllersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.GraphicsController.PatchGraphicsControllersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "hcl",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "hyperflexsoftwarecompatibilityinfos",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hcl_hyperflex_software_compatibility_info.NewPatchHclHyperflexSoftwareCompatibilityInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HclHyperflexSoftwareCompatibilityInfo.PatchHclHyperflexSoftwareCompatibilityInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "hyperflex",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "appcatalogs",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_app_catalog.NewPatchHyperflexAppCatalogsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexAppCatalog.PatchHyperflexAppCatalogsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "autosupportpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_auto_support_policy.NewPatchHyperflexAutoSupportPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexAutoSupportPolicy.PatchHyperflexAutoSupportPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "capabilityinfos",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_capability_info.NewPatchHyperflexCapabilityInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexCapabilityInfo.PatchHyperflexCapabilityInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "clusternetworkpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_cluster_network_policy.NewPatchHyperflexClusterNetworkPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexClusterNetworkPolicy.PatchHyperflexClusterNetworkPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "clusterprofiles",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_cluster_profile.NewPatchHyperflexClusterProfilesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexClusterProfile.PatchHyperflexClusterProfilesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "clusters",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_cluster.NewPatchHyperflexClustersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexCluster.PatchHyperflexClustersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "clusterstoragepolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_cluster_storage_policy.NewPatchHyperflexClusterStoragePoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexClusterStoragePolicy.PatchHyperflexClusterStoragePoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "extfcstoragepolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_ext_fc_storage_policy.NewPatchHyperflexExtFcStoragePoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexExtFcStoragePolicy.PatchHyperflexExtFcStoragePoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "extiscsistoragepolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_ext_iscsi_storage_policy.NewPatchHyperflexExtIscsiStoragePoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexExtIscsiStoragePolicy.PatchHyperflexExtIscsiStoragePoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "featurelimitexternals",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_feature_limit_external.NewPatchHyperflexFeatureLimitExternalsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexFeatureLimitExternal.PatchHyperflexFeatureLimitExternalsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "featurelimitinternals",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_feature_limit_internal.NewPatchHyperflexFeatureLimitInternalsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexFeatureLimitInternal.PatchHyperflexFeatureLimitInternalsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "hxdpversions",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_hxdp_version.NewPatchHyperflexHxdpVersionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexHxdpVersion.PatchHyperflexHxdpVersionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "initiatehxclusterupgrades",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_initiate_hx_cluster_upgrade.NewPatchHyperflexInitiateHxClusterUpgradesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexInitiateHxClusterUpgrade.PatchHyperflexInitiateHxClusterUpgradesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "localcredentialpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_local_credential_policy.NewPatchHyperflexLocalCredentialPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexLocalCredentialPolicy.PatchHyperflexLocalCredentialPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "nodeconfigpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_node_config_policy.NewPatchHyperflexNodeConfigPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexNodeConfigPolicy.PatchHyperflexNodeConfigPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "nodeprofiles",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_node_profile.NewPatchHyperflexNodeProfilesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexNodeProfile.PatchHyperflexNodeProfilesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "proxysettingpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_proxy_setting_policy.NewPatchHyperflexProxySettingPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexProxySettingPolicy.PatchHyperflexProxySettingPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "serverfirmwareversions",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_server_firmware_version.NewPatchHyperflexServerFirmwareVersionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexServerFirmwareVersion.PatchHyperflexServerFirmwareVersionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "servermodels",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_server_model.NewPatchHyperflexServerModelsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexServerModel.PatchHyperflexServerModelsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "softwareversionpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_software_version_policy.NewPatchHyperflexSoftwareVersionPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexSoftwareVersionPolicy.PatchHyperflexSoftwareVersionPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "sysconfigpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_sys_config_policy.NewPatchHyperflexSysConfigPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexSysConfigPolicy.PatchHyperflexSysConfigPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ucsmconfigpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_ucsm_config_policy.NewPatchHyperflexUcsmConfigPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexUcsmConfigPolicy.PatchHyperflexUcsmConfigPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "vcenterconfigpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_vcenter_config_policy.NewPatchHyperflexVcenterConfigPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexVcenterConfigPolicy.PatchHyperflexVcenterConfigPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "iam",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "accounts",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_account.NewPatchIamAccountsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamAccount.PatchIamAccountsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "apikeys",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_api_key.NewPatchIamAPIKeysMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamAPIKey.PatchIamAPIKeysMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "endpointuserpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_end_point_user_policy.NewPatchIamEndPointUserPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamEndPointUserPolicy.PatchIamEndPointUserPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "endpointuserroles",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_end_point_user_role.NewPatchIamEndPointUserRolesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamEndPointUserRole.PatchIamEndPointUserRolesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "endpointusers",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_end_point_user.NewPatchIamEndPointUsersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamEndPointUser.PatchIamEndPointUsersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "idpreferences",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_idp_reference.NewPatchIamIdpReferencesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamIdpReference.PatchIamIdpReferencesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "idps",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_idp.NewPatchIamIdpsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamIdp.PatchIamIdpsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ldapgroups",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_ldap_group.NewPatchIamLdapGroupsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamLdapGroup.PatchIamLdapGroupsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ldappolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_ldap_policy.NewPatchIamLdapPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamLdapPolicy.PatchIamLdapPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ldapproviders",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_ldap_provider.NewPatchIamLdapProvidersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamLdapProvider.PatchIamLdapProvidersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "localuserpasswords",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_local_user_password.NewPatchIamLocalUserPasswordsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamLocalUserPassword.PatchIamLocalUserPasswordsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "qualifiers",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_qualifier.NewPatchIamQualifiersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamQualifier.PatchIamQualifiersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "usergroups",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_user_group.NewPatchIamUserGroupsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamUserGroup.PatchIamUserGroupsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "userpreferences",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_user_preference.NewPatchIamUserPreferencesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamUserPreference.PatchIamUserPreferencesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "users",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_user.NewPatchIamUsersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamUser.PatchIamUsersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "inventory",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "genericinventories",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := inventory_generic_inventory.NewPatchInventoryGenericInventoriesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.InventoryGenericInventory.PatchInventoryGenericInventoriesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "genericinventoryholders",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := inventory_generic_inventory_holder.NewPatchInventoryGenericInventoryHoldersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.InventoryGenericInventoryHolder.PatchInventoryGenericInventoryHoldersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "ipmioverlan",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := ipmioverlan_policy.NewPatchIpmioverlanPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IpmioverlanPolicy.PatchIpmioverlanPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "kvm",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := kvm_policy.NewPatchKvmPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.KvmPolicy.PatchKvmPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "license",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "customerops",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := license_customer_op.NewPatchLicenseCustomerOpsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.LicenseCustomerOp.PatchLicenseCustomerOpsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "licenseinfos",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := license_license_info.NewPatchLicenseLicenseInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.LicenseLicenseInfo.PatchLicenseLicenseInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "smartlicensetokens",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := license_smartlicense_token.NewPatchLicenseSmartlicenseTokensMoidParams()

													params.Moid = args[0]

													res, err := apiClient.LicenseSmartlicenseToken.PatchLicenseSmartlicenseTokensMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "ls",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "serviceprofiles",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := ls_service_profile.NewPatchLsServiceProfilesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.LsServiceProfile.PatchLsServiceProfilesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "management",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "controllers",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := management_controller.NewPatchManagementControllersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ManagementController.PatchManagementControllersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "entities",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := management_entity.NewPatchManagementEntitiesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ManagementEntity.PatchManagementEntitiesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "interfaces",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := management_interface.NewPatchManagementInterfacesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ManagementInterface.PatchManagementInterfacesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "memory",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "arrays",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := memory_array.NewPatchMemoryArraysMoidParams()

													params.Moid = args[0]

													res, err := apiClient.MemoryArray.PatchMemoryArraysMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "units",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := memory_unit.NewPatchMemoryUnitsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.MemoryUnit.PatchMemoryUnitsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "network",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "elements",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := network_element.NewPatchNetworkElementsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NetworkElement.PatchNetworkElementsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "networkconfig",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := networkconfig_policy.NewPatchNetworkconfigPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NetworkconfigPolicy.PatchNetworkconfigPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "ntp",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := ntp_policy.NewPatchNtpPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NtpPolicy.PatchNtpPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "oauth",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "oauthusers",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := oauth_oauth_user.NewPatchOauthOauthUsersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.OauthOauthUser.PatchOauthOauthUsersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "pci",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "devices",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := pci_device.NewPatchPciDevicesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.PciDevice.PatchPciDevicesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "links",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := pci_link.NewPatchPciLinksMoidParams()

													params.Moid = args[0]

													res, err := apiClient.PciLink.PatchPciLinksMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "switches",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := pci_switch.NewPatchPciSwitchesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.PciSwitch.PatchPciSwitchesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "port",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "groups",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := port_group.NewPatchPortGroupsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.PortGroup.PatchPortGroupsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "subgroups",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := port_sub_group.NewPatchPortSubGroupsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.PortSubGroup.PatchPortSubGroupsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "processor",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "units",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := processor_unit.NewPatchProcessorUnitsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ProcessorUnit.PatchProcessorUnitsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "resource",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "groups",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := resource_group.NewPatchResourceGroupsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ResourceGroup.PatchResourceGroupsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "sdcard",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := sdcard_policy.NewPatchSdcardPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SdcardPolicy.PatchSdcardPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "security",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "units",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := security_unit.NewPatchSecurityUnitsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SecurityUnit.PatchSecurityUnitsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "server",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "profiles",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := server_profile.NewPatchServerProfilesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ServerProfile.PatchServerProfilesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "smtp",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := smtp_policy.NewPatchSMTPPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SMTPPolicy.PatchSMTPPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "snmp",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := snmp_policy.NewPatchSnmpPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SnmpPolicy.PatchSnmpPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "software",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "hyperflexdistributables",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := software_hyperflex_distributable.NewPatchSoftwareHyperflexDistributablesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SoftwareHyperflexDistributable.PatchSoftwareHyperflexDistributablesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "softwarerepository",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "authorizations",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := softwarerepository_authorization.NewPatchSoftwarerepositoryAuthorizationsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SoftwarerepositoryAuthorization.PatchSoftwarerepositoryAuthorizationsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "operatingsystemfiles",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := softwarerepository_operating_system_file.NewPatchSoftwarerepositoryOperatingSystemFilesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SoftwarerepositoryOperatingSystemFile.PatchSoftwarerepositoryOperatingSystemFilesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "sol",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := sol_policy.NewPatchSolPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SolPolicy.PatchSolPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "ssh",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := ssh_policy.NewPatchSSHPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SSHPolicy.PatchSSHPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "storage",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "controllers",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_controller.NewPatchStorageControllersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageController.PatchStorageControllersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "diskgrouppolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_disk_group_policy.NewPatchStorageDiskGroupPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageDiskGroupPolicy.PatchStorageDiskGroupPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "enclosures",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_enclosure.NewPatchStorageEnclosuresMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageEnclosure.PatchStorageEnclosuresMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "flexflashcontrollerprops",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_flex_flash_controller_props.NewPatchStorageFlexFlashControllerPropsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageFlexFlashControllerProps.PatchStorageFlexFlashControllerPropsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "flexflashcontrollers",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_flex_flash_controller.NewPatchStorageFlexFlashControllersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageFlexFlashController.PatchStorageFlexFlashControllersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "flexflashphysicaldrives",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_flex_flash_physical_drive.NewPatchStorageFlexFlashPhysicalDrivesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageFlexFlashPhysicalDrive.PatchStorageFlexFlashPhysicalDrivesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "flexflashvirtualdrives",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_flex_flash_virtual_drive.NewPatchStorageFlexFlashVirtualDrivesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageFlexFlashVirtualDrive.PatchStorageFlexFlashVirtualDrivesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "flexutilcontrollers",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_flex_util_controller.NewPatchStorageFlexUtilControllersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageFlexUtilController.PatchStorageFlexUtilControllersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "flexutilphysicaldrives",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_flex_util_physical_drive.NewPatchStorageFlexUtilPhysicalDrivesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageFlexUtilPhysicalDrive.PatchStorageFlexUtilPhysicalDrivesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "flexutilvirtualdrives",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_flex_util_virtual_drive.NewPatchStorageFlexUtilVirtualDrivesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageFlexUtilVirtualDrive.PatchStorageFlexUtilVirtualDrivesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "physicaldiskextensions",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_physical_disk_extension.NewPatchStoragePhysicalDiskExtensionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StoragePhysicalDiskExtension.PatchStoragePhysicalDiskExtensionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "physicaldisks",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_physical_disk.NewPatchStoragePhysicalDisksMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StoragePhysicalDisk.PatchStoragePhysicalDisksMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "physicaldiskusages",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_physical_disk_usage.NewPatchStoragePhysicalDiskUsagesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StoragePhysicalDiskUsage.PatchStoragePhysicalDiskUsagesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "purearrays",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_pure_array.NewPatchStoragePureArraysMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StoragePureArray.PatchStoragePureArraysMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "sasexpanders",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_sas_expander.NewPatchStorageSasExpandersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageSasExpander.PatchStorageSasExpandersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "storagepolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_storage_policy.NewPatchStorageStoragePoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageStoragePolicy.PatchStorageStoragePoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "vdmembereps",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_vd_member_ep.NewPatchStorageVdMemberEpsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageVdMemberEp.PatchStorageVdMemberEpsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "virtualdriveextensions",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_virtual_drive_extension.NewPatchStorageVirtualDriveExtensionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageVirtualDriveExtension.PatchStorageVirtualDriveExtensionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "virtualdrives",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_virtual_drive.NewPatchStorageVirtualDrivesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageVirtualDrive.PatchStorageVirtualDrivesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "syslog",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := syslog_policy.NewPatchSyslogPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SyslogPolicy.PatchSyslogPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "tam",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "advisoryinstances",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := tam_advisory_instance.NewPatchTamAdvisoryInstancesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TamAdvisoryInstance.PatchTamAdvisoryInstancesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "securityadvisories",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := tam_security_advisory.NewPatchTamSecurityAdvisoriesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TamSecurityAdvisory.PatchTamSecurityAdvisoriesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "task",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "workflowactions",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := task_workflow_action.NewPatchTaskWorkflowActionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TaskWorkflowAction.PatchTaskWorkflowActionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "testcrypt",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "administrators",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := testcrypt_administrator.NewPatchTestcryptAdministratorsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TestcryptAdministrator.PatchTestcryptAdministratorsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "credentials",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := testcrypt_credential.NewPatchTestcryptCredentialsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TestcryptCredential.PatchTestcryptCredentialsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "readonlyusers",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := testcrypt_read_only_user.NewPatchTestcryptReadOnlyUsersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TestcryptReadOnlyUser.PatchTestcryptReadOnlyUsersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "tokenapis",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := testcrypt_token_api.NewPatchTestcryptTokenApisMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TestcryptTokenAPI.PatchTestcryptTokenApisMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "top",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "systems",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := top_system.NewPatchTopSystemsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TopSystem.PatchTopSystemsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "vmedia",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vmedia_policy.NewPatchVmediaPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VmediaPolicy.PatchVmediaPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "vnic",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ethadapterpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_eth_adapter_policy.NewPatchVnicEthAdapterPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicEthAdapterPolicy.PatchVnicEthAdapterPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ethifs",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_eth_if.NewPatchVnicEthIfsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicEthIf.PatchVnicEthIfsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ethnetworkpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_eth_network_policy.NewPatchVnicEthNetworkPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicEthNetworkPolicy.PatchVnicEthNetworkPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ethqospolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_eth_qos_policy.NewPatchVnicEthQosPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicEthQosPolicy.PatchVnicEthQosPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "fcadapterpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_fc_adapter_policy.NewPatchVnicFcAdapterPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicFcAdapterPolicy.PatchVnicFcAdapterPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "fcifs",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_fc_if.NewPatchVnicFcIfsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicFcIf.PatchVnicFcIfsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "fcnetworkpolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_fc_network_policy.NewPatchVnicFcNetworkPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicFcNetworkPolicy.PatchVnicFcNetworkPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "fcqospolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_fc_qos_policy.NewPatchVnicFcQosPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicFcQosPolicy.PatchVnicFcQosPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "lanconnectivitypolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_lan_connectivity_policy.NewPatchVnicLanConnectivityPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicLanConnectivityPolicy.PatchVnicLanConnectivityPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "sanconnectivitypolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_san_connectivity_policy.NewPatchVnicSanConnectivityPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicSanConnectivityPolicy.PatchVnicSanConnectivityPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "workflow",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "batchapiexecutors",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := workflow_batch_api_executor.NewPatchWorkflowBatchAPIExecutorsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.WorkflowBatchAPIExecutor.PatchWorkflowBatchAPIExecutorsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "taskdefinitions",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := workflow_task_definition.NewPatchWorkflowTaskDefinitionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.WorkflowTaskDefinition.PatchWorkflowTaskDefinitionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "taskinfos",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := workflow_task_info.NewPatchWorkflowTaskInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.WorkflowTaskInfo.PatchWorkflowTaskInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "workflowdefinitions",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := workflow_workflow_definition.NewPatchWorkflowWorkflowDefinitionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.WorkflowWorkflowDefinition.PatchWorkflowWorkflowDefinitionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "workflowinfos",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := workflow_workflow_info.NewPatchWorkflowWorkflowInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.WorkflowWorkflowInfo.PatchWorkflowWorkflowInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					return cmd
				}())

			cmd.AddCommand(
				func() *cobra.Command {
					cmd := &cobra.Command{
						Use: "post",
					}

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "adapter",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "configpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := adapter_config_policy.NewPostAdapterConfigPoliciesParams()

											res, err := apiClient.AdapterConfigPolicy.PostAdapterConfigPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := adapter_config_policy.NewPostAdapterConfigPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.AdapterConfigPolicy.PostAdapterConfigPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "appliance",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "backuppolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := appliance_backup_policy.NewPostApplianceBackupPoliciesParams()

											res, err := apiClient.ApplianceBackupPolicy.PostApplianceBackupPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := appliance_backup_policy.NewPostApplianceBackupPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ApplianceBackupPolicy.PostApplianceBackupPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "backups",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := appliance_backup.NewPostApplianceBackupsParams()

											res, err := apiClient.ApplianceBackup.PostApplianceBackups(params)
											resultHandler(res, err)
										},
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "dataexportpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := appliance_data_export_policy.NewPostApplianceDataExportPoliciesParams()

											res, err := apiClient.ApplianceDataExportPolicy.PostApplianceDataExportPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := appliance_data_export_policy.NewPostApplianceDataExportPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ApplianceDataExportPolicy.PostApplianceDataExportPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "deviceclaims",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := appliance_device_claim.NewPostApplianceDeviceClaimsParams()

											res, err := apiClient.ApplianceDeviceClaim.PostApplianceDeviceClaims(params)
											resultHandler(res, err)
										},
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "diagsettings",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := appliance_diag_setting.NewPostApplianceDiagSettingsParams()

											res, err := apiClient.ApplianceDiagSetting.PostApplianceDiagSettings(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := appliance_diag_setting.NewPostApplianceDiagSettingsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ApplianceDiagSetting.PostApplianceDiagSettingsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "restores",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := appliance_restore.NewPostApplianceRestoresParams()

											res, err := apiClient.ApplianceRestore.PostApplianceRestores(params)
											resultHandler(res, err)
										},
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "setupinfos",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := appliance_setup_info.NewPostApplianceSetupInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ApplianceSetupInfo.PostApplianceSetupInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "upgradepolicies",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := appliance_upgrade_policy.NewPostApplianceUpgradePoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ApplianceUpgradePolicy.PostApplianceUpgradePoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "upgrades",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := appliance_upgrade.NewPostApplianceUpgradesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ApplianceUpgrade.PostApplianceUpgradesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "asset",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "deviceclaims",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := asset_device_claim.NewPostAssetDeviceClaimsParams()

											res, err := apiClient.AssetDeviceClaim.PostAssetDeviceClaims(params)
											resultHandler(res, err)
										},
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "deviceconfigurations",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := asset_device_configuration.NewPostAssetDeviceConfigurationsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.AssetDeviceConfiguration.PostAssetDeviceConfigurationsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "deviceregistrations",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := asset_device_registration.NewPostAssetDeviceRegistrationsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.AssetDeviceRegistration.PostAssetDeviceRegistrationsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "manageddevices",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := asset_managed_device.NewPostAssetManagedDevicesParams()

											res, err := apiClient.AssetManagedDevice.PostAssetManagedDevices(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := asset_managed_device.NewPostAssetManagedDevicesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.AssetManagedDevice.PostAssetManagedDevicesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "bios",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "bootmodes",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := bios_boot_mode.NewPostBiosBootModesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.BiosBootMode.PostBiosBootModesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := bios_policy.NewPostBiosPoliciesParams()

											res, err := apiClient.BiosPolicy.PostBiosPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := bios_policy.NewPostBiosPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.BiosPolicy.PostBiosPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "units",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := bios_unit.NewPostBiosUnitsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.BiosUnit.PostBiosUnitsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "boot",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "devicebootmodes",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := boot_device_boot_mode.NewPostBootDeviceBootModesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.BootDeviceBootMode.PostBootDeviceBootModesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "precisionpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := boot_precision_policy.NewPostBootPrecisionPoliciesParams()

											res, err := apiClient.BootPrecisionPolicy.PostBootPrecisionPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := boot_precision_policy.NewPostBootPrecisionPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.BootPrecisionPolicy.PostBootPrecisionPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "compute",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "blades",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := compute_blade.NewPostComputeBladesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ComputeBlade.PostComputeBladesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "boards",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := compute_board.NewPostComputeBoardsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ComputeBoard.PostComputeBoardsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "rackunits",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := compute_rack_unit.NewPostComputeRackUnitsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ComputeRackUnit.PostComputeRackUnitsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "serversettings",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := compute_server_setting.NewPostComputeServerSettingsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ComputeServerSetting.PostComputeServerSettingsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "cvd",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "deploymenttasks",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := cvd_deployment_task.NewPostCvdDeploymentTasksParams()

											res, err := apiClient.CvdDeploymentTask.PostCvdDeploymentTasks(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := cvd_deployment_task.NewPostCvdDeploymentTasksMoidParams()

													params.Moid = args[0]

													res, err := apiClient.CvdDeploymentTask.PostCvdDeploymentTasksMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "templates",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := cvd_template.NewPostCvdTemplatesParams()

											res, err := apiClient.CvdTemplate.PostCvdTemplates(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := cvd_template.NewPostCvdTemplatesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.CvdTemplate.PostCvdTemplatesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "validationtasks",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := cvd_validation_task.NewPostCvdValidationTasksParams()

											res, err := apiClient.CvdValidationTask.PostCvdValidationTasks(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := cvd_validation_task.NewPostCvdValidationTasksMoidParams()

													params.Moid = args[0]

													res, err := apiClient.CvdValidationTask.PostCvdValidationTasksMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "deviceconnector",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := deviceconnector_policy.NewPostDeviceconnectorPoliciesParams()

											res, err := apiClient.DeviceconnectorPolicy.PostDeviceconnectorPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := deviceconnector_policy.NewPostDeviceconnectorPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.DeviceconnectorPolicy.PostDeviceconnectorPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "equipment",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "chasses",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_chassis.NewPostEquipmentChassesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentChassis.PostEquipmentChassesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "fanmodules",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_fan_module.NewPostEquipmentFanModulesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentFanModule.PostEquipmentFanModulesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "fans",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_fan.NewPostEquipmentFansMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentFan.PostEquipmentFansMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "fexes",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_fex.NewPostEquipmentFexesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentFex.PostEquipmentFexesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "iocards",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_io_card.NewPostEquipmentIoCardsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentIoCard.PostEquipmentIoCardsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ioexpanders",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_io_expander.NewPostEquipmentIoExpandersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentIoExpander.PostEquipmentIoExpandersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "locatorleds",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_locator_led.NewPostEquipmentLocatorLedsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentLocatorLed.PostEquipmentLocatorLedsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "psus",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_psu.NewPostEquipmentPsusMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentPsu.PostEquipmentPsusMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "rackenclosures",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_rack_enclosure.NewPostEquipmentRackEnclosuresMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentRackEnclosure.PostEquipmentRackEnclosuresMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "rackenclosureslots",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_rack_enclosure_slot.NewPostEquipmentRackEnclosureSlotsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentRackEnclosureSlot.PostEquipmentRackEnclosureSlotsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "switchcards",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_switch_card.NewPostEquipmentSwitchCardsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentSwitchCard.PostEquipmentSwitchCardsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "systemiocontrollers",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_system_io_controller.NewPostEquipmentSystemIoControllersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentSystemIoController.PostEquipmentSystemIoControllersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "tpms",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := equipment_tpm.NewPostEquipmentTpmsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EquipmentTpm.PostEquipmentTpmsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "ether",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "physicalports",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := ether_physical_port.NewPostEtherPhysicalPortsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.EtherPhysicalPort.PostEtherPhysicalPortsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "externalsite",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "authorizations",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := externalsite_authorization.NewPostExternalsiteAuthorizationsParams()

											res, err := apiClient.ExternalsiteAuthorization.PostExternalsiteAuthorizations(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := externalsite_authorization.NewPostExternalsiteAuthorizationsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ExternalsiteAuthorization.PostExternalsiteAuthorizationsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "fault",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "instances",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := fault_instance.NewPostFaultInstancesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.FaultInstance.PostFaultInstancesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "fc",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "physicalports",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := fc_physical_port.NewPostFcPhysicalPortsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.FcPhysicalPort.PostFcPhysicalPortsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "feedback",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "feedbackposts",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := feedback_feedback_post.NewPostFeedbackFeedbackPostsParams()

											res, err := apiClient.FeedbackFeedbackPost.PostFeedbackFeedbackPosts(params)
											resultHandler(res, err)
										},
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "firmware",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "distributables",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := firmware_distributable.NewPostFirmwareDistributablesParams()

											res, err := apiClient.FirmwareDistributable.PostFirmwareDistributables(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := firmware_distributable.NewPostFirmwareDistributablesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.FirmwareDistributable.PostFirmwareDistributablesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "driverdistributables",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := firmware_driver_distributable.NewPostFirmwareDriverDistributablesParams()

											res, err := apiClient.FirmwareDriverDistributable.PostFirmwareDriverDistributables(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := firmware_driver_distributable.NewPostFirmwareDriverDistributablesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.FirmwareDriverDistributable.PostFirmwareDriverDistributablesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "eulas",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := firmware_eula.NewPostFirmwareEulasParams()

											res, err := apiClient.FirmwareEula.PostFirmwareEulas(params)
											resultHandler(res, err)
										},
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "runningfirmwares",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := firmware_running_firmware.NewPostFirmwareRunningFirmwaresMoidParams()

													params.Moid = args[0]

													res, err := apiClient.FirmwareRunningFirmware.PostFirmwareRunningFirmwaresMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "serverconfigurationutilitydistributables",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := firmware_server_configuration_utility_distributable.NewPostFirmwareServerConfigurationUtilityDistributablesParams()

											res, err := apiClient.FirmwareServerConfigurationUtilityDistributable.PostFirmwareServerConfigurationUtilityDistributables(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := firmware_server_configuration_utility_distributable.NewPostFirmwareServerConfigurationUtilityDistributablesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.FirmwareServerConfigurationUtilityDistributable.PostFirmwareServerConfigurationUtilityDistributablesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "upgrades",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := firmware_upgrade.NewPostFirmwareUpgradesParams()

											res, err := apiClient.FirmwareUpgrade.PostFirmwareUpgrades(params)
											resultHandler(res, err)
										},
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "graphics",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "cards",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := graphics_card.NewPostGraphicsCardsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.GraphicsCard.PostGraphicsCardsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "controllers",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := graphics_controller.NewPostGraphicsControllersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.GraphicsController.PostGraphicsControllersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "hcl",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "compatibilitystatuses",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hcl_compatibility_status.NewPostHclCompatibilityStatusesParams()

											res, err := apiClient.HclCompatibilityStatus.PostHclCompatibilityStatuses(params)
											resultHandler(res, err)
										},
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "hyperflexsoftwarecompatibilityinfos",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hcl_hyperflex_software_compatibility_info.NewPostHclHyperflexSoftwareCompatibilityInfosParams()

											res, err := apiClient.HclHyperflexSoftwareCompatibilityInfo.PostHclHyperflexSoftwareCompatibilityInfos(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hcl_hyperflex_software_compatibility_info.NewPostHclHyperflexSoftwareCompatibilityInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HclHyperflexSoftwareCompatibilityInfo.PostHclHyperflexSoftwareCompatibilityInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "supporteddrivernames",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hcl_supported_driver_name.NewPostHclSupportedDriverNamesParams()

											res, err := apiClient.HclSupportedDriverName.PostHclSupportedDriverNames(params)
											resultHandler(res, err)
										},
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "hyperflex",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "appcatalogs",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_app_catalog.NewPostHyperflexAppCatalogsParams()

											res, err := apiClient.HyperflexAppCatalog.PostHyperflexAppCatalogs(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_app_catalog.NewPostHyperflexAppCatalogsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexAppCatalog.PostHyperflexAppCatalogsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "autosupportpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_auto_support_policy.NewPostHyperflexAutoSupportPoliciesParams()

											res, err := apiClient.HyperflexAutoSupportPolicy.PostHyperflexAutoSupportPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_auto_support_policy.NewPostHyperflexAutoSupportPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexAutoSupportPolicy.PostHyperflexAutoSupportPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "capabilityinfos",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_capability_info.NewPostHyperflexCapabilityInfosParams()

											res, err := apiClient.HyperflexCapabilityInfo.PostHyperflexCapabilityInfos(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_capability_info.NewPostHyperflexCapabilityInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexCapabilityInfo.PostHyperflexCapabilityInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "clusternetworkpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_cluster_network_policy.NewPostHyperflexClusterNetworkPoliciesParams()

											res, err := apiClient.HyperflexClusterNetworkPolicy.PostHyperflexClusterNetworkPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_cluster_network_policy.NewPostHyperflexClusterNetworkPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexClusterNetworkPolicy.PostHyperflexClusterNetworkPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "clusterprofiles",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_cluster_profile.NewPostHyperflexClusterProfilesParams()

											res, err := apiClient.HyperflexClusterProfile.PostHyperflexClusterProfiles(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_cluster_profile.NewPostHyperflexClusterProfilesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexClusterProfile.PostHyperflexClusterProfilesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "clusters",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_cluster.NewPostHyperflexClustersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexCluster.PostHyperflexClustersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "clusterstoragepolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_cluster_storage_policy.NewPostHyperflexClusterStoragePoliciesParams()

											res, err := apiClient.HyperflexClusterStoragePolicy.PostHyperflexClusterStoragePolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_cluster_storage_policy.NewPostHyperflexClusterStoragePoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexClusterStoragePolicy.PostHyperflexClusterStoragePoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "extfcstoragepolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_ext_fc_storage_policy.NewPostHyperflexExtFcStoragePoliciesParams()

											res, err := apiClient.HyperflexExtFcStoragePolicy.PostHyperflexExtFcStoragePolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_ext_fc_storage_policy.NewPostHyperflexExtFcStoragePoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexExtFcStoragePolicy.PostHyperflexExtFcStoragePoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "extiscsistoragepolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_ext_iscsi_storage_policy.NewPostHyperflexExtIscsiStoragePoliciesParams()

											res, err := apiClient.HyperflexExtIscsiStoragePolicy.PostHyperflexExtIscsiStoragePolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_ext_iscsi_storage_policy.NewPostHyperflexExtIscsiStoragePoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexExtIscsiStoragePolicy.PostHyperflexExtIscsiStoragePoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "featurelimitexternals",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_feature_limit_external.NewPostHyperflexFeatureLimitExternalsParams()

											res, err := apiClient.HyperflexFeatureLimitExternal.PostHyperflexFeatureLimitExternals(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_feature_limit_external.NewPostHyperflexFeatureLimitExternalsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexFeatureLimitExternal.PostHyperflexFeatureLimitExternalsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "featurelimitinternals",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_feature_limit_internal.NewPostHyperflexFeatureLimitInternalsParams()

											res, err := apiClient.HyperflexFeatureLimitInternal.PostHyperflexFeatureLimitInternals(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_feature_limit_internal.NewPostHyperflexFeatureLimitInternalsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexFeatureLimitInternal.PostHyperflexFeatureLimitInternalsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "hxdpversions",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_hxdp_version.NewPostHyperflexHxdpVersionsParams()

											res, err := apiClient.HyperflexHxdpVersion.PostHyperflexHxdpVersions(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_hxdp_version.NewPostHyperflexHxdpVersionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexHxdpVersion.PostHyperflexHxdpVersionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "initiatehxclusterupgrades",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_initiate_hx_cluster_upgrade.NewPostHyperflexInitiateHxClusterUpgradesParams()

											res, err := apiClient.HyperflexInitiateHxClusterUpgrade.PostHyperflexInitiateHxClusterUpgrades(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_initiate_hx_cluster_upgrade.NewPostHyperflexInitiateHxClusterUpgradesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexInitiateHxClusterUpgrade.PostHyperflexInitiateHxClusterUpgradesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "localcredentialpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_local_credential_policy.NewPostHyperflexLocalCredentialPoliciesParams()

											res, err := apiClient.HyperflexLocalCredentialPolicy.PostHyperflexLocalCredentialPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_local_credential_policy.NewPostHyperflexLocalCredentialPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexLocalCredentialPolicy.PostHyperflexLocalCredentialPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "nodeconfigpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_node_config_policy.NewPostHyperflexNodeConfigPoliciesParams()

											res, err := apiClient.HyperflexNodeConfigPolicy.PostHyperflexNodeConfigPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_node_config_policy.NewPostHyperflexNodeConfigPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexNodeConfigPolicy.PostHyperflexNodeConfigPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "nodeprofiles",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_node_profile.NewPostHyperflexNodeProfilesParams()

											res, err := apiClient.HyperflexNodeProfile.PostHyperflexNodeProfiles(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_node_profile.NewPostHyperflexNodeProfilesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexNodeProfile.PostHyperflexNodeProfilesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "proxysettingpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_proxy_setting_policy.NewPostHyperflexProxySettingPoliciesParams()

											res, err := apiClient.HyperflexProxySettingPolicy.PostHyperflexProxySettingPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_proxy_setting_policy.NewPostHyperflexProxySettingPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexProxySettingPolicy.PostHyperflexProxySettingPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "serverfirmwareversions",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_server_firmware_version.NewPostHyperflexServerFirmwareVersionsParams()

											res, err := apiClient.HyperflexServerFirmwareVersion.PostHyperflexServerFirmwareVersions(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_server_firmware_version.NewPostHyperflexServerFirmwareVersionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexServerFirmwareVersion.PostHyperflexServerFirmwareVersionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "servermodels",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_server_model.NewPostHyperflexServerModelsParams()

											res, err := apiClient.HyperflexServerModel.PostHyperflexServerModels(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_server_model.NewPostHyperflexServerModelsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexServerModel.PostHyperflexServerModelsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "softwareversionpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_software_version_policy.NewPostHyperflexSoftwareVersionPoliciesParams()

											res, err := apiClient.HyperflexSoftwareVersionPolicy.PostHyperflexSoftwareVersionPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_software_version_policy.NewPostHyperflexSoftwareVersionPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexSoftwareVersionPolicy.PostHyperflexSoftwareVersionPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "sysconfigpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_sys_config_policy.NewPostHyperflexSysConfigPoliciesParams()

											res, err := apiClient.HyperflexSysConfigPolicy.PostHyperflexSysConfigPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_sys_config_policy.NewPostHyperflexSysConfigPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexSysConfigPolicy.PostHyperflexSysConfigPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ucsmconfigpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_ucsm_config_policy.NewPostHyperflexUcsmConfigPoliciesParams()

											res, err := apiClient.HyperflexUcsmConfigPolicy.PostHyperflexUcsmConfigPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_ucsm_config_policy.NewPostHyperflexUcsmConfigPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexUcsmConfigPolicy.PostHyperflexUcsmConfigPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "vcenterconfigpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := hyperflex_vcenter_config_policy.NewPostHyperflexVcenterConfigPoliciesParams()

											res, err := apiClient.HyperflexVcenterConfigPolicy.PostHyperflexVcenterConfigPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := hyperflex_vcenter_config_policy.NewPostHyperflexVcenterConfigPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.HyperflexVcenterConfigPolicy.PostHyperflexVcenterConfigPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "iam",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "accounts",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_account.NewPostIamAccountsParams()

											res, err := apiClient.IamAccount.PostIamAccounts(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_account.NewPostIamAccountsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamAccount.PostIamAccountsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "apikeys",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_api_key.NewPostIamAPIKeysParams()

											res, err := apiClient.IamAPIKey.PostIamAPIKeys(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_api_key.NewPostIamAPIKeysMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamAPIKey.PostIamAPIKeysMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "endpointuserpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_end_point_user_policy.NewPostIamEndPointUserPoliciesParams()

											res, err := apiClient.IamEndPointUserPolicy.PostIamEndPointUserPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_end_point_user_policy.NewPostIamEndPointUserPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamEndPointUserPolicy.PostIamEndPointUserPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "endpointuserroles",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_end_point_user_role.NewPostIamEndPointUserRolesParams()

											res, err := apiClient.IamEndPointUserRole.PostIamEndPointUserRoles(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_end_point_user_role.NewPostIamEndPointUserRolesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamEndPointUserRole.PostIamEndPointUserRolesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "endpointusers",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_end_point_user.NewPostIamEndPointUsersParams()

											res, err := apiClient.IamEndPointUser.PostIamEndPointUsers(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_end_point_user.NewPostIamEndPointUsersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamEndPointUser.PostIamEndPointUsersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "idpreferences",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_idp_reference.NewPostIamIdpReferencesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamIdpReference.PostIamIdpReferencesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "idps",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_idp.NewPostIamIdpsParams()

											res, err := apiClient.IamIdp.PostIamIdps(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_idp.NewPostIamIdpsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamIdp.PostIamIdpsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ldapgroups",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_ldap_group.NewPostIamLdapGroupsParams()

											res, err := apiClient.IamLdapGroup.PostIamLdapGroups(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_ldap_group.NewPostIamLdapGroupsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamLdapGroup.PostIamLdapGroupsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ldappolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_ldap_policy.NewPostIamLdapPoliciesParams()

											res, err := apiClient.IamLdapPolicy.PostIamLdapPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_ldap_policy.NewPostIamLdapPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamLdapPolicy.PostIamLdapPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ldapproviders",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_ldap_provider.NewPostIamLdapProvidersParams()

											res, err := apiClient.IamLdapProvider.PostIamLdapProviders(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_ldap_provider.NewPostIamLdapProvidersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamLdapProvider.PostIamLdapProvidersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "localuserpasswords",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_local_user_password.NewPostIamLocalUserPasswordsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamLocalUserPassword.PostIamLocalUserPasswordsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "qualifiers",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_qualifier.NewPostIamQualifiersParams()

											res, err := apiClient.IamQualifier.PostIamQualifiers(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_qualifier.NewPostIamQualifiersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamQualifier.PostIamQualifiersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "trustpoints",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_trust_point.NewPostIamTrustPointsParams()

											res, err := apiClient.IamTrustPoint.PostIamTrustPoints(params)
											resultHandler(res, err)
										},
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "usergroups",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_user_group.NewPostIamUserGroupsParams()

											res, err := apiClient.IamUserGroup.PostIamUserGroups(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_user_group.NewPostIamUserGroupsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamUserGroup.PostIamUserGroupsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "userpreferences",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_user_preference.NewPostIamUserPreferencesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamUserPreference.PostIamUserPreferencesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "users",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := iam_user.NewPostIamUsersParams()

											res, err := apiClient.IamUser.PostIamUsers(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := iam_user.NewPostIamUsersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IamUser.PostIamUsersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "inventory",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "genericinventories",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := inventory_generic_inventory.NewPostInventoryGenericInventoriesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.InventoryGenericInventory.PostInventoryGenericInventoriesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "genericinventoryholders",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := inventory_generic_inventory_holder.NewPostInventoryGenericInventoryHoldersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.InventoryGenericInventoryHolder.PostInventoryGenericInventoryHoldersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "requests",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := inventory_request.NewPostInventoryRequestsParams()

											res, err := apiClient.InventoryRequest.PostInventoryRequests(params)
											resultHandler(res, err)
										},
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "ipmioverlan",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := ipmioverlan_policy.NewPostIpmioverlanPoliciesParams()

											res, err := apiClient.IpmioverlanPolicy.PostIpmioverlanPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := ipmioverlan_policy.NewPostIpmioverlanPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.IpmioverlanPolicy.PostIpmioverlanPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "kvm",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := kvm_policy.NewPostKvmPoliciesParams()

											res, err := apiClient.KvmPolicy.PostKvmPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := kvm_policy.NewPostKvmPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.KvmPolicy.PostKvmPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "license",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "customerops",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := license_customer_op.NewPostLicenseCustomerOpsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.LicenseCustomerOp.PostLicenseCustomerOpsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "licenseinfos",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := license_license_info.NewPostLicenseLicenseInfosParams()

											res, err := apiClient.LicenseLicenseInfo.PostLicenseLicenseInfos(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := license_license_info.NewPostLicenseLicenseInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.LicenseLicenseInfo.PostLicenseLicenseInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "smartlicensetokens",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := license_smartlicense_token.NewPostLicenseSmartlicenseTokensMoidParams()

													params.Moid = args[0]

													res, err := apiClient.LicenseSmartlicenseToken.PostLicenseSmartlicenseTokensMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "ls",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "serviceprofiles",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := ls_service_profile.NewPostLsServiceProfilesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.LsServiceProfile.PostLsServiceProfilesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "management",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "controllers",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := management_controller.NewPostManagementControllersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ManagementController.PostManagementControllersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "entities",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := management_entity.NewPostManagementEntitiesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ManagementEntity.PostManagementEntitiesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "interfaces",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := management_interface.NewPostManagementInterfacesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ManagementInterface.PostManagementInterfacesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "memory",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "arrays",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := memory_array.NewPostMemoryArraysMoidParams()

													params.Moid = args[0]

													res, err := apiClient.MemoryArray.PostMemoryArraysMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "units",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := memory_unit.NewPostMemoryUnitsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.MemoryUnit.PostMemoryUnitsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "network",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "elements",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := network_element.NewPostNetworkElementsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NetworkElement.PostNetworkElementsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "networkconfig",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := networkconfig_policy.NewPostNetworkconfigPoliciesParams()

											res, err := apiClient.NetworkconfigPolicy.PostNetworkconfigPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := networkconfig_policy.NewPostNetworkconfigPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NetworkconfigPolicy.PostNetworkconfigPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "ntp",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := ntp_policy.NewPostNtpPoliciesParams()

											res, err := apiClient.NtpPolicy.PostNtpPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := ntp_policy.NewPostNtpPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.NtpPolicy.PostNtpPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "oauth",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "oauthusers",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := oauth_oauth_user.NewPostOauthOauthUsersParams()

											res, err := apiClient.OauthOauthUser.PostOauthOauthUsers(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := oauth_oauth_user.NewPostOauthOauthUsersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.OauthOauthUser.PostOauthOauthUsersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "os",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "installs",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := os_install.NewPostOsInstallsParams()

											res, err := apiClient.OsInstall.PostOsInstalls(params)
											resultHandler(res, err)
										},
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "pci",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "devices",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := pci_device.NewPostPciDevicesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.PciDevice.PostPciDevicesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "links",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := pci_link.NewPostPciLinksMoidParams()

													params.Moid = args[0]

													res, err := apiClient.PciLink.PostPciLinksMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "switches",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := pci_switch.NewPostPciSwitchesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.PciSwitch.PostPciSwitchesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "port",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "groups",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := port_group.NewPostPortGroupsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.PortGroup.PostPortGroupsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "subgroups",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := port_sub_group.NewPostPortSubGroupsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.PortSubGroup.PostPortSubGroupsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "processor",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "units",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := processor_unit.NewPostProcessorUnitsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ProcessorUnit.PostProcessorUnitsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "resource",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "groups",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := resource_group.NewPostResourceGroupsParams()

											res, err := apiClient.ResourceGroup.PostResourceGroups(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := resource_group.NewPostResourceGroupsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ResourceGroup.PostResourceGroupsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "sdcard",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := sdcard_policy.NewPostSdcardPoliciesParams()

											res, err := apiClient.SdcardPolicy.PostSdcardPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := sdcard_policy.NewPostSdcardPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SdcardPolicy.PostSdcardPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "search",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "suggestitems",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := search_suggest_item.NewPostSearchSuggestItemsParams()

											res, err := apiClient.SearchSuggestItem.PostSearchSuggestItems(params)
											resultHandler(res, err)
										},
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "security",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "units",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := security_unit.NewPostSecurityUnitsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SecurityUnit.PostSecurityUnitsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "server",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "configimports",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := server_config_import.NewPostServerConfigImportsParams()

											res, err := apiClient.ServerConfigImport.PostServerConfigImports(params)
											resultHandler(res, err)
										},
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "profiles",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := server_profile.NewPostServerProfilesParams()

											res, err := apiClient.ServerProfile.PostServerProfiles(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := server_profile.NewPostServerProfilesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.ServerProfile.PostServerProfilesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "smtp",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := smtp_policy.NewPostSMTPPoliciesParams()

											res, err := apiClient.SMTPPolicy.PostSMTPPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := smtp_policy.NewPostSMTPPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SMTPPolicy.PostSMTPPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "snmp",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := snmp_policy.NewPostSnmpPoliciesParams()

											res, err := apiClient.SnmpPolicy.PostSnmpPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := snmp_policy.NewPostSnmpPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SnmpPolicy.PostSnmpPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "software",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "hyperflexdistributables",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := software_hyperflex_distributable.NewPostSoftwareHyperflexDistributablesParams()

											res, err := apiClient.SoftwareHyperflexDistributable.PostSoftwareHyperflexDistributables(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := software_hyperflex_distributable.NewPostSoftwareHyperflexDistributablesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SoftwareHyperflexDistributable.PostSoftwareHyperflexDistributablesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "softwarerepository",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "authorizations",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := softwarerepository_authorization.NewPostSoftwarerepositoryAuthorizationsParams()

											res, err := apiClient.SoftwarerepositoryAuthorization.PostSoftwarerepositoryAuthorizations(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := softwarerepository_authorization.NewPostSoftwarerepositoryAuthorizationsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SoftwarerepositoryAuthorization.PostSoftwarerepositoryAuthorizationsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "operatingsystemfiles",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := softwarerepository_operating_system_file.NewPostSoftwarerepositoryOperatingSystemFilesParams()

											res, err := apiClient.SoftwarerepositoryOperatingSystemFile.PostSoftwarerepositoryOperatingSystemFiles(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := softwarerepository_operating_system_file.NewPostSoftwarerepositoryOperatingSystemFilesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SoftwarerepositoryOperatingSystemFile.PostSoftwarerepositoryOperatingSystemFilesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "sol",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := sol_policy.NewPostSolPoliciesParams()

											res, err := apiClient.SolPolicy.PostSolPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := sol_policy.NewPostSolPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SolPolicy.PostSolPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "ssh",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := ssh_policy.NewPostSSHPoliciesParams()

											res, err := apiClient.SSHPolicy.PostSSHPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := ssh_policy.NewPostSSHPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SSHPolicy.PostSSHPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "storage",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "controllers",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_controller.NewPostStorageControllersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageController.PostStorageControllersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "diskgrouppolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_disk_group_policy.NewPostStorageDiskGroupPoliciesParams()

											res, err := apiClient.StorageDiskGroupPolicy.PostStorageDiskGroupPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_disk_group_policy.NewPostStorageDiskGroupPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageDiskGroupPolicy.PostStorageDiskGroupPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "enclosures",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_enclosure.NewPostStorageEnclosuresMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageEnclosure.PostStorageEnclosuresMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "flexflashcontrollerprops",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_flex_flash_controller_props.NewPostStorageFlexFlashControllerPropsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageFlexFlashControllerProps.PostStorageFlexFlashControllerPropsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "flexflashcontrollers",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_flex_flash_controller.NewPostStorageFlexFlashControllersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageFlexFlashController.PostStorageFlexFlashControllersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "flexflashphysicaldrives",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_flex_flash_physical_drive.NewPostStorageFlexFlashPhysicalDrivesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageFlexFlashPhysicalDrive.PostStorageFlexFlashPhysicalDrivesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "flexflashvirtualdrives",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_flex_flash_virtual_drive.NewPostStorageFlexFlashVirtualDrivesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageFlexFlashVirtualDrive.PostStorageFlexFlashVirtualDrivesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "flexutilcontrollers",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_flex_util_controller.NewPostStorageFlexUtilControllersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageFlexUtilController.PostStorageFlexUtilControllersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "flexutilphysicaldrives",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_flex_util_physical_drive.NewPostStorageFlexUtilPhysicalDrivesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageFlexUtilPhysicalDrive.PostStorageFlexUtilPhysicalDrivesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "flexutilvirtualdrives",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_flex_util_virtual_drive.NewPostStorageFlexUtilVirtualDrivesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageFlexUtilVirtualDrive.PostStorageFlexUtilVirtualDrivesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "physicaldiskextensions",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_physical_disk_extension.NewPostStoragePhysicalDiskExtensionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StoragePhysicalDiskExtension.PostStoragePhysicalDiskExtensionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "physicaldisks",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_physical_disk.NewPostStoragePhysicalDisksMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StoragePhysicalDisk.PostStoragePhysicalDisksMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "physicaldiskusages",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_physical_disk_usage.NewPostStoragePhysicalDiskUsagesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StoragePhysicalDiskUsage.PostStoragePhysicalDiskUsagesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "purearrays",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_pure_array.NewPostStoragePureArraysMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StoragePureArray.PostStoragePureArraysMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "sasexpanders",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_sas_expander.NewPostStorageSasExpandersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageSasExpander.PostStorageSasExpandersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "storagepolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := storage_storage_policy.NewPostStorageStoragePoliciesParams()

											res, err := apiClient.StorageStoragePolicy.PostStorageStoragePolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_storage_policy.NewPostStorageStoragePoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageStoragePolicy.PostStorageStoragePoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "vdmembereps",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_vd_member_ep.NewPostStorageVdMemberEpsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageVdMemberEp.PostStorageVdMemberEpsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "virtualdriveextensions",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_virtual_drive_extension.NewPostStorageVirtualDriveExtensionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageVirtualDriveExtension.PostStorageVirtualDriveExtensionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "virtualdrives",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := storage_virtual_drive.NewPostStorageVirtualDrivesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.StorageVirtualDrive.PostStorageVirtualDrivesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "syslog",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := syslog_policy.NewPostSyslogPoliciesParams()

											res, err := apiClient.SyslogPolicy.PostSyslogPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := syslog_policy.NewPostSyslogPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.SyslogPolicy.PostSyslogPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "tam",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "advisoryinstances",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := tam_advisory_instance.NewPostTamAdvisoryInstancesParams()

											res, err := apiClient.TamAdvisoryInstance.PostTamAdvisoryInstances(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := tam_advisory_instance.NewPostTamAdvisoryInstancesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TamAdvisoryInstance.PostTamAdvisoryInstancesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "securityadvisories",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := tam_security_advisory.NewPostTamSecurityAdvisoriesParams()

											res, err := apiClient.TamSecurityAdvisory.PostTamSecurityAdvisories(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := tam_security_advisory.NewPostTamSecurityAdvisoriesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TamSecurityAdvisory.PostTamSecurityAdvisoriesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "task",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "purestoragescopedinventories",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := task_pure_storage_scoped_inventory.NewPostTaskPureStorageScopedInventoriesParams()

											res, err := apiClient.TaskPureStorageScopedInventory.PostTaskPureStorageScopedInventories(params)
											resultHandler(res, err)
										},
									}

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "workflowactions",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := task_workflow_action.NewPostTaskWorkflowActionsParams()

											res, err := apiClient.TaskWorkflowAction.PostTaskWorkflowActions(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := task_workflow_action.NewPostTaskWorkflowActionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TaskWorkflowAction.PostTaskWorkflowActionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "telemetry",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "timeseries",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := telemetry_time_series.NewPostTelemetryTimeSeriesParams()

											res, err := apiClient.TelemetryTimeSeries.PostTelemetryTimeSeries(params)
											resultHandler(res, err)
										},
									}

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "testcrypt",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "administrators",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := testcrypt_administrator.NewPostTestcryptAdministratorsParams()

											res, err := apiClient.TestcryptAdministrator.PostTestcryptAdministrators(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := testcrypt_administrator.NewPostTestcryptAdministratorsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TestcryptAdministrator.PostTestcryptAdministratorsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "credentials",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := testcrypt_credential.NewPostTestcryptCredentialsParams()

											res, err := apiClient.TestcryptCredential.PostTestcryptCredentials(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := testcrypt_credential.NewPostTestcryptCredentialsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TestcryptCredential.PostTestcryptCredentialsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "readonlyusers",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := testcrypt_read_only_user.NewPostTestcryptReadOnlyUsersParams()

											res, err := apiClient.TestcryptReadOnlyUser.PostTestcryptReadOnlyUsers(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := testcrypt_read_only_user.NewPostTestcryptReadOnlyUsersMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TestcryptReadOnlyUser.PostTestcryptReadOnlyUsersMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "tokenapis",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := testcrypt_token_api.NewPostTestcryptTokenApisParams()

											res, err := apiClient.TestcryptTokenAPI.PostTestcryptTokenApis(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := testcrypt_token_api.NewPostTestcryptTokenApisMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TestcryptTokenAPI.PostTestcryptTokenApisMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "top",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "systems",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := top_system.NewPostTopSystemsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.TopSystem.PostTopSystemsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "vmedia",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "policies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := vmedia_policy.NewPostVmediaPoliciesParams()

											res, err := apiClient.VmediaPolicy.PostVmediaPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vmedia_policy.NewPostVmediaPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VmediaPolicy.PostVmediaPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "vnic",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ethadapterpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := vnic_eth_adapter_policy.NewPostVnicEthAdapterPoliciesParams()

											res, err := apiClient.VnicEthAdapterPolicy.PostVnicEthAdapterPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_eth_adapter_policy.NewPostVnicEthAdapterPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicEthAdapterPolicy.PostVnicEthAdapterPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ethifs",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := vnic_eth_if.NewPostVnicEthIfsParams()

											res, err := apiClient.VnicEthIf.PostVnicEthIfs(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_eth_if.NewPostVnicEthIfsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicEthIf.PostVnicEthIfsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ethnetworkpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := vnic_eth_network_policy.NewPostVnicEthNetworkPoliciesParams()

											res, err := apiClient.VnicEthNetworkPolicy.PostVnicEthNetworkPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_eth_network_policy.NewPostVnicEthNetworkPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicEthNetworkPolicy.PostVnicEthNetworkPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "ethqospolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := vnic_eth_qos_policy.NewPostVnicEthQosPoliciesParams()

											res, err := apiClient.VnicEthQosPolicy.PostVnicEthQosPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_eth_qos_policy.NewPostVnicEthQosPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicEthQosPolicy.PostVnicEthQosPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "fcadapterpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := vnic_fc_adapter_policy.NewPostVnicFcAdapterPoliciesParams()

											res, err := apiClient.VnicFcAdapterPolicy.PostVnicFcAdapterPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_fc_adapter_policy.NewPostVnicFcAdapterPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicFcAdapterPolicy.PostVnicFcAdapterPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "fcifs",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := vnic_fc_if.NewPostVnicFcIfsParams()

											res, err := apiClient.VnicFcIf.PostVnicFcIfs(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_fc_if.NewPostVnicFcIfsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicFcIf.PostVnicFcIfsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "fcnetworkpolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := vnic_fc_network_policy.NewPostVnicFcNetworkPoliciesParams()

											res, err := apiClient.VnicFcNetworkPolicy.PostVnicFcNetworkPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_fc_network_policy.NewPostVnicFcNetworkPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicFcNetworkPolicy.PostVnicFcNetworkPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "fcqospolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := vnic_fc_qos_policy.NewPostVnicFcQosPoliciesParams()

											res, err := apiClient.VnicFcQosPolicy.PostVnicFcQosPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_fc_qos_policy.NewPostVnicFcQosPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicFcQosPolicy.PostVnicFcQosPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "lanconnectivitypolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := vnic_lan_connectivity_policy.NewPostVnicLanConnectivityPoliciesParams()

											res, err := apiClient.VnicLanConnectivityPolicy.PostVnicLanConnectivityPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_lan_connectivity_policy.NewPostVnicLanConnectivityPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicLanConnectivityPolicy.PostVnicLanConnectivityPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "sanconnectivitypolicies",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := vnic_san_connectivity_policy.NewPostVnicSanConnectivityPoliciesParams()

											res, err := apiClient.VnicSanConnectivityPolicy.PostVnicSanConnectivityPolicies(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := vnic_san_connectivity_policy.NewPostVnicSanConnectivityPoliciesMoidParams()

													params.Moid = args[0]

													res, err := apiClient.VnicSanConnectivityPolicy.PostVnicSanConnectivityPoliciesMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					cmd.AddCommand(
						func() *cobra.Command {
							cmd := &cobra.Command{
								Use: "workflow",
							}

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "batchapiexecutors",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := workflow_batch_api_executor.NewPostWorkflowBatchAPIExecutorsParams()

											res, err := apiClient.WorkflowBatchAPIExecutor.PostWorkflowBatchAPIExecutors(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := workflow_batch_api_executor.NewPostWorkflowBatchAPIExecutorsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.WorkflowBatchAPIExecutor.PostWorkflowBatchAPIExecutorsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "taskdefinitions",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := workflow_task_definition.NewPostWorkflowTaskDefinitionsParams()

											res, err := apiClient.WorkflowTaskDefinition.PostWorkflowTaskDefinitions(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := workflow_task_definition.NewPostWorkflowTaskDefinitionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.WorkflowTaskDefinition.PostWorkflowTaskDefinitionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "taskinfos",
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := workflow_task_info.NewPostWorkflowTaskInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.WorkflowTaskInfo.PostWorkflowTaskInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "workflowdefinitions",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := workflow_workflow_definition.NewPostWorkflowWorkflowDefinitionsParams()

											res, err := apiClient.WorkflowWorkflowDefinition.PostWorkflowWorkflowDefinitions(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := workflow_workflow_definition.NewPostWorkflowWorkflowDefinitionsMoidParams()

													params.Moid = args[0]

													res, err := apiClient.WorkflowWorkflowDefinition.PostWorkflowWorkflowDefinitionsMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							cmd.AddCommand(
								func() *cobra.Command {
									cmd := &cobra.Command{
										Use: "workflowinfos",

										Run: func(cmd *cobra.Command, args []string) {
											apiClient := client.New(transport, strfmt.Default)

											params := workflow_workflow_info.NewPostWorkflowWorkflowInfosParams()

											res, err := apiClient.WorkflowWorkflowInfo.PostWorkflowWorkflowInfos(params)
											resultHandler(res, err)
										},
									}

									cmd.AddCommand(
										func() *cobra.Command {
											cmd := &cobra.Command{
												Use: "moid",

												Run: func(cmd *cobra.Command, args []string) {
													apiClient := client.New(transport, strfmt.Default)

													params := workflow_workflow_info.NewPostWorkflowWorkflowInfosMoidParams()

													params.Moid = args[0]

													res, err := apiClient.WorkflowWorkflowInfo.PostWorkflowWorkflowInfosMoid(params)
													resultHandler(res, err)
												},

												Args: cobra.ExactArgs(1),
											}

											return cmd
										}())

									return cmd
								}())

							return cmd
						}())

					return cmd
				}())

			return cmd
		}()
	return rootCmd
}
