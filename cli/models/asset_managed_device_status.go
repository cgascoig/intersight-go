// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssetManagedDeviceStatus Asset:Managed Device Status
//
// Maintains the Managed Device Status.
//
// swagger:model assetManagedDeviceStatus
type AssetManagedDeviceStatus struct {

	// Port used for the connection to the Cloud by the Device Connector for the Managed Device.
	//
	CloudPort int64 `json:"CloudPort,omitempty"`

	// Maintains the reason for the failure of connection to the Device in case of connection failure.
	//
	ConnectionFailureReason string `json:"ConnectionFailureReason,omitempty"`

	// Maintains the status of the connection to the Device.
	//
	// Enum: [Unknown Success Failure]
	ConnectionStatus *string `json:"ConnectionStatus,omitempty"`

	// Maintains code related to error from Device Connector, if any.
	//
	ErrorCode int64 `json:"ErrorCode,omitempty"`

	// Maintains the reason for the error from Device Connector, if any.
	//
	ErrorReason string `json:"ErrorReason,omitempty"`

	// Maintains the Process pid of the the Device Connector for the Managed Device.
	//
	ProcessID int64 `json:"ProcessId,omitempty"`

	// Port used for receiving requests from Device Connector Manager by the Device Connector for the Managed Device.
	//
	ServerPort int64 `json:"ServerPort,omitempty"`

	// Maintains the state of the Managed Device, such as Start Success, Start Failure, etc. See ManagedDeviceState for device connection states.
	//
	// Enum: [New StartSent StartSentFailure StartSuccess StartFailure UpdateSentFailure UpdateSent DeleteSentFailure DeleteInProgress DeleteFailure]
	State *string `json:"State,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AssetManagedDeviceStatus) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		CloudPort int64 `json:"CloudPort,omitempty"`

		ConnectionFailureReason string `json:"ConnectionFailureReason,omitempty"`

		ConnectionStatus *string `json:"ConnectionStatus,omitempty"`

		ErrorCode int64 `json:"ErrorCode,omitempty"`

		ErrorReason string `json:"ErrorReason,omitempty"`

		ProcessID int64 `json:"ProcessId,omitempty"`

		ServerPort int64 `json:"ServerPort,omitempty"`

		State *string `json:"State,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.CloudPort = dataAO0.CloudPort

	m.ConnectionFailureReason = dataAO0.ConnectionFailureReason

	m.ConnectionStatus = dataAO0.ConnectionStatus

	m.ErrorCode = dataAO0.ErrorCode

	m.ErrorReason = dataAO0.ErrorReason

	m.ProcessID = dataAO0.ProcessID

	m.ServerPort = dataAO0.ServerPort

	m.State = dataAO0.State

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AssetManagedDeviceStatus) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		CloudPort int64 `json:"CloudPort,omitempty"`

		ConnectionFailureReason string `json:"ConnectionFailureReason,omitempty"`

		ConnectionStatus *string `json:"ConnectionStatus,omitempty"`

		ErrorCode int64 `json:"ErrorCode,omitempty"`

		ErrorReason string `json:"ErrorReason,omitempty"`

		ProcessID int64 `json:"ProcessId,omitempty"`

		ServerPort int64 `json:"ServerPort,omitempty"`

		State *string `json:"State,omitempty"`
	}

	dataAO0.CloudPort = m.CloudPort

	dataAO0.ConnectionFailureReason = m.ConnectionFailureReason

	dataAO0.ConnectionStatus = m.ConnectionStatus

	dataAO0.ErrorCode = m.ErrorCode

	dataAO0.ErrorReason = m.ErrorReason

	dataAO0.ProcessID = m.ProcessID

	dataAO0.ServerPort = m.ServerPort

	dataAO0.State = m.State

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this asset managed device status
func (m *AssetManagedDeviceStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var assetManagedDeviceStatusTypeConnectionStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Success","Failure"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assetManagedDeviceStatusTypeConnectionStatusPropEnum = append(assetManagedDeviceStatusTypeConnectionStatusPropEnum, v)
	}
}

// property enum
func (m *AssetManagedDeviceStatus) validateConnectionStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, assetManagedDeviceStatusTypeConnectionStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AssetManagedDeviceStatus) validateConnectionStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectionStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateConnectionStatusEnum("ConnectionStatus", "body", *m.ConnectionStatus); err != nil {
		return err
	}

	return nil
}

var assetManagedDeviceStatusTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["New","StartSent","StartSentFailure","StartSuccess","StartFailure","UpdateSentFailure","UpdateSent","DeleteSentFailure","DeleteInProgress","DeleteFailure"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assetManagedDeviceStatusTypeStatePropEnum = append(assetManagedDeviceStatusTypeStatePropEnum, v)
	}
}

// property enum
func (m *AssetManagedDeviceStatus) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, assetManagedDeviceStatusTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AssetManagedDeviceStatus) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("State", "body", *m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetManagedDeviceStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetManagedDeviceStatus) UnmarshalBinary(b []byte) error {
	var res AssetManagedDeviceStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
