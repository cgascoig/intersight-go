// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// BootDeviceBase Boot:Device Base
//
// Lists properties that are common to all device types. It serves as base class for other device types.
//
// swagger:model bootDeviceBase
type BootDeviceBase struct {

	// Specifies if the boot device is enabled or disabled.
	//
	Enabled bool `json:"Enabled,omitempty"`

	// A name that helps identify a boot device. It can be any string that adheres to the following constraints. It should start and end with an alphanumeric character. It can have underscores and hyphens. It cannot be more than 30 characters.
	//
	Name string `json:"Name,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *BootDeviceBase) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Enabled bool `json:"Enabled,omitempty"`

		Name string `json:"Name,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Enabled = dataAO0.Enabled

	m.Name = dataAO0.Name

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m BootDeviceBase) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Enabled bool `json:"Enabled,omitempty"`

		Name string `json:"Name,omitempty"`
	}

	dataAO0.Enabled = m.Enabled

	dataAO0.Name = m.Name

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this boot device base
func (m *BootDeviceBase) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *BootDeviceBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BootDeviceBase) UnmarshalBinary(b []byte) error {
	var res BootDeviceBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
