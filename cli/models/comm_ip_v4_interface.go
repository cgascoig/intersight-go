// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CommIPV4Interface Comm:Ip V4 Interface
//
// The configuration data of a single IPv4 interface, including IP address, netmask, and default gateway.
//
// swagger:model commIpV4Interface
type CommIPV4Interface struct {

	// The IPv4 address of the default gateway.
	//
	Gateway string `json:"Gateway,omitempty"`

	// The IPv4 Address, represented in the standard dot-decimal notation, e.g. 192.168.1.3.
	//
	IPAddress string `json:"IpAddress,omitempty"`

	// The IPv4 Netmask, represented in the standard dot-decimal notation, e.g. 255.255.255.0.
	//
	Netmask string `json:"Netmask,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CommIPV4Interface) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Gateway string `json:"Gateway,omitempty"`

		IPAddress string `json:"IpAddress,omitempty"`

		Netmask string `json:"Netmask,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Gateway = dataAO0.Gateway

	m.IPAddress = dataAO0.IPAddress

	m.Netmask = dataAO0.Netmask

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CommIPV4Interface) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Gateway string `json:"Gateway,omitempty"`

		IPAddress string `json:"IpAddress,omitempty"`

		Netmask string `json:"Netmask,omitempty"`
	}

	dataAO0.Gateway = m.Gateway

	dataAO0.IPAddress = m.IPAddress

	dataAO0.Netmask = m.Netmask

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this comm Ip v4 interface
func (m *CommIPV4Interface) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *CommIPV4Interface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommIPV4Interface) UnmarshalBinary(b []byte) error {
	var res CommIPV4Interface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
