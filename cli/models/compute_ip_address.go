// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComputeIPAddress Compute:Ip Address
//
// Complex type representing an ip address in UCSM.
//
// swagger:model computeIpAddress
type ComputeIPAddress struct {

	// address
	// Read Only: true
	Address string `json:"Address,omitempty"`

	// category
	// Read Only: true
	// Enum: [Equipment ServiceProfile]
	Category string `json:"Category,omitempty"`

	// default gateway
	// Read Only: true
	DefaultGateway string `json:"DefaultGateway,omitempty"`

	// dn
	// Read Only: true
	Dn string `json:"Dn,omitempty"`

	// Http port
	// Read Only: true
	HTTPPort int64 `json:"HttpPort,omitempty"`

	// Https port
	// Read Only: true
	HTTPSPort int64 `json:"HttpsPort,omitempty"`

	// kvm port
	// Read Only: true
	KvmPort int64 `json:"KvmPort,omitempty"`

	// name
	// Read Only: true
	// Enum: [Outband Inband]
	Name string `json:"Name,omitempty"`

	// subnet
	// Read Only: true
	Subnet string `json:"Subnet,omitempty"`

	// type
	// Read Only: true
	// Enum: [MgmtInterface VnicIpV4StaticAddr VnicIpV4PooledAddr VnicIpV4MgmtPooledAddr VnicIpV6StaticAddr VnicIpV6MgmtPooledAddr VnicIpV4ProfDerivedAddr]
	Type string `json:"Type,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ComputeIPAddress) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Address string `json:"Address,omitempty"`

		Category string `json:"Category,omitempty"`

		DefaultGateway string `json:"DefaultGateway,omitempty"`

		Dn string `json:"Dn,omitempty"`

		HTTPPort int64 `json:"HttpPort,omitempty"`

		HTTPSPort int64 `json:"HttpsPort,omitempty"`

		KvmPort int64 `json:"KvmPort,omitempty"`

		Name string `json:"Name,omitempty"`

		Subnet string `json:"Subnet,omitempty"`

		Type string `json:"Type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Address = dataAO0.Address

	m.Category = dataAO0.Category

	m.DefaultGateway = dataAO0.DefaultGateway

	m.Dn = dataAO0.Dn

	m.HTTPPort = dataAO0.HTTPPort

	m.HTTPSPort = dataAO0.HTTPSPort

	m.KvmPort = dataAO0.KvmPort

	m.Name = dataAO0.Name

	m.Subnet = dataAO0.Subnet

	m.Type = dataAO0.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ComputeIPAddress) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Address string `json:"Address,omitempty"`

		Category string `json:"Category,omitempty"`

		DefaultGateway string `json:"DefaultGateway,omitempty"`

		Dn string `json:"Dn,omitempty"`

		HTTPPort int64 `json:"HttpPort,omitempty"`

		HTTPSPort int64 `json:"HttpsPort,omitempty"`

		KvmPort int64 `json:"KvmPort,omitempty"`

		Name string `json:"Name,omitempty"`

		Subnet string `json:"Subnet,omitempty"`

		Type string `json:"Type,omitempty"`
	}

	dataAO0.Address = m.Address

	dataAO0.Category = m.Category

	dataAO0.DefaultGateway = m.DefaultGateway

	dataAO0.Dn = m.Dn

	dataAO0.HTTPPort = m.HTTPPort

	dataAO0.HTTPSPort = m.HTTPSPort

	dataAO0.KvmPort = m.KvmPort

	dataAO0.Name = m.Name

	dataAO0.Subnet = m.Subnet

	dataAO0.Type = m.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this compute Ip address
func (m *ComputeIPAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var computeIpAddressTypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Equipment","ServiceProfile"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		computeIpAddressTypeCategoryPropEnum = append(computeIpAddressTypeCategoryPropEnum, v)
	}
}

// property enum
func (m *ComputeIPAddress) validateCategoryEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, computeIpAddressTypeCategoryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComputeIPAddress) validateCategory(formats strfmt.Registry) error {

	if swag.IsZero(m.Category) { // not required
		return nil
	}

	// value enum
	if err := m.validateCategoryEnum("Category", "body", m.Category); err != nil {
		return err
	}

	return nil
}

var computeIpAddressTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Outband","Inband"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		computeIpAddressTypeNamePropEnum = append(computeIpAddressTypeNamePropEnum, v)
	}
}

// property enum
func (m *ComputeIPAddress) validateNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, computeIpAddressTypeNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComputeIPAddress) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("Name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var computeIpAddressTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MgmtInterface","VnicIpV4StaticAddr","VnicIpV4PooledAddr","VnicIpV4MgmtPooledAddr","VnicIpV6StaticAddr","VnicIpV6MgmtPooledAddr","VnicIpV4ProfDerivedAddr"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		computeIpAddressTypeTypePropEnum = append(computeIpAddressTypeTypePropEnum, v)
	}
}

// property enum
func (m *ComputeIPAddress) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, computeIpAddressTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComputeIPAddress) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComputeIPAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComputeIPAddress) UnmarshalBinary(b []byte) error {
	var res ComputeIPAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
