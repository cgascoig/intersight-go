// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ConnectorURL Connector:Url
//
// The URL to proxy the request to.
//
// swagger:model connectorUrl
type ConnectorURL struct {

	// Flag to append a query to the url even if rawQuery is empty.
	//
	ForceQuery bool `json:"ForceQuery,omitempty"`

	// The fragment identifier component of a URI allows indirect identification of a secondary resource by reference to a primary resource and additional identifying information. The identified secondary resource may be some portion or subset of the primary resource, some view on representations of the primary resource, or some other resource defined or described by those representations. A fragment identifier component is indicated by the presence of a number sign ("#") character and terminated by the end of the URI.
	//
	//
	Fragment string `json:"Fragment,omitempty"`

	// The host name identifies the host that holds the resource. The host can be an IP or a hostname that is resolvable by the dns server configured on the platform.
	//
	Host string `json:"Host,omitempty"`

	// A URI is opaque if, and only if, it is absolute and its scheme-specific part does not begin with a slash character ('/'). An opaque URI has a scheme, a scheme-specific part, and possibly a fragment; all other components are undefined.
	//
	Opaque string `json:"Opaque,omitempty"`

	// The path identifies the specific resource in the host that the web client wants to access. Value is the decoded form of the path. e.g. '/foo/bar'.
	//
	Path string `json:"Path,omitempty"`

	// The URI encoded form of the path property. e.g. '%2Fapi%2Fv1%2F'.
	//
	RawPath string `json:"RawPath,omitempty"`

	// The query component, as defined in RFC 3986, contains non-hierarchical data that, along with data in the path component, serves to identify a resource within the scope of the URI's scheme and naming authority (if any). The query component is indicated by the first question mark character and terminated by a number sign character or by the end of the URI.
	// The rawQuery contains the URIs encoded query component, excluding the ? character.
	//
	//
	RawQuery string `json:"RawQuery,omitempty"`

	// The scheme identifies the protocol to be used to access the resource on the Internet. It can be HTTP (without SSL) or HTTPS (with SSL).
	//
	Scheme string `json:"Scheme,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ConnectorURL) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ForceQuery bool `json:"ForceQuery,omitempty"`

		Fragment string `json:"Fragment,omitempty"`

		Host string `json:"Host,omitempty"`

		Opaque string `json:"Opaque,omitempty"`

		Path string `json:"Path,omitempty"`

		RawPath string `json:"RawPath,omitempty"`

		RawQuery string `json:"RawQuery,omitempty"`

		Scheme string `json:"Scheme,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.ForceQuery = dataAO0.ForceQuery

	m.Fragment = dataAO0.Fragment

	m.Host = dataAO0.Host

	m.Opaque = dataAO0.Opaque

	m.Path = dataAO0.Path

	m.RawPath = dataAO0.RawPath

	m.RawQuery = dataAO0.RawQuery

	m.Scheme = dataAO0.Scheme

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ConnectorURL) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		ForceQuery bool `json:"ForceQuery,omitempty"`

		Fragment string `json:"Fragment,omitempty"`

		Host string `json:"Host,omitempty"`

		Opaque string `json:"Opaque,omitempty"`

		Path string `json:"Path,omitempty"`

		RawPath string `json:"RawPath,omitempty"`

		RawQuery string `json:"RawQuery,omitempty"`

		Scheme string `json:"Scheme,omitempty"`
	}

	dataAO0.ForceQuery = m.ForceQuery

	dataAO0.Fragment = m.Fragment

	dataAO0.Host = m.Host

	dataAO0.Opaque = m.Opaque

	dataAO0.Path = m.Path

	dataAO0.RawPath = m.RawPath

	dataAO0.RawQuery = m.RawQuery

	dataAO0.Scheme = m.Scheme

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this connector Url
func (m *ConnectorURL) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ConnectorURL) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectorURL) UnmarshalBinary(b []byte) error {
	var res ConnectorURL
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
