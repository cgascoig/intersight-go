// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ContentComplexType Complex Type
//
// If the given API/device response is a collection of items, each item and
// its properties can be modeled as a complex type.
//
// The types are uniquely named within the grammar and provides the list of
// parameters to be extracted from each item. Name of the complex type can be
// used as the type of parameter that represents the complex value.
//
// swagger:model contentComplexType
type ContentComplexType struct {

	// The unique name of this complex type within the grammar specification.
	//
	//
	Name string `json:"Name,omitempty"`

	// The collection of parameters that are part of this complex type.
	//
	//
	Parameters []*ContentParameter `json:"Parameters"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ContentComplexType) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Name string `json:"Name,omitempty"`

		Parameters []*ContentParameter `json:"Parameters"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Name = dataAO0.Name

	m.Parameters = dataAO0.Parameters

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ContentComplexType) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Name string `json:"Name,omitempty"`

		Parameters []*ContentParameter `json:"Parameters"`
	}

	dataAO0.Name = m.Name

	dataAO0.Parameters = m.Parameters

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this content complex type
func (m *ContentComplexType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContentComplexType) validateParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContentComplexType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentComplexType) UnmarshalBinary(b []byte) error {
	var res ContentComplexType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
