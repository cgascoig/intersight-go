// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContentParameter Parameter
//
// A parameter is a definition of specific value to be extracted from a given API or
// device response.
//
// The Parameter object provides the name, type and content specific path, such as XPath or
// JSONPath, that points to the location of the parameter value in the content.
//
// swagger:model contentParameter
type ContentParameter struct {

	// The flag that allows single values in content to be extracted as a
	// single element collection in case the parameter is of Collection type.
	//
	// This flag is applicable for parameters of type Collection only.
	//
	//
	AcceptSingleValue bool `json:"AcceptSingleValue,omitempty"`

	// The name of the complex type definition in case this is a complex
	// parameter. The content.Grammar object must have a complex type, content.ComplexType,
	// defined with the specified name in types collection property.
	//
	//
	ComplexType string `json:"ComplexType,omitempty"`

	// The type of the collection item in case this is a collection parameter.
	//
	//
	// Enum: [simple complex collection]
	ItemType *string `json:"ItemType,omitempty"`

	// The name of the parameter.
	//
	Name string `json:"Name,omitempty"`

	// The content specific path information that identifies the parameter
	// value within the content. The value is usually a XPath or JSONPath or a
	// regular expression in case of text content.
	//
	//
	Path string `json:"Path,omitempty"`

	// The type of the parameter. Accepted values are simple, complex,
	// collection.
	//
	//
	// Enum: [simple complex collection]
	Type *string `json:"Type,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ContentParameter) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		AcceptSingleValue bool `json:"AcceptSingleValue,omitempty"`

		ComplexType string `json:"ComplexType,omitempty"`

		ItemType *string `json:"ItemType,omitempty"`

		Name string `json:"Name,omitempty"`

		Path string `json:"Path,omitempty"`

		Type *string `json:"Type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.AcceptSingleValue = dataAO0.AcceptSingleValue

	m.ComplexType = dataAO0.ComplexType

	m.ItemType = dataAO0.ItemType

	m.Name = dataAO0.Name

	m.Path = dataAO0.Path

	m.Type = dataAO0.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ContentParameter) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		AcceptSingleValue bool `json:"AcceptSingleValue,omitempty"`

		ComplexType string `json:"ComplexType,omitempty"`

		ItemType *string `json:"ItemType,omitempty"`

		Name string `json:"Name,omitempty"`

		Path string `json:"Path,omitempty"`

		Type *string `json:"Type,omitempty"`
	}

	dataAO0.AcceptSingleValue = m.AcceptSingleValue

	dataAO0.ComplexType = m.ComplexType

	dataAO0.ItemType = m.ItemType

	dataAO0.Name = m.Name

	dataAO0.Path = m.Path

	dataAO0.Type = m.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this content parameter
func (m *ContentParameter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateItemType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var contentParameterTypeItemTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["simple","complex","collection"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contentParameterTypeItemTypePropEnum = append(contentParameterTypeItemTypePropEnum, v)
	}
}

// property enum
func (m *ContentParameter) validateItemTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, contentParameterTypeItemTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ContentParameter) validateItemType(formats strfmt.Registry) error {

	if swag.IsZero(m.ItemType) { // not required
		return nil
	}

	// value enum
	if err := m.validateItemTypeEnum("ItemType", "body", *m.ItemType); err != nil {
		return err
	}

	return nil
}

var contentParameterTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["simple","complex","collection"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contentParameterTypeTypePropEnum = append(contentParameterTypeTypePropEnum, v)
	}
}

// property enum
func (m *ContentParameter) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, contentParameterTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ContentParameter) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContentParameter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentParameter) UnmarshalBinary(b []byte) error {
	var res ContentParameter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
