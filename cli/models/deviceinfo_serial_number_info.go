// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DeviceinfoSerialNumberInfo Deviceinfo:Serial Number Info
//
// Contains information about the device identified by a Cisco Sytems serial number. It includes contract number and warranty related information. It also helps verify if a device is Cisco Systems recognized.
//
// swagger:model deviceinfoSerialNumberInfo
type DeviceinfoSerialNumberInfo struct {
	MoBaseMo

	// covered product line end date
	// Read Only: true
	CoveredProductLineEndDate string `json:"CoveredProductLineEndDate,omitempty"`

	// customer address
	// Read Only: true
	CustomerAddress string `json:"CustomerAddress,omitempty"`

	// customer city
	// Read Only: true
	CustomerCity string `json:"CustomerCity,omitempty"`

	// customer country
	// Read Only: true
	CustomerCountry string `json:"CustomerCountry,omitempty"`

	// customer name
	// Read Only: true
	CustomerName string `json:"CustomerName,omitempty"`

	// customer province
	// Read Only: true
	CustomerProvince string `json:"CustomerProvince,omitempty"`

	// is valid
	// Read Only: true
	IsValid *bool `json:"IsValid,omitempty"`

	// item description
	// Read Only: true
	ItemDescription string `json:"ItemDescription,omitempty"`

	// orderable pid
	// Read Only: true
	OrderablePid string `json:"OrderablePid,omitempty"`

	// registered device
	// Read Only: true
	RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

	// Serial number of the Cisco device. Serial number is a unique identifier assigned to a device.
	//
	// Read Only: true
	SerialNumber string `json:"SerialNumber,omitempty"`

	// service contract number
	// Read Only: true
	ServiceContractNumber string `json:"ServiceContractNumber,omitempty"`

	// service line descr
	// Read Only: true
	ServiceLineDescr string `json:"ServiceLineDescr,omitempty"`

	// warranty end date
	// Read Only: true
	WarrantyEndDate string `json:"WarrantyEndDate,omitempty"`

	// warranty type
	// Read Only: true
	WarrantyType string `json:"WarrantyType,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DeviceinfoSerialNumberInfo) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		CoveredProductLineEndDate string `json:"CoveredProductLineEndDate,omitempty"`

		CustomerAddress string `json:"CustomerAddress,omitempty"`

		CustomerCity string `json:"CustomerCity,omitempty"`

		CustomerCountry string `json:"CustomerCountry,omitempty"`

		CustomerName string `json:"CustomerName,omitempty"`

		CustomerProvince string `json:"CustomerProvince,omitempty"`

		IsValid *bool `json:"IsValid,omitempty"`

		ItemDescription string `json:"ItemDescription,omitempty"`

		OrderablePid string `json:"OrderablePid,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		SerialNumber string `json:"SerialNumber,omitempty"`

		ServiceContractNumber string `json:"ServiceContractNumber,omitempty"`

		ServiceLineDescr string `json:"ServiceLineDescr,omitempty"`

		WarrantyEndDate string `json:"WarrantyEndDate,omitempty"`

		WarrantyType string `json:"WarrantyType,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CoveredProductLineEndDate = dataAO1.CoveredProductLineEndDate

	m.CustomerAddress = dataAO1.CustomerAddress

	m.CustomerCity = dataAO1.CustomerCity

	m.CustomerCountry = dataAO1.CustomerCountry

	m.CustomerName = dataAO1.CustomerName

	m.CustomerProvince = dataAO1.CustomerProvince

	m.IsValid = dataAO1.IsValid

	m.ItemDescription = dataAO1.ItemDescription

	m.OrderablePid = dataAO1.OrderablePid

	m.RegisteredDevice = dataAO1.RegisteredDevice

	m.SerialNumber = dataAO1.SerialNumber

	m.ServiceContractNumber = dataAO1.ServiceContractNumber

	m.ServiceLineDescr = dataAO1.ServiceLineDescr

	m.WarrantyEndDate = dataAO1.WarrantyEndDate

	m.WarrantyType = dataAO1.WarrantyType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DeviceinfoSerialNumberInfo) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		CoveredProductLineEndDate string `json:"CoveredProductLineEndDate,omitempty"`

		CustomerAddress string `json:"CustomerAddress,omitempty"`

		CustomerCity string `json:"CustomerCity,omitempty"`

		CustomerCountry string `json:"CustomerCountry,omitempty"`

		CustomerName string `json:"CustomerName,omitempty"`

		CustomerProvince string `json:"CustomerProvince,omitempty"`

		IsValid *bool `json:"IsValid,omitempty"`

		ItemDescription string `json:"ItemDescription,omitempty"`

		OrderablePid string `json:"OrderablePid,omitempty"`

		RegisteredDevice *AssetDeviceRegistrationRef `json:"RegisteredDevice,omitempty"`

		SerialNumber string `json:"SerialNumber,omitempty"`

		ServiceContractNumber string `json:"ServiceContractNumber,omitempty"`

		ServiceLineDescr string `json:"ServiceLineDescr,omitempty"`

		WarrantyEndDate string `json:"WarrantyEndDate,omitempty"`

		WarrantyType string `json:"WarrantyType,omitempty"`
	}

	dataAO1.CoveredProductLineEndDate = m.CoveredProductLineEndDate

	dataAO1.CustomerAddress = m.CustomerAddress

	dataAO1.CustomerCity = m.CustomerCity

	dataAO1.CustomerCountry = m.CustomerCountry

	dataAO1.CustomerName = m.CustomerName

	dataAO1.CustomerProvince = m.CustomerProvince

	dataAO1.IsValid = m.IsValid

	dataAO1.ItemDescription = m.ItemDescription

	dataAO1.OrderablePid = m.OrderablePid

	dataAO1.RegisteredDevice = m.RegisteredDevice

	dataAO1.SerialNumber = m.SerialNumber

	dataAO1.ServiceContractNumber = m.ServiceContractNumber

	dataAO1.ServiceLineDescr = m.ServiceLineDescr

	dataAO1.WarrantyEndDate = m.WarrantyEndDate

	dataAO1.WarrantyType = m.WarrantyType

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this deviceinfo serial number info
func (m *DeviceinfoSerialNumberInfo) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceinfoSerialNumberInfo) validateRegisteredDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.RegisteredDevice) { // not required
		return nil
	}

	if m.RegisteredDevice != nil {
		if err := m.RegisteredDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegisteredDevice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceinfoSerialNumberInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceinfoSerialNumberInfo) UnmarshalBinary(b []byte) error {
	var res DeviceinfoSerialNumberInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
