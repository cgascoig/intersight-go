// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FirmwareCifsServer Firmware:Cifs Server
//
// An external file repository accessible through the CIFS protocol.
//
// swagger:model firmwareCifsServer
type FirmwareCifsServer struct {

	// Mount option (Authentication Protocol) as configured on the CIFS Server. Example:ntlmv2.
	//
	// Enum: [none ntlm ntlmi ntlmv2 ntlmv2i ntlmssp ntlmsspi]
	MountOptions *string `json:"MountOptions,omitempty"`

	// Filename of the image in the remote share location. Example:ucs-c220m5-huu-3.1.2c.iso.
	//
	RemoteFile string `json:"RemoteFile,omitempty"`

	// CIFS Server Hostname or IP Address. Example:CIFS-server-hostname or 10.10.8.7.
	//
	RemoteIP string `json:"RemoteIp,omitempty"`

	// Directory where the image is stored. Example:share/subfolder.
	//
	RemoteShare string `json:"RemoteShare,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *FirmwareCifsServer) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		MountOptions *string `json:"MountOptions,omitempty"`

		RemoteFile string `json:"RemoteFile,omitempty"`

		RemoteIP string `json:"RemoteIp,omitempty"`

		RemoteShare string `json:"RemoteShare,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.MountOptions = dataAO0.MountOptions

	m.RemoteFile = dataAO0.RemoteFile

	m.RemoteIP = dataAO0.RemoteIP

	m.RemoteShare = dataAO0.RemoteShare

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m FirmwareCifsServer) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		MountOptions *string `json:"MountOptions,omitempty"`

		RemoteFile string `json:"RemoteFile,omitempty"`

		RemoteIP string `json:"RemoteIp,omitempty"`

		RemoteShare string `json:"RemoteShare,omitempty"`
	}

	dataAO0.MountOptions = m.MountOptions

	dataAO0.RemoteFile = m.RemoteFile

	dataAO0.RemoteIP = m.RemoteIP

	dataAO0.RemoteShare = m.RemoteShare

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this firmware cifs server
func (m *FirmwareCifsServer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMountOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var firmwareCifsServerTypeMountOptionsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","ntlm","ntlmi","ntlmv2","ntlmv2i","ntlmssp","ntlmsspi"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		firmwareCifsServerTypeMountOptionsPropEnum = append(firmwareCifsServerTypeMountOptionsPropEnum, v)
	}
}

// property enum
func (m *FirmwareCifsServer) validateMountOptionsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, firmwareCifsServerTypeMountOptionsPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FirmwareCifsServer) validateMountOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.MountOptions) { // not required
		return nil
	}

	// value enum
	if err := m.validateMountOptionsEnum("MountOptions", "body", *m.MountOptions); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FirmwareCifsServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirmwareCifsServer) UnmarshalBinary(b []byte) error {
	var res FirmwareCifsServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
