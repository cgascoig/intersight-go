// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FirmwareDirectDownload Firmware:Direct Download
//
// A specification for downloading the image from Cisco or appliance repository or user provided HTTP file server that hosts the image for firmware upgrade.
//
// swagger:model firmwareDirectDownload
type FirmwareDirectDownload struct {

	// HTTP Server option when the image source is a local https server.
	//
	HTTPServer *FirmwareHTTPServer `json:"HttpServer,omitempty"`

	// Source type referring the image to be downloaded from CCO or from a local https server.
	//
	// Enum: [cisco localHttp]
	ImageSource *string `json:"ImageSource,omitempty"`

	// is password set
	IsPasswordSet bool `json:"IsPasswordSet,omitempty"`

	// Password as configured on the local https server.
	//
	Password string `json:"Password,omitempty"`

	// Option to control the upgrade, e.g., sd_upgrade_mount_only - download the image into sd and upgrade wait for the server on-next boot.
	//
	// Enum: [sd_upgrade_mount_only sd_download_only sd_upgrade_only sd_upgrade_full]
	Upgradeoption *string `json:"Upgradeoption,omitempty"`

	// Username as configured on the local https server.
	//
	Username string `json:"Username,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *FirmwareDirectDownload) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		HTTPServer *FirmwareHTTPServer `json:"HttpServer,omitempty"`

		ImageSource *string `json:"ImageSource,omitempty"`

		IsPasswordSet bool `json:"IsPasswordSet,omitempty"`

		Password string `json:"Password,omitempty"`

		Upgradeoption *string `json:"Upgradeoption,omitempty"`

		Username string `json:"Username,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.HTTPServer = dataAO0.HTTPServer

	m.ImageSource = dataAO0.ImageSource

	m.IsPasswordSet = dataAO0.IsPasswordSet

	m.Password = dataAO0.Password

	m.Upgradeoption = dataAO0.Upgradeoption

	m.Username = dataAO0.Username

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m FirmwareDirectDownload) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		HTTPServer *FirmwareHTTPServer `json:"HttpServer,omitempty"`

		ImageSource *string `json:"ImageSource,omitempty"`

		IsPasswordSet bool `json:"IsPasswordSet,omitempty"`

		Password string `json:"Password,omitempty"`

		Upgradeoption *string `json:"Upgradeoption,omitempty"`

		Username string `json:"Username,omitempty"`
	}

	dataAO0.HTTPServer = m.HTTPServer

	dataAO0.ImageSource = m.ImageSource

	dataAO0.IsPasswordSet = m.IsPasswordSet

	dataAO0.Password = m.Password

	dataAO0.Upgradeoption = m.Upgradeoption

	dataAO0.Username = m.Username

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this firmware direct download
func (m *FirmwareDirectDownload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHTTPServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeoption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FirmwareDirectDownload) validateHTTPServer(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPServer) { // not required
		return nil
	}

	if m.HTTPServer != nil {
		if err := m.HTTPServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HttpServer")
			}
			return err
		}
	}

	return nil
}

var firmwareDirectDownloadTypeImageSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cisco","localHttp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		firmwareDirectDownloadTypeImageSourcePropEnum = append(firmwareDirectDownloadTypeImageSourcePropEnum, v)
	}
}

// property enum
func (m *FirmwareDirectDownload) validateImageSourceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, firmwareDirectDownloadTypeImageSourcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FirmwareDirectDownload) validateImageSource(formats strfmt.Registry) error {

	if swag.IsZero(m.ImageSource) { // not required
		return nil
	}

	// value enum
	if err := m.validateImageSourceEnum("ImageSource", "body", *m.ImageSource); err != nil {
		return err
	}

	return nil
}

var firmwareDirectDownloadTypeUpgradeoptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sd_upgrade_mount_only","sd_download_only","sd_upgrade_only","sd_upgrade_full"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		firmwareDirectDownloadTypeUpgradeoptionPropEnum = append(firmwareDirectDownloadTypeUpgradeoptionPropEnum, v)
	}
}

// property enum
func (m *FirmwareDirectDownload) validateUpgradeoptionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, firmwareDirectDownloadTypeUpgradeoptionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FirmwareDirectDownload) validateUpgradeoption(formats strfmt.Registry) error {

	if swag.IsZero(m.Upgradeoption) { // not required
		return nil
	}

	// value enum
	if err := m.validateUpgradeoptionEnum("Upgradeoption", "body", *m.Upgradeoption); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FirmwareDirectDownload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirmwareDirectDownload) UnmarshalBinary(b []byte) error {
	var res FirmwareDirectDownload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
