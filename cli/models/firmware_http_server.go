// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// FirmwareHTTPServer Firmware:Http Server
//
// An external HTTP file server.
//
// swagger:model firmwareHttpServer
type FirmwareHTTPServer struct {

	// HTTP/HTTPS link to the image. Accepted formats HTTP[s]://server-hostname/share/image or HTTP[s]://serverip/share/image.
	//
	LocationLink string `json:"LocationLink,omitempty"`

	// Mount option as configured on the HTTP server. Empty if nothing is configured.
	//
	MountOptions string `json:"MountOptions,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *FirmwareHTTPServer) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		LocationLink string `json:"LocationLink,omitempty"`

		MountOptions string `json:"MountOptions,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.LocationLink = dataAO0.LocationLink

	m.MountOptions = dataAO0.MountOptions

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m FirmwareHTTPServer) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		LocationLink string `json:"LocationLink,omitempty"`

		MountOptions string `json:"MountOptions,omitempty"`
	}

	dataAO0.LocationLink = m.LocationLink

	dataAO0.MountOptions = m.MountOptions

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this firmware Http server
func (m *FirmwareHTTPServer) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *FirmwareHTTPServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirmwareHTTPServer) UnmarshalBinary(b []byte) error {
	var res FirmwareHTTPServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
