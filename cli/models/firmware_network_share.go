// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FirmwareNetworkShare Firmware:Network Share
//
// Firmware upgrade where the image is located in remote shared machine.
//
// swagger:model firmwareNetworkShare
type FirmwareNetworkShare struct {

	// CIFS file server option for network share upgrade.
	//
	CifsServer *FirmwareCifsServer `json:"CifsServer,omitempty"`

	// HTTP (for WWW) file server option for network share upgrade.
	//
	HTTPServer *FirmwareHTTPServer `json:"HttpServer,omitempty"`

	// is password set
	IsPasswordSet bool `json:"IsPasswordSet,omitempty"`

	// File server protocols like CIFS, NFS, WWW for HTTP (S) that hosts the image.
	//
	// Enum: [nfs cifs www]
	MapType *string `json:"MapType,omitempty"`

	// NFS file server option for network share upgrade.
	//
	NfsServer *FirmwareNfsServer `json:"NfsServer,omitempty"`

	// Password as configured on the file server.
	//
	Password string `json:"Password,omitempty"`

	// Option to control the upgrade, e.g., 1) nw_upgrade_mount_only - mount the image from a file server and run upgrade on-next server boot 2) nw_upgrade_full - mount the image and run upgrade immediately.
	//
	// Enum: [nw_upgrade_full nw_upgrade_mount_only]
	Upgradeoption *string `json:"Upgradeoption,omitempty"`

	// Username as configured on the file server.
	//
	Username string `json:"Username,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *FirmwareNetworkShare) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		CifsServer *FirmwareCifsServer `json:"CifsServer,omitempty"`

		HTTPServer *FirmwareHTTPServer `json:"HttpServer,omitempty"`

		IsPasswordSet bool `json:"IsPasswordSet,omitempty"`

		MapType *string `json:"MapType,omitempty"`

		NfsServer *FirmwareNfsServer `json:"NfsServer,omitempty"`

		Password string `json:"Password,omitempty"`

		Upgradeoption *string `json:"Upgradeoption,omitempty"`

		Username string `json:"Username,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.CifsServer = dataAO0.CifsServer

	m.HTTPServer = dataAO0.HTTPServer

	m.IsPasswordSet = dataAO0.IsPasswordSet

	m.MapType = dataAO0.MapType

	m.NfsServer = dataAO0.NfsServer

	m.Password = dataAO0.Password

	m.Upgradeoption = dataAO0.Upgradeoption

	m.Username = dataAO0.Username

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m FirmwareNetworkShare) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		CifsServer *FirmwareCifsServer `json:"CifsServer,omitempty"`

		HTTPServer *FirmwareHTTPServer `json:"HttpServer,omitempty"`

		IsPasswordSet bool `json:"IsPasswordSet,omitempty"`

		MapType *string `json:"MapType,omitempty"`

		NfsServer *FirmwareNfsServer `json:"NfsServer,omitempty"`

		Password string `json:"Password,omitempty"`

		Upgradeoption *string `json:"Upgradeoption,omitempty"`

		Username string `json:"Username,omitempty"`
	}

	dataAO0.CifsServer = m.CifsServer

	dataAO0.HTTPServer = m.HTTPServer

	dataAO0.IsPasswordSet = m.IsPasswordSet

	dataAO0.MapType = m.MapType

	dataAO0.NfsServer = m.NfsServer

	dataAO0.Password = m.Password

	dataAO0.Upgradeoption = m.Upgradeoption

	dataAO0.Username = m.Username

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this firmware network share
func (m *FirmwareNetworkShare) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCifsServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMapType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfsServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeoption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FirmwareNetworkShare) validateCifsServer(formats strfmt.Registry) error {

	if swag.IsZero(m.CifsServer) { // not required
		return nil
	}

	if m.CifsServer != nil {
		if err := m.CifsServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CifsServer")
			}
			return err
		}
	}

	return nil
}

func (m *FirmwareNetworkShare) validateHTTPServer(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPServer) { // not required
		return nil
	}

	if m.HTTPServer != nil {
		if err := m.HTTPServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HttpServer")
			}
			return err
		}
	}

	return nil
}

var firmwareNetworkShareTypeMapTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["nfs","cifs","www"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		firmwareNetworkShareTypeMapTypePropEnum = append(firmwareNetworkShareTypeMapTypePropEnum, v)
	}
}

// property enum
func (m *FirmwareNetworkShare) validateMapTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, firmwareNetworkShareTypeMapTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FirmwareNetworkShare) validateMapType(formats strfmt.Registry) error {

	if swag.IsZero(m.MapType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMapTypeEnum("MapType", "body", *m.MapType); err != nil {
		return err
	}

	return nil
}

func (m *FirmwareNetworkShare) validateNfsServer(formats strfmt.Registry) error {

	if swag.IsZero(m.NfsServer) { // not required
		return nil
	}

	if m.NfsServer != nil {
		if err := m.NfsServer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NfsServer")
			}
			return err
		}
	}

	return nil
}

var firmwareNetworkShareTypeUpgradeoptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["nw_upgrade_full","nw_upgrade_mount_only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		firmwareNetworkShareTypeUpgradeoptionPropEnum = append(firmwareNetworkShareTypeUpgradeoptionPropEnum, v)
	}
}

// property enum
func (m *FirmwareNetworkShare) validateUpgradeoptionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, firmwareNetworkShareTypeUpgradeoptionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FirmwareNetworkShare) validateUpgradeoption(formats strfmt.Registry) error {

	if swag.IsZero(m.Upgradeoption) { // not required
		return nil
	}

	// value enum
	if err := m.validateUpgradeoptionEnum("Upgradeoption", "body", *m.Upgradeoption); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FirmwareNetworkShare) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirmwareNetworkShare) UnmarshalBinary(b []byte) error {
	var res FirmwareNetworkShare
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
