// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HclFirmware Hcl:Firmware
//
// Model which holds the details of firmware version and driver version.
//
// swagger:model hclFirmware
type HclFirmware struct {

	// Protocol for which the driver is provided. E.g.  enic, fnic, lsi_mr3.
	//
	DriverName string `json:"DriverName,omitempty"`

	// Version of the Driver supported.
	//
	DriverVersion string `json:"DriverVersion,omitempty"`

	// Error code for the support status.
	//
	// Read Only: true
	// Enum: [Success Unknown UnknownServer InvalidUcsVersion ProcessorNotSupported OSNotSupported OSUnknown UCSVersionNotSupported UcsVersionServerOSCombinationNotSupported ProductUnknown ProductNotSupported DriverNameNotSupported FirmwareVersionNotSupported DriverVersionNotSupported FirmwareVersionDriverVersionCombinationNotSupported FirmwareVersionAndDriverVersionNotSupported FirmwareVersionAndDriverNameNotSupported InternalError MarshallingError Exempted]
	ErrorCode string `json:"ErrorCode,omitempty"`

	// Firmware version of the product/adapter supported.
	//
	FirmwareVersion string `json:"FirmwareVersion,omitempty"`

	// Identifier of the firmware.
	//
	ID string `json:"Id,omitempty"`

	// True if the driver is latest recommended driver.
	//
	// Read Only: true
	LatestDriver *bool `json:"LatestDriver,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HclFirmware) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		DriverName string `json:"DriverName,omitempty"`

		DriverVersion string `json:"DriverVersion,omitempty"`

		ErrorCode string `json:"ErrorCode,omitempty"`

		FirmwareVersion string `json:"FirmwareVersion,omitempty"`

		ID string `json:"Id,omitempty"`

		LatestDriver *bool `json:"LatestDriver,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.DriverName = dataAO0.DriverName

	m.DriverVersion = dataAO0.DriverVersion

	m.ErrorCode = dataAO0.ErrorCode

	m.FirmwareVersion = dataAO0.FirmwareVersion

	m.ID = dataAO0.ID

	m.LatestDriver = dataAO0.LatestDriver

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HclFirmware) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		DriverName string `json:"DriverName,omitempty"`

		DriverVersion string `json:"DriverVersion,omitempty"`

		ErrorCode string `json:"ErrorCode,omitempty"`

		FirmwareVersion string `json:"FirmwareVersion,omitempty"`

		ID string `json:"Id,omitempty"`

		LatestDriver *bool `json:"LatestDriver,omitempty"`
	}

	dataAO0.DriverName = m.DriverName

	dataAO0.DriverVersion = m.DriverVersion

	dataAO0.ErrorCode = m.ErrorCode

	dataAO0.FirmwareVersion = m.FirmwareVersion

	dataAO0.ID = m.ID

	dataAO0.LatestDriver = m.LatestDriver

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this hcl firmware
func (m *HclFirmware) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrorCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var hclFirmwareTypeErrorCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Success","Unknown","UnknownServer","InvalidUcsVersion","ProcessorNotSupported","OSNotSupported","OSUnknown","UCSVersionNotSupported","UcsVersionServerOSCombinationNotSupported","ProductUnknown","ProductNotSupported","DriverNameNotSupported","FirmwareVersionNotSupported","DriverVersionNotSupported","FirmwareVersionDriverVersionCombinationNotSupported","FirmwareVersionAndDriverVersionNotSupported","FirmwareVersionAndDriverNameNotSupported","InternalError","MarshallingError","Exempted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hclFirmwareTypeErrorCodePropEnum = append(hclFirmwareTypeErrorCodePropEnum, v)
	}
}

// property enum
func (m *HclFirmware) validateErrorCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hclFirmwareTypeErrorCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HclFirmware) validateErrorCode(formats strfmt.Registry) error {

	if swag.IsZero(m.ErrorCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateErrorCodeEnum("ErrorCode", "body", m.ErrorCode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HclFirmware) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HclFirmware) UnmarshalBinary(b []byte) error {
	var res HclFirmware
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
