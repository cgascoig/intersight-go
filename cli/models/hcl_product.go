// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HclProduct Hcl:Product
//
// Model giving the details of product.
//
// swagger:model hclProduct
type HclProduct struct {

	// Supported driver names of the product.
	//
	DriverNames []string `json:"DriverNames"`

	// Error code indicating the support status.
	//
	// Read Only: true
	// Enum: [Success Unknown UnknownServer InvalidUcsVersion ProcessorNotSupported OSNotSupported OSUnknown UCSVersionNotSupported UcsVersionServerOSCombinationNotSupported ProductUnknown ProductNotSupported DriverNameNotSupported FirmwareVersionNotSupported DriverVersionNotSupported FirmwareVersionDriverVersionCombinationNotSupported FirmwareVersionAndDriverVersionNotSupported FirmwareVersionAndDriverNameNotSupported InternalError MarshallingError Exempted]
	ErrorCode string `json:"ErrorCode,omitempty"`

	// Supported firmwares list of the product.
	//
	Firmwares []*HclFirmware `json:"Firmwares"`

	// Identifier of the product.
	//
	ID string `json:"Id,omitempty"`

	// Model/PID of the product/adapter.
	//
	Model string `json:"Model,omitempty"`

	// Revision of the adapter model.
	//
	Revision string `json:"Revision,omitempty"`

	// Type of the product/adapter say OCP, PT, GPU.
	//
	Type string `json:"Type,omitempty"`

	// Vendor of the product or adapter.
	//
	Vendor string `json:"Vendor,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HclProduct) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		DriverNames []string `json:"DriverNames"`

		ErrorCode string `json:"ErrorCode,omitempty"`

		Firmwares []*HclFirmware `json:"Firmwares"`

		ID string `json:"Id,omitempty"`

		Model string `json:"Model,omitempty"`

		Revision string `json:"Revision,omitempty"`

		Type string `json:"Type,omitempty"`

		Vendor string `json:"Vendor,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.DriverNames = dataAO0.DriverNames

	m.ErrorCode = dataAO0.ErrorCode

	m.Firmwares = dataAO0.Firmwares

	m.ID = dataAO0.ID

	m.Model = dataAO0.Model

	m.Revision = dataAO0.Revision

	m.Type = dataAO0.Type

	m.Vendor = dataAO0.Vendor

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HclProduct) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		DriverNames []string `json:"DriverNames"`

		ErrorCode string `json:"ErrorCode,omitempty"`

		Firmwares []*HclFirmware `json:"Firmwares"`

		ID string `json:"Id,omitempty"`

		Model string `json:"Model,omitempty"`

		Revision string `json:"Revision,omitempty"`

		Type string `json:"Type,omitempty"`

		Vendor string `json:"Vendor,omitempty"`
	}

	dataAO0.DriverNames = m.DriverNames

	dataAO0.ErrorCode = m.ErrorCode

	dataAO0.Firmwares = m.Firmwares

	dataAO0.ID = m.ID

	dataAO0.Model = m.Model

	dataAO0.Revision = m.Revision

	dataAO0.Type = m.Type

	dataAO0.Vendor = m.Vendor

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this hcl product
func (m *HclProduct) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrorCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirmwares(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var hclProductTypeErrorCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Success","Unknown","UnknownServer","InvalidUcsVersion","ProcessorNotSupported","OSNotSupported","OSUnknown","UCSVersionNotSupported","UcsVersionServerOSCombinationNotSupported","ProductUnknown","ProductNotSupported","DriverNameNotSupported","FirmwareVersionNotSupported","DriverVersionNotSupported","FirmwareVersionDriverVersionCombinationNotSupported","FirmwareVersionAndDriverVersionNotSupported","FirmwareVersionAndDriverNameNotSupported","InternalError","MarshallingError","Exempted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hclProductTypeErrorCodePropEnum = append(hclProductTypeErrorCodePropEnum, v)
	}
}

// property enum
func (m *HclProduct) validateErrorCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hclProductTypeErrorCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HclProduct) validateErrorCode(formats strfmt.Registry) error {

	if swag.IsZero(m.ErrorCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateErrorCodeEnum("ErrorCode", "body", m.ErrorCode); err != nil {
		return err
	}

	return nil
}

func (m *HclProduct) validateFirmwares(formats strfmt.Registry) error {

	if swag.IsZero(m.Firmwares) { // not required
		return nil
	}

	for i := 0; i < len(m.Firmwares); i++ {
		if swag.IsZero(m.Firmwares[i]) { // not required
			continue
		}

		if m.Firmwares[i] != nil {
			if err := m.Firmwares[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Firmwares" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HclProduct) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HclProduct) UnmarshalBinary(b []byte) error {
	var res HclProduct
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
