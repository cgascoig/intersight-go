// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// HyperflexHxUuIDDt Hyperflex:Hx Uu Id Dt
// swagger:model hyperflexHxUuIdDt
type HyperflexHxUuIDDt struct {

	// links
	// Read Only: true
	Links []*HyperflexHxLinkDt `json:"Links"`

	// Uuid
	// Read Only: true
	UUID string `json:"Uuid,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HyperflexHxUuIDDt) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Links []*HyperflexHxLinkDt `json:"Links"`

		UUID string `json:"Uuid,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Links = dataAO0.Links

	m.UUID = dataAO0.UUID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HyperflexHxUuIDDt) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Links []*HyperflexHxLinkDt `json:"Links"`

		UUID string `json:"Uuid,omitempty"`
	}

	dataAO0.Links = m.Links

	dataAO0.UUID = m.UUID

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this hyperflex hx uu Id dt
func (m *HyperflexHxUuIDDt) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HyperflexHxUuIDDt) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	for i := 0; i < len(m.Links); i++ {
		if swag.IsZero(m.Links[i]) { // not required
			continue
		}

		if m.Links[i] != nil {
			if err := m.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HyperflexHxUuIDDt) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HyperflexHxUuIDDt) UnmarshalBinary(b []byte) error {
	var res HyperflexHxUuIDDt
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
