// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// HyperflexLogicalAvailabilityZone Hyperflex:Logical Availability Zone
//
// A configuration for the Logical Availability Zone.
//
// Logical Availability Zones (LAZ) allow for increased fault tolerance by dividing clusters into logical partitions
// where a given block of data is only written to a zone once. This allows replications of data to be distributed evenly
// across zones. LAZ configurations are compatible with HyperFlex clusters meeting all of the following criteria:
// 1. The HyperFlex cluster must be attached to a UCS Fabric Interconnect.
// 2. The HyperFlex cluster must be running HyperFlex Data Platform 3.0 or higher.
// 3. The HyperFlex cluster must have 8 or more converged nodes.
//
// swagger:model hyperflexLogicalAvailabilityZone
type HyperflexLogicalAvailabilityZone struct {

	// Enable or disable Logical Availability Zones (LAZ).
	// If enabled, HyperFlex Data Platform automatically selects and groups nodes into different availability zones. For HyperFlex Data Platform versions prior to 3.0 release, this setting does not apply. For HyperFlex Data Platform versions 3.0 or higher, this setting is only applicable to Fabric Interconnect attached HyperFlex systems with 8 or more converged nodes.
	//
	AutoConfig bool `json:"AutoConfig,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HyperflexLogicalAvailabilityZone) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		AutoConfig bool `json:"AutoConfig,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.AutoConfig = dataAO0.AutoConfig

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HyperflexLogicalAvailabilityZone) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		AutoConfig bool `json:"AutoConfig,omitempty"`
	}

	dataAO0.AutoConfig = m.AutoConfig

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this hyperflex logical availability zone
func (m *HyperflexLogicalAvailabilityZone) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *HyperflexLogicalAvailabilityZone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HyperflexLogicalAvailabilityZone) UnmarshalBinary(b []byte) error {
	var res HyperflexLogicalAvailabilityZone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
