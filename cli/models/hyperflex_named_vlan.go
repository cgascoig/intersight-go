// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// HyperflexNamedVlan Hyperflex:Named Vlan
//
// A VLAN with a name and ID.
//
// Named VLANs are used for defining the network and iSCSI external storage policies for the cluster.
//
// swagger:model hyperflexNamedVlan
type HyperflexNamedVlan struct {

	// The name of the VLAN.
	//
	// The name can be from 1 to 32 characters long and can contain a combination of alphanumeric characters, underscores, and hyphens.
	//
	//
	Name string `json:"Name,omitempty"`

	// The ID of the named VLAN. An ID of 0 means the traffic is untagged.
	//
	// The ID can be any number between 0 and 4095, inclusive.
	//
	//
	VlanID int64 `json:"VlanId,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HyperflexNamedVlan) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Name string `json:"Name,omitempty"`

		VlanID int64 `json:"VlanId,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Name = dataAO0.Name

	m.VlanID = dataAO0.VlanID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HyperflexNamedVlan) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Name string `json:"Name,omitempty"`

		VlanID int64 `json:"VlanId,omitempty"`
	}

	dataAO0.Name = m.Name

	dataAO0.VlanID = m.VlanID

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this hyperflex named vlan
func (m *HyperflexNamedVlan) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *HyperflexNamedVlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HyperflexNamedVlan) UnmarshalBinary(b []byte) error {
	var res HyperflexNamedVlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
