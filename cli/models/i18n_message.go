// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// I18nMessage I18n:Message
//
// An i18n message that can be translated in multiple languages to support internationalization.
//
// An i18n message includes a unique message identifier, a text format string, a list of message parameters that can be used
// to substitute parameters, and a translated string based on a user's locale.
//
// swagger:model i18nMessage
type I18nMessage struct {

	// The default (en-US) localized message. Default localized message will be stored and directly retrieved when
	// the user's locale setting is en-US.
	//
	//
	// Read Only: true
	Message string `json:"Message,omitempty"`

	// The unique message identitifer used to lookup text templates in a multi-language message catalog.
	//
	// Read Only: true
	MessageID string `json:"MessageId,omitempty"`

	// The list of message parameters.
	//
	MessageParams []*I18nMessageParam `json:"MessageParams"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *I18nMessage) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Message string `json:"Message,omitempty"`

		MessageID string `json:"MessageId,omitempty"`

		MessageParams []*I18nMessageParam `json:"MessageParams"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Message = dataAO0.Message

	m.MessageID = dataAO0.MessageID

	m.MessageParams = dataAO0.MessageParams

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m I18nMessage) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Message string `json:"Message,omitempty"`

		MessageID string `json:"MessageId,omitempty"`

		MessageParams []*I18nMessageParam `json:"MessageParams"`
	}

	dataAO0.Message = m.Message

	dataAO0.MessageID = m.MessageID

	dataAO0.MessageParams = m.MessageParams

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this i18n message
func (m *I18nMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMessageParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *I18nMessage) validateMessageParams(formats strfmt.Registry) error {

	if swag.IsZero(m.MessageParams) { // not required
		return nil
	}

	for i := 0; i < len(m.MessageParams); i++ {
		if swag.IsZero(m.MessageParams[i]) { // not required
			continue
		}

		if m.MessageParams[i] != nil {
			if err := m.MessageParams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("MessageParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *I18nMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *I18nMessage) UnmarshalBinary(b []byte) error {
	var res I18nMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
