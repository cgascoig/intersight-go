// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// IamAccountPermissions Iam:Account Permissions
//
// Users can log in through the base URL (https://intersight.com) or account-specific URLs. When the Intersight user logs in through the base URL, Intersight identifies the accounts and permissions within each account which the user has access to. In case multiple permissions are identified, the user and session objects are created in the onboarding-user account, and the session object is updated with account and permission information. Intersight GUI uses this information to show available accounts and permissions for the user to select.
//
// swagger:model iamAccountPermissions
type IamAccountPermissions struct {

	// MOID of the account which a user can select after authentication.
	//
	// Read Only: true
	AccountIdentifier string `json:"AccountIdentifier,omitempty"`

	// Name of the account which a user can select after authentication.
	//
	// Read Only: true
	AccountName string `json:"AccountName,omitempty"`

	// Status of the account. Account remains inactive until a device is claimed to the account.
	//
	// Read Only: true
	AccountStatus string `json:"AccountStatus,omitempty"`

	// Permissions within an account which a user can select after authentication.
	//
	// Read Only: true
	Permissions []*IamPermissionReference `json:"Permissions"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IamAccountPermissions) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		AccountIdentifier string `json:"AccountIdentifier,omitempty"`

		AccountName string `json:"AccountName,omitempty"`

		AccountStatus string `json:"AccountStatus,omitempty"`

		Permissions []*IamPermissionReference `json:"Permissions"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.AccountIdentifier = dataAO0.AccountIdentifier

	m.AccountName = dataAO0.AccountName

	m.AccountStatus = dataAO0.AccountStatus

	m.Permissions = dataAO0.Permissions

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IamAccountPermissions) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		AccountIdentifier string `json:"AccountIdentifier,omitempty"`

		AccountName string `json:"AccountName,omitempty"`

		AccountStatus string `json:"AccountStatus,omitempty"`

		Permissions []*IamPermissionReference `json:"Permissions"`
	}

	dataAO0.AccountIdentifier = m.AccountIdentifier

	dataAO0.AccountName = m.AccountName

	dataAO0.AccountStatus = m.AccountStatus

	dataAO0.Permissions = m.Permissions

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iam account permissions
func (m *IamAccountPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IamAccountPermissions) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	for i := 0; i < len(m.Permissions); i++ {
		if swag.IsZero(m.Permissions[i]) { // not required
			continue
		}

		if m.Permissions[i] != nil {
			if err := m.Permissions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IamAccountPermissions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamAccountPermissions) UnmarshalBinary(b []byte) error {
	var res IamAccountPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
