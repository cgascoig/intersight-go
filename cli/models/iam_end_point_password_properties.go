// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// IamEndPointPasswordProperties Iam:End Point Password Properties
//
// Password properties for endpoint users.
//
// swagger:model iamEndPointPasswordProperties
type IamEndPointPasswordProperties struct {

	// Enables password expiry on the endpoint.
	//
	EnablePasswordExpiry bool `json:"EnablePasswordExpiry,omitempty"`

	// Enables a strong password policy Strong password requirements: A. The password must have a minimum of 8 and a maximum of 20 characters. B. The password must not contain the User's Name. C. The password must contain characters from three of the following four categories. 1) English uppercase characters (A through Z). 2) English lowercase characters (a through z). 3) Base 10 digits (0 through 9). 4) Non-alphabetic characters (!, @, #, $, %, ^, &, *, -, _, +, =).
	//
	//
	EnforceStrongPassword bool `json:"EnforceStrongPassword,omitempty"`

	// Time period until when you can use the existing password, after it expires.
	//
	GracePeriod int64 `json:"GracePeriod,omitempty"`

	// Specifies the duration by when the password will expire.
	//
	NotificationPeriod int64 `json:"NotificationPeriod,omitempty"`

	// Set time period for password expiration. Value should be greater than notification period and grace period.
	//
	PasswordExpiryDuration int64 `json:"PasswordExpiryDuration,omitempty"`

	// Tracks password change history. Specifies in number of instances, that the new password was already used.
	//
	PasswordHistory int64 `json:"PasswordHistory,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IamEndPointPasswordProperties) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		EnablePasswordExpiry bool `json:"EnablePasswordExpiry,omitempty"`

		EnforceStrongPassword bool `json:"EnforceStrongPassword,omitempty"`

		GracePeriod int64 `json:"GracePeriod,omitempty"`

		NotificationPeriod int64 `json:"NotificationPeriod,omitempty"`

		PasswordExpiryDuration int64 `json:"PasswordExpiryDuration,omitempty"`

		PasswordHistory int64 `json:"PasswordHistory,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.EnablePasswordExpiry = dataAO0.EnablePasswordExpiry

	m.EnforceStrongPassword = dataAO0.EnforceStrongPassword

	m.GracePeriod = dataAO0.GracePeriod

	m.NotificationPeriod = dataAO0.NotificationPeriod

	m.PasswordExpiryDuration = dataAO0.PasswordExpiryDuration

	m.PasswordHistory = dataAO0.PasswordHistory

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IamEndPointPasswordProperties) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		EnablePasswordExpiry bool `json:"EnablePasswordExpiry,omitempty"`

		EnforceStrongPassword bool `json:"EnforceStrongPassword,omitempty"`

		GracePeriod int64 `json:"GracePeriod,omitempty"`

		NotificationPeriod int64 `json:"NotificationPeriod,omitempty"`

		PasswordExpiryDuration int64 `json:"PasswordExpiryDuration,omitempty"`

		PasswordHistory int64 `json:"PasswordHistory,omitempty"`
	}

	dataAO0.EnablePasswordExpiry = m.EnablePasswordExpiry

	dataAO0.EnforceStrongPassword = m.EnforceStrongPassword

	dataAO0.GracePeriod = m.GracePeriod

	dataAO0.NotificationPeriod = m.NotificationPeriod

	dataAO0.PasswordExpiryDuration = m.PasswordExpiryDuration

	dataAO0.PasswordHistory = m.PasswordHistory

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iam end point password properties
func (m *IamEndPointPasswordProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *IamEndPointPasswordProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamEndPointPasswordProperties) UnmarshalBinary(b []byte) error {
	var res IamEndPointPasswordProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
