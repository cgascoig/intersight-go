// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IamLdapBaseProperties Iam:Ldap Base Properties
//
// Base settings of LDAP required while configuring LDAP policy.
//
// swagger:model iamLdapBaseProperties
type IamLdapBaseProperties struct {

	// Role and locale information of the user.
	//
	Attribute string `json:"Attribute,omitempty"`

	// Base Distinguished Name (DN). Starting point from where server will search for users and groups.
	//
	BaseDn string `json:"BaseDn,omitempty"`

	// Distinguished Name (DN) of the user, that is used to authenticate against LDAP servers.
	//
	BindDn string `json:"BindDn,omitempty"`

	// Authentication method to access LDAP servers.
	//
	// Enum: [LoginCredentials Anonymous ConfiguredCredentials]
	BindMethod *string `json:"BindMethod,omitempty"`

	// The IPv4 domain that all users must be in.
	//
	Domain string `json:"Domain,omitempty"`

	// If enabled, the endpoint encrypts all information it sends to the LDAP server.
	//
	EnableEncryption bool `json:"EnableEncryption,omitempty"`

	// If enabled, user authorization is also done at the group level for LDAP users not in the local user database.
	//
	EnableGroupAuthorization bool `json:"EnableGroupAuthorization,omitempty"`

	// Criteria to identify entries in search requests.
	//
	Filter string `json:"Filter,omitempty"`

	// Groups to which an LDAP entry belongs.
	//
	GroupAttribute string `json:"GroupAttribute,omitempty"`

	// is password set
	IsPasswordSet bool `json:"IsPasswordSet,omitempty"`

	// Search depth to look for a nested LDAP group in an LDAP group map.
	//
	NestedGroupSearchDepth int64 `json:"NestedGroupSearchDepth,omitempty"`

	// Password of the user, that is used to authenticate.
	//
	Password string `json:"Password,omitempty"`

	// LDAP authentication timeout duration, in seconds.
	//
	Timeout int64 `json:"Timeout,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IamLdapBaseProperties) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Attribute string `json:"Attribute,omitempty"`

		BaseDn string `json:"BaseDn,omitempty"`

		BindDn string `json:"BindDn,omitempty"`

		BindMethod *string `json:"BindMethod,omitempty"`

		Domain string `json:"Domain,omitempty"`

		EnableEncryption bool `json:"EnableEncryption,omitempty"`

		EnableGroupAuthorization bool `json:"EnableGroupAuthorization,omitempty"`

		Filter string `json:"Filter,omitempty"`

		GroupAttribute string `json:"GroupAttribute,omitempty"`

		IsPasswordSet bool `json:"IsPasswordSet,omitempty"`

		NestedGroupSearchDepth int64 `json:"NestedGroupSearchDepth,omitempty"`

		Password string `json:"Password,omitempty"`

		Timeout int64 `json:"Timeout,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Attribute = dataAO0.Attribute

	m.BaseDn = dataAO0.BaseDn

	m.BindDn = dataAO0.BindDn

	m.BindMethod = dataAO0.BindMethod

	m.Domain = dataAO0.Domain

	m.EnableEncryption = dataAO0.EnableEncryption

	m.EnableGroupAuthorization = dataAO0.EnableGroupAuthorization

	m.Filter = dataAO0.Filter

	m.GroupAttribute = dataAO0.GroupAttribute

	m.IsPasswordSet = dataAO0.IsPasswordSet

	m.NestedGroupSearchDepth = dataAO0.NestedGroupSearchDepth

	m.Password = dataAO0.Password

	m.Timeout = dataAO0.Timeout

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IamLdapBaseProperties) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Attribute string `json:"Attribute,omitempty"`

		BaseDn string `json:"BaseDn,omitempty"`

		BindDn string `json:"BindDn,omitempty"`

		BindMethod *string `json:"BindMethod,omitempty"`

		Domain string `json:"Domain,omitempty"`

		EnableEncryption bool `json:"EnableEncryption,omitempty"`

		EnableGroupAuthorization bool `json:"EnableGroupAuthorization,omitempty"`

		Filter string `json:"Filter,omitempty"`

		GroupAttribute string `json:"GroupAttribute,omitempty"`

		IsPasswordSet bool `json:"IsPasswordSet,omitempty"`

		NestedGroupSearchDepth int64 `json:"NestedGroupSearchDepth,omitempty"`

		Password string `json:"Password,omitempty"`

		Timeout int64 `json:"Timeout,omitempty"`
	}

	dataAO0.Attribute = m.Attribute

	dataAO0.BaseDn = m.BaseDn

	dataAO0.BindDn = m.BindDn

	dataAO0.BindMethod = m.BindMethod

	dataAO0.Domain = m.Domain

	dataAO0.EnableEncryption = m.EnableEncryption

	dataAO0.EnableGroupAuthorization = m.EnableGroupAuthorization

	dataAO0.Filter = m.Filter

	dataAO0.GroupAttribute = m.GroupAttribute

	dataAO0.IsPasswordSet = m.IsPasswordSet

	dataAO0.NestedGroupSearchDepth = m.NestedGroupSearchDepth

	dataAO0.Password = m.Password

	dataAO0.Timeout = m.Timeout

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iam ldap base properties
func (m *IamLdapBaseProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBindMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var iamLdapBasePropertiesTypeBindMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LoginCredentials","Anonymous","ConfiguredCredentials"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		iamLdapBasePropertiesTypeBindMethodPropEnum = append(iamLdapBasePropertiesTypeBindMethodPropEnum, v)
	}
}

// property enum
func (m *IamLdapBaseProperties) validateBindMethodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, iamLdapBasePropertiesTypeBindMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IamLdapBaseProperties) validateBindMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.BindMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateBindMethodEnum("BindMethod", "body", *m.BindMethod); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IamLdapBaseProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamLdapBaseProperties) UnmarshalBinary(b []byte) error {
	var res IamLdapBaseProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
