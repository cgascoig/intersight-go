// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// IamPermissionReference Iam:Permission Reference
//
// Users can log in through the base URL (https://intersight.com) or account-specific URLs. When the Intersight user logs in through the base URL, Intersight identifies the accounts and permissions within each account which the user has access to. In case multiple permissions are identified, the user and session objects are created in the onboarding-user account, and the session object is updated with account and permission information. Intersight GUI uses this information to show available accounts and permissions for the user to select. PermissionReference type is used to store permission information of an account.
//
// swagger:model iamPermissionReference
type IamPermissionReference struct {

	// MOID of the permission which user has access to.
	//
	// Read Only: true
	PermissionIdentifier string `json:"PermissionIdentifier,omitempty"`

	// Name of the permission which user has access to.
	//
	// Read Only: true
	PermissionName string `json:"PermissionName,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IamPermissionReference) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		PermissionIdentifier string `json:"PermissionIdentifier,omitempty"`

		PermissionName string `json:"PermissionName,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.PermissionIdentifier = dataAO0.PermissionIdentifier

	m.PermissionName = dataAO0.PermissionName

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IamPermissionReference) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		PermissionIdentifier string `json:"PermissionIdentifier,omitempty"`

		PermissionName string `json:"PermissionName,omitempty"`
	}

	dataAO0.PermissionIdentifier = m.PermissionIdentifier

	dataAO0.PermissionName = m.PermissionName

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this iam permission reference
func (m *IamPermissionReference) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *IamPermissionReference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamPermissionReference) UnmarshalBinary(b []byte) error {
	var res IamPermissionReference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
