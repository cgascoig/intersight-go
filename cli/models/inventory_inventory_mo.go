// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// InventoryInventoryMo Inventory:Inventory Mo
//
// Complex type representing the inventory MO.
//
// swagger:model inventoryInventoryMo
type InventoryInventoryMo struct {

	// The UCS DN of the MO for which the latest inventory to be fetched. If this property is empty and moId property has the Moid of the MO to be updated, the Moid will be used. If this property is empty and moId is also empty, all the MOs of the given moType will be updated.
	//
	MoDn string `json:"MoDn,omitempty"`

	// The MO id of an MO for which the latest inventory to be fetched. If this property is empty and moDn property has the UCS DN of the MO to be updated, the DN will be used. If this property is empty and moDn is also empty, all the MOs of the given moType will be updated.
	//
	MoID string `json:"MoId,omitempty"`

	// The type of the MO for which the latest inventory to be fetched.
	//
	MoType string `json:"MoType,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *InventoryInventoryMo) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		MoDn string `json:"MoDn,omitempty"`

		MoID string `json:"MoId,omitempty"`

		MoType string `json:"MoType,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.MoDn = dataAO0.MoDn

	m.MoID = dataAO0.MoID

	m.MoType = dataAO0.MoType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m InventoryInventoryMo) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		MoDn string `json:"MoDn,omitempty"`

		MoID string `json:"MoId,omitempty"`

		MoType string `json:"MoType,omitempty"`
	}

	dataAO0.MoDn = m.MoDn

	dataAO0.MoID = m.MoID

	dataAO0.MoType = m.MoType

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this inventory inventory mo
func (m *InventoryInventoryMo) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *InventoryInventoryMo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InventoryInventoryMo) UnmarshalBinary(b []byte) error {
	var res InventoryInventoryMo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
