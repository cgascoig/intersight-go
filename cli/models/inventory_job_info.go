// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InventoryJobInfo Inventory:Job Info
//
// The runtime information about a job scheduled on a managed device.
//
// swagger:model inventoryJobInfo
type InventoryJobInfo struct {

	// Execution status of the inventory job.
	//
	// Read Only: true
	// Enum: [Unknown Scheduled Completed Error]
	ExecutionStatus string `json:"ExecutionStatus,omitempty"`

	// Last processed time of the inventory job.
	//
	// Read Only: true
	// Format: date-time
	LastProcessedTime strfmt.DateTime `json:"LastProcessedTime,omitempty"`

	// Last scheduled time of the inventory job.
	//
	// Read Only: true
	// Format: date-time
	LastScheduledTime strfmt.DateTime `json:"LastScheduledTime,omitempty"`

	// Policy ID for the inventory job.
	//
	// Read Only: true
	PolicyID string `json:"PolicyId,omitempty"`

	// Policy name for the inventory job.
	//
	// Read Only: true
	PolicyName string `json:"PolicyName,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *InventoryJobInfo) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ExecutionStatus string `json:"ExecutionStatus,omitempty"`

		LastProcessedTime strfmt.DateTime `json:"LastProcessedTime,omitempty"`

		LastScheduledTime strfmt.DateTime `json:"LastScheduledTime,omitempty"`

		PolicyID string `json:"PolicyId,omitempty"`

		PolicyName string `json:"PolicyName,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.ExecutionStatus = dataAO0.ExecutionStatus

	m.LastProcessedTime = dataAO0.LastProcessedTime

	m.LastScheduledTime = dataAO0.LastScheduledTime

	m.PolicyID = dataAO0.PolicyID

	m.PolicyName = dataAO0.PolicyName

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m InventoryJobInfo) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		ExecutionStatus string `json:"ExecutionStatus,omitempty"`

		LastProcessedTime strfmt.DateTime `json:"LastProcessedTime,omitempty"`

		LastScheduledTime strfmt.DateTime `json:"LastScheduledTime,omitempty"`

		PolicyID string `json:"PolicyId,omitempty"`

		PolicyName string `json:"PolicyName,omitempty"`
	}

	dataAO0.ExecutionStatus = m.ExecutionStatus

	dataAO0.LastProcessedTime = m.LastProcessedTime

	dataAO0.LastScheduledTime = m.LastScheduledTime

	dataAO0.PolicyID = m.PolicyID

	dataAO0.PolicyName = m.PolicyName

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this inventory job info
func (m *InventoryJobInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExecutionStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastProcessedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastScheduledTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var inventoryJobInfoTypeExecutionStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Scheduled","Completed","Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		inventoryJobInfoTypeExecutionStatusPropEnum = append(inventoryJobInfoTypeExecutionStatusPropEnum, v)
	}
}

// property enum
func (m *InventoryJobInfo) validateExecutionStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, inventoryJobInfoTypeExecutionStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InventoryJobInfo) validateExecutionStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ExecutionStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateExecutionStatusEnum("ExecutionStatus", "body", m.ExecutionStatus); err != nil {
		return err
	}

	return nil
}

func (m *InventoryJobInfo) validateLastProcessedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.LastProcessedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("LastProcessedTime", "body", "date-time", m.LastProcessedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InventoryJobInfo) validateLastScheduledTime(formats strfmt.Registry) error {

	if swag.IsZero(m.LastScheduledTime) { // not required
		return nil
	}

	if err := validate.FormatOf("LastScheduledTime", "body", "date-time", m.LastScheduledTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InventoryJobInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InventoryJobInfo) UnmarshalBinary(b []byte) error {
	var res InventoryJobInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
