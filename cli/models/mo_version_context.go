// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MoVersionContext Mo:Version Context
//
// VersionContext contains the versioning info for an object.
//
// swagger:model moVersionContext
type MoVersionContext struct {

	// A collection of objects that have reference to this versioned object.
	// The lifecycle of the versioned object is based on the interestedMos list;
	// the versioned object will be purged when interestedMos is empty.
	//
	//
	// Read Only: true
	InterestedMos []*MoMoRef `json:"InterestedMos"`

	// A reference to the original Managed Object.
	//
	// Read Only: true
	RefMo *MoMoRef `json:"RefMo,omitempty"`

	// The time this versioned Managed Object was created.
	//
	// Read Only: true
	// Format: date-time
	Timestamp strfmt.DateTime `json:"Timestamp,omitempty"`

	// The version of the Managed Object, e.g. an incrementing number or a hash id.
	//
	// Read Only: true
	Version string `json:"Version,omitempty"`

	// Specifies type of version. Currently the only supported value is "Configured"
	// that is used to keep track of snapshots of policies and profiles that are intended
	// to be configured to target endpoints.
	//
	//
	// Read Only: true
	// Enum: [Modified Configured Deployed]
	VersionType string `json:"VersionType,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *MoVersionContext) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		InterestedMos []*MoMoRef `json:"InterestedMos"`

		RefMo *MoMoRef `json:"RefMo,omitempty"`

		Timestamp strfmt.DateTime `json:"Timestamp,omitempty"`

		Version string `json:"Version,omitempty"`

		VersionType string `json:"VersionType,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.InterestedMos = dataAO0.InterestedMos

	m.RefMo = dataAO0.RefMo

	m.Timestamp = dataAO0.Timestamp

	m.Version = dataAO0.Version

	m.VersionType = dataAO0.VersionType

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m MoVersionContext) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		InterestedMos []*MoMoRef `json:"InterestedMos"`

		RefMo *MoMoRef `json:"RefMo,omitempty"`

		Timestamp strfmt.DateTime `json:"Timestamp,omitempty"`

		Version string `json:"Version,omitempty"`

		VersionType string `json:"VersionType,omitempty"`
	}

	dataAO0.InterestedMos = m.InterestedMos

	dataAO0.RefMo = m.RefMo

	dataAO0.Timestamp = m.Timestamp

	dataAO0.Version = m.Version

	dataAO0.VersionType = m.VersionType

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this mo version context
func (m *MoVersionContext) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInterestedMos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefMo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MoVersionContext) validateInterestedMos(formats strfmt.Registry) error {

	if swag.IsZero(m.InterestedMos) { // not required
		return nil
	}

	for i := 0; i < len(m.InterestedMos); i++ {
		if swag.IsZero(m.InterestedMos[i]) { // not required
			continue
		}

		if m.InterestedMos[i] != nil {
			if err := m.InterestedMos[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("InterestedMos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MoVersionContext) validateRefMo(formats strfmt.Registry) error {

	if swag.IsZero(m.RefMo) { // not required
		return nil
	}

	if m.RefMo != nil {
		if err := m.RefMo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RefMo")
			}
			return err
		}
	}

	return nil
}

func (m *MoVersionContext) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("Timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

var moVersionContextTypeVersionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Modified","Configured","Deployed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		moVersionContextTypeVersionTypePropEnum = append(moVersionContextTypeVersionTypePropEnum, v)
	}
}

// property enum
func (m *MoVersionContext) validateVersionTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, moVersionContextTypeVersionTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MoVersionContext) validateVersionType(formats strfmt.Registry) error {

	if swag.IsZero(m.VersionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateVersionTypeEnum("VersionType", "body", m.VersionType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MoVersionContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MoVersionContext) UnmarshalBinary(b []byte) error {
	var res MoVersionContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
