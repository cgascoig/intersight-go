// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// NiaapiNewReleaseDetail Niaapi:New Release Detail
//
// The detail content of of this post.
//
// swagger:model niaapiNewReleaseDetail
type NiaapiNewReleaseDetail struct {

	// Description of this new verison release post.
	//
	Description string `json:"Description,omitempty"`

	// Link of downloading the release file.
	//
	Link string `json:"Link,omitempty"`

	// The link used to provide a gateway for customer to review the release note.
	//
	ReleaseNoteLink string `json:"ReleaseNoteLink,omitempty"`

	// The link title used to provide a gateway for customer to review the release note.
	//
	ReleaseNoteLinkTitle string `json:"ReleaseNoteLinkTitle,omitempty"`

	// The link used to provide a gateway for customer to download the release.
	//
	SoftwareDownloadLink string `json:"SoftwareDownloadLink,omitempty"`

	// The link title used to provide a gateway for customer to download the release.
	//
	SoftwareDownloadLinkTitle string `json:"SoftwareDownloadLinkTitle,omitempty"`

	// Title of the new verison release post.
	//
	Title string `json:"Title,omitempty"`

	// Version number Associate with this Post.
	//
	Version string `json:"Version,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *NiaapiNewReleaseDetail) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Description string `json:"Description,omitempty"`

		Link string `json:"Link,omitempty"`

		ReleaseNoteLink string `json:"ReleaseNoteLink,omitempty"`

		ReleaseNoteLinkTitle string `json:"ReleaseNoteLinkTitle,omitempty"`

		SoftwareDownloadLink string `json:"SoftwareDownloadLink,omitempty"`

		SoftwareDownloadLinkTitle string `json:"SoftwareDownloadLinkTitle,omitempty"`

		Title string `json:"Title,omitempty"`

		Version string `json:"Version,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Description = dataAO0.Description

	m.Link = dataAO0.Link

	m.ReleaseNoteLink = dataAO0.ReleaseNoteLink

	m.ReleaseNoteLinkTitle = dataAO0.ReleaseNoteLinkTitle

	m.SoftwareDownloadLink = dataAO0.SoftwareDownloadLink

	m.SoftwareDownloadLinkTitle = dataAO0.SoftwareDownloadLinkTitle

	m.Title = dataAO0.Title

	m.Version = dataAO0.Version

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m NiaapiNewReleaseDetail) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Description string `json:"Description,omitempty"`

		Link string `json:"Link,omitempty"`

		ReleaseNoteLink string `json:"ReleaseNoteLink,omitempty"`

		ReleaseNoteLinkTitle string `json:"ReleaseNoteLinkTitle,omitempty"`

		SoftwareDownloadLink string `json:"SoftwareDownloadLink,omitempty"`

		SoftwareDownloadLinkTitle string `json:"SoftwareDownloadLinkTitle,omitempty"`

		Title string `json:"Title,omitempty"`

		Version string `json:"Version,omitempty"`
	}

	dataAO0.Description = m.Description

	dataAO0.Link = m.Link

	dataAO0.ReleaseNoteLink = m.ReleaseNoteLink

	dataAO0.ReleaseNoteLinkTitle = m.ReleaseNoteLinkTitle

	dataAO0.SoftwareDownloadLink = m.SoftwareDownloadLink

	dataAO0.SoftwareDownloadLinkTitle = m.SoftwareDownloadLinkTitle

	dataAO0.Title = m.Title

	dataAO0.Version = m.Version

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this niaapi new release detail
func (m *NiaapiNewReleaseDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *NiaapiNewReleaseDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NiaapiNewReleaseDetail) UnmarshalBinary(b []byte) error {
	var res NiaapiNewReleaseDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
