// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NiaapiRevisionInfo Niaapi:Revision Info
//
// The Revision info including date comment and revision number.
//
// swagger:model niaapiRevisionInfo
type NiaapiRevisionInfo struct {

	// The date the revision is made.
	//
	// Format: date-time
	DatePublished strfmt.DateTime `json:"DatePublished,omitempty"`

	// The changes made in this revision.
	//
	RevisionComment string `json:"RevisionComment,omitempty"`

	// The Revision No. of this revision.
	//
	RevisionNo string `json:"RevisionNo,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *NiaapiRevisionInfo) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		DatePublished strfmt.DateTime `json:"DatePublished,omitempty"`

		RevisionComment string `json:"RevisionComment,omitempty"`

		RevisionNo string `json:"RevisionNo,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.DatePublished = dataAO0.DatePublished

	m.RevisionComment = dataAO0.RevisionComment

	m.RevisionNo = dataAO0.RevisionNo

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m NiaapiRevisionInfo) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		DatePublished strfmt.DateTime `json:"DatePublished,omitempty"`

		RevisionComment string `json:"RevisionComment,omitempty"`

		RevisionNo string `json:"RevisionNo,omitempty"`
	}

	dataAO0.DatePublished = m.DatePublished

	dataAO0.RevisionComment = m.RevisionComment

	dataAO0.RevisionNo = m.RevisionNo

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this niaapi revision info
func (m *NiaapiRevisionInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatePublished(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NiaapiRevisionInfo) validateDatePublished(formats strfmt.Registry) error {

	if swag.IsZero(m.DatePublished) { // not required
		return nil
	}

	if err := validate.FormatOf("DatePublished", "body", "date-time", m.DatePublished.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NiaapiRevisionInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NiaapiRevisionInfo) UnmarshalBinary(b []byte) error {
	var res NiaapiRevisionInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
