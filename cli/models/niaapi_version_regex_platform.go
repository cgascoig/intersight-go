// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// NiaapiVersionRegexPlatform Niaapi:Version Regex Platform
//
// The regular expression to parse the software version strings for specific platform.
//
// swagger:model niaapiVersionRegexPlatform
type NiaapiVersionRegexPlatform struct {

	// All long live version Regex pattern.
	//
	Anyllregex string `json:"Anyllregex,omitempty"`

	// Current long live version Regex pattern.
	//
	Currentlltrain *NiaapiSoftwareRegex `json:"Currentlltrain,omitempty"`

	// Latest short live version Regex pattern.
	//
	Latestsltrain *NiaapiSoftwareRegex `json:"Latestsltrain,omitempty"`

	// List of short lived verison and Regex pattern.
	//
	Sltrain []*NiaapiSoftwareRegex `json:"Sltrain"`

	// Upcoming short live version Regex pattern.
	//
	Upcominglltrain *NiaapiSoftwareRegex `json:"Upcominglltrain,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *NiaapiVersionRegexPlatform) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Anyllregex string `json:"Anyllregex,omitempty"`

		Currentlltrain *NiaapiSoftwareRegex `json:"Currentlltrain,omitempty"`

		Latestsltrain *NiaapiSoftwareRegex `json:"Latestsltrain,omitempty"`

		Sltrain []*NiaapiSoftwareRegex `json:"Sltrain"`

		Upcominglltrain *NiaapiSoftwareRegex `json:"Upcominglltrain,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Anyllregex = dataAO0.Anyllregex

	m.Currentlltrain = dataAO0.Currentlltrain

	m.Latestsltrain = dataAO0.Latestsltrain

	m.Sltrain = dataAO0.Sltrain

	m.Upcominglltrain = dataAO0.Upcominglltrain

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m NiaapiVersionRegexPlatform) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Anyllregex string `json:"Anyllregex,omitempty"`

		Currentlltrain *NiaapiSoftwareRegex `json:"Currentlltrain,omitempty"`

		Latestsltrain *NiaapiSoftwareRegex `json:"Latestsltrain,omitempty"`

		Sltrain []*NiaapiSoftwareRegex `json:"Sltrain"`

		Upcominglltrain *NiaapiSoftwareRegex `json:"Upcominglltrain,omitempty"`
	}

	dataAO0.Anyllregex = m.Anyllregex

	dataAO0.Currentlltrain = m.Currentlltrain

	dataAO0.Latestsltrain = m.Latestsltrain

	dataAO0.Sltrain = m.Sltrain

	dataAO0.Upcominglltrain = m.Upcominglltrain

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this niaapi version regex platform
func (m *NiaapiVersionRegexPlatform) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentlltrain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatestsltrain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSltrain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpcominglltrain(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NiaapiVersionRegexPlatform) validateCurrentlltrain(formats strfmt.Registry) error {

	if swag.IsZero(m.Currentlltrain) { // not required
		return nil
	}

	if m.Currentlltrain != nil {
		if err := m.Currentlltrain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Currentlltrain")
			}
			return err
		}
	}

	return nil
}

func (m *NiaapiVersionRegexPlatform) validateLatestsltrain(formats strfmt.Registry) error {

	if swag.IsZero(m.Latestsltrain) { // not required
		return nil
	}

	if m.Latestsltrain != nil {
		if err := m.Latestsltrain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Latestsltrain")
			}
			return err
		}
	}

	return nil
}

func (m *NiaapiVersionRegexPlatform) validateSltrain(formats strfmt.Registry) error {

	if swag.IsZero(m.Sltrain) { // not required
		return nil
	}

	for i := 0; i < len(m.Sltrain); i++ {
		if swag.IsZero(m.Sltrain[i]) { // not required
			continue
		}

		if m.Sltrain[i] != nil {
			if err := m.Sltrain[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Sltrain" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NiaapiVersionRegexPlatform) validateUpcominglltrain(formats strfmt.Registry) error {

	if swag.IsZero(m.Upcominglltrain) { // not required
		return nil
	}

	if m.Upcominglltrain != nil {
		if err := m.Upcominglltrain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Upcominglltrain")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NiaapiVersionRegexPlatform) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NiaapiVersionRegexPlatform) UnmarshalBinary(b []byte) error {
	var res NiaapiVersionRegexPlatform
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
