// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NotifsCondition Notifs:Condition
//
// A condition under which a MO Change Notification should be sent. The changeType, filter and changeSet conditions must all evaluate to True for a notification to be sent.
//
// swagger:model notifsCondition
type NotifsCondition struct {

	// The list of properties which have been modified while processing a REST request.
	// Applicable only for MO updates, ignored for creation/deletion. Evaluates to True if any of the listed properties have changed or if the list is empty. For example, the list may be set to ['ConnectorStatus', 'ConnectorVersion'].
	//
	//
	ChangeSet []string `json:"ChangeSet"`

	// The type of change (create, update, delete) performed on the MO.
	//
	//
	// Enum: [None Created Modified Deleted]
	ChangeType *string `json:"ChangeType,omitempty"`

	// The OData-style filter which is evaluated against the state of an MO at the time of transaction commit. An empty filter string evaluates to True. For example, the value may be set to 'ConnectionStatus eq 'Connected'.
	//
	//
	Filter string `json:"Filter,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *NotifsCondition) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ChangeSet []string `json:"ChangeSet"`

		ChangeType *string `json:"ChangeType,omitempty"`

		Filter string `json:"Filter,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.ChangeSet = dataAO0.ChangeSet

	m.ChangeType = dataAO0.ChangeType

	m.Filter = dataAO0.Filter

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m NotifsCondition) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		ChangeSet []string `json:"ChangeSet"`

		ChangeType *string `json:"ChangeType,omitempty"`

		Filter string `json:"Filter,omitempty"`
	}

	dataAO0.ChangeSet = m.ChangeSet

	dataAO0.ChangeType = m.ChangeType

	dataAO0.Filter = m.Filter

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this notifs condition
func (m *NotifsCondition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChangeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var notifsConditionTypeChangeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Created","Modified","Deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		notifsConditionTypeChangeTypePropEnum = append(notifsConditionTypeChangeTypePropEnum, v)
	}
}

// property enum
func (m *NotifsCondition) validateChangeTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, notifsConditionTypeChangeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NotifsCondition) validateChangeType(formats strfmt.Registry) error {

	if swag.IsZero(m.ChangeType) { // not required
		return nil
	}

	// value enum
	if err := m.validateChangeTypeEnum("ChangeType", "body", *m.ChangeType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NotifsCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NotifsCondition) UnmarshalBinary(b []byte) error {
	var res NotifsCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
