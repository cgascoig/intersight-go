// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OauthAccessToken Oauth:Access Token
// swagger:model oauthAccessToken
type OauthAccessToken struct {

	// Oauth api type
	//
	// Enum: [Unknown License]
	APIType *string `json:"ApiType,omitempty"`

	// Access token expiry time
	//
	// Read Only: true
	// Format: date-time
	ExpiryTime strfmt.DateTime `json:"ExpiryTime,omitempty"`

	// Access token status
	//
	// Enum: [Inactive Active Expired]
	Status *string `json:"Status,omitempty"`

	// Access token
	//
	// Read Only: true
	Token string `json:"Token,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *OauthAccessToken) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		APIType *string `json:"ApiType,omitempty"`

		ExpiryTime strfmt.DateTime `json:"ExpiryTime,omitempty"`

		Status *string `json:"Status,omitempty"`

		Token string `json:"Token,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.APIType = dataAO0.APIType

	m.ExpiryTime = dataAO0.ExpiryTime

	m.Status = dataAO0.Status

	m.Token = dataAO0.Token

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m OauthAccessToken) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		APIType *string `json:"ApiType,omitempty"`

		ExpiryTime strfmt.DateTime `json:"ExpiryTime,omitempty"`

		Status *string `json:"Status,omitempty"`

		Token string `json:"Token,omitempty"`
	}

	dataAO0.APIType = m.APIType

	dataAO0.ExpiryTime = m.ExpiryTime

	dataAO0.Status = m.Status

	dataAO0.Token = m.Token

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this oauth access token
func (m *OauthAccessToken) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiryTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oauthAccessTokenTypeAPITypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","License"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oauthAccessTokenTypeAPITypePropEnum = append(oauthAccessTokenTypeAPITypePropEnum, v)
	}
}

// property enum
func (m *OauthAccessToken) validateAPITypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, oauthAccessTokenTypeAPITypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OauthAccessToken) validateAPIType(formats strfmt.Registry) error {

	if swag.IsZero(m.APIType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAPITypeEnum("ApiType", "body", *m.APIType); err != nil {
		return err
	}

	return nil
}

func (m *OauthAccessToken) validateExpiryTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpiryTime) { // not required
		return nil
	}

	if err := validate.FormatOf("ExpiryTime", "body", "date-time", m.ExpiryTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var oauthAccessTokenTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Inactive","Active","Expired"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oauthAccessTokenTypeStatusPropEnum = append(oauthAccessTokenTypeStatusPropEnum, v)
	}
}

// property enum
func (m *OauthAccessToken) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, oauthAccessTokenTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OauthAccessToken) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OauthAccessToken) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OauthAccessToken) UnmarshalBinary(b []byte) error {
	var res OauthAccessToken
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
