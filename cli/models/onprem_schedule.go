// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OnpremSchedule Onprem:Schedule
//
// Schedule is used by Intersight Appliance services to store task scheduling information.
// For example, appliance backup service uses Schedule to store the backup schedule of the
// Intersight Appliance. The Upgrade service uses Schedule to store the user-defined schedule
// for software upgrades of the Intersight Appliance.
//
// swagger:model onpremSchedule
type OnpremSchedule struct {

	// Schedule a task on a specific day of the month. Valid values are 1 through 31. If monthOfYear is specified, then dayOfMonth value must be valid for that month. DayOfMonth may not be set when dayOfWeek is specfied.
	//
	DayOfMonth int64 `json:"DayOfMonth,omitempty"`

	// Schedule a task on a specific day of the week. Valid values are 1 through 7, with 1 being Sunday. DayOfWeek may not be specfied when dayOfMonth is specified.
	//
	DayOfWeek int64 `json:"DayOfWeek,omitempty"`

	// Schedule a task on a specific month of the year. Valid values are 1 through 12, with 1 being January.
	//
	MonthOfYear int64 `json:"MonthOfYear,omitempty"`

	// Schedule a task to run periodically at an interval. Default unit of the RepeatInterval is in minutes. If the RepeateInterval value is set, then all other properties are ignored by the scheduler. RepeateInterval constraints are enforced by the services that use the schedule. Each service has pre-configured service specific properties for enforcing minimum and maximum values of the RepeatInterval.
	//
	RepeatInterval int64 `json:"RepeatInterval,omitempty"`

	// Time of the day in seconds. TimeOfDay is required for all schedule configurations, except when the RepeateInterval field is specified.
	//
	TimeOfDay int64 `json:"TimeOfDay,omitempty"`

	// Timezone to use for the schedule calculation. If a timezone value is not speficied, then the schedule calculation will be based on UTC.
	//
	// Enum: [Pacific/Niue Pacific/Pago_Pago Pacific/Honolulu Pacific/Rarotonga Pacific/Tahiti Pacific/Marquesas America/Anchorage Pacific/Gambier America/Los_Angeles America/Tijuana America/Vancouver America/Whitehorse Pacific/Pitcairn America/Dawson_Creek America/Denver America/Edmonton America/Hermosillo America/Mazatlan America/Phoenix America/Yellowknife America/Belize America/Chicago America/Costa_Rica America/El_Salvador America/Guatemala America/Managua America/Mexico_City America/Regina America/Tegucigalpa America/Winnipeg Pacific/Galapagos America/Bogota America/Cancun America/Cayman America/Guayaquil America/Havana America/Iqaluit America/Jamaica America/Lima America/Nassau America/New_York America/Panama America/Port-au-Prince America/Rio_Branco America/Toronto Pacific/Easter America/Caracas America/Asuncion America/Barbados America/Boa_Vista America/Campo_Grande America/Cuiaba America/Curacao America/Grand_Turk America/Guyana America/Halifax America/La_Paz America/Manaus America/Martinique America/Port_of_Spain America/Porto_Velho America/Puerto_Rico America/Santo_Domingo America/Thule Atlantic/Bermuda America/St_Johns America/Araguaina America/Argentina/Buenos_Aires America/Bahia America/Belem America/Cayenne America/Fortaleza America/Godthab America/Maceio America/Miquelon America/Montevideo America/Paramaribo America/Recife America/Santiago America/Sao_Paulo Antarctica/Palmer Antarctica/Rothera Atlantic/Stanley America/Noronha Atlantic/South_Georgia America/Scoresbysund Atlantic/Azores Atlantic/Cape_Verde Africa/Abidjan Africa/Accra Africa/Bissau Africa/Casablanca Africa/El_Aaiun Africa/Monrovia America/Danmarkshavn Atlantic/Canary Atlantic/Faroe Atlantic/Reykjavik Etc/GMT Europe/Dublin Europe/Lisbon Europe/London Africa/Algiers Africa/Ceuta Africa/Lagos Africa/Ndjamena Africa/Tunis Africa/Windhoek Europe/Amsterdam Europe/Andorra Europe/Belgrade Europe/Berlin Europe/Brussels Europe/Budapest Europe/Copenhagen Europe/Gibraltar Europe/Luxembourg Europe/Madrid Europe/Malta Europe/Monaco Europe/Oslo Europe/Paris Europe/Prague Europe/Rome Europe/Stockholm Europe/Tirane Europe/Vienna Europe/Warsaw Europe/Zurich Africa/Cairo Africa/Johannesburg Africa/Maputo Africa/Tripoli Asia/Amman Asia/Beirut Asia/Damascus Asia/Gaza Asia/Jerusalem Asia/Nicosia Europe/Athens Europe/Bucharest Europe/Chisinau Europe/Helsinki Europe/Istanbul Europe/Kaliningrad Europe/Kiev Europe/Riga Europe/Sofia Europe/Tallinn Europe/Vilnius Africa/Khartoum Africa/Nairobi Antarctica/Syowa Asia/Baghdad Asia/Qatar Asia/Riyadh Europe/Minsk Europe/Moscow Asia/Tehran Asia/Baku Asia/Dubai Asia/Tbilisi Asia/Yerevan Europe/Samara Indian/Mahe Indian/Mauritius Indian/Reunion Asia/Kabul Antarctica/Mawson Asia/Aqtau Asia/Aqtobe Asia/Ashgabat Asia/Dushanbe Asia/Karachi Asia/Tashkent Asia/Yekaterinburg Indian/Kerguelen Indian/Maldives Asia/Calcutta Asia/Colombo Asia/Katmandu Antarctica/Vostok Asia/Almaty Asia/Bishkek Asia/Dhaka Asia/Omsk Asia/Thimphu Indian/Chagos Asia/Rangoon Indian/Cocos Antarctica/Davis Asia/Bangkok Asia/Hovd Asia/Jakarta Asia/Krasnoyarsk Asia/Saigon Indian/Christmas Antarctica/Casey Asia/Brunei Asia/Choibalsan Asia/Hong_Kong Asia/Irkutsk Asia/Kuala_Lumpur Asia/Macau Asia/Makassar Asia/Manila Asia/Shanghai Asia/Singapore Asia/Taipei Asia/Ulaanbaatar Australia/Perth Asia/Pyongyang Asia/Dili Asia/Jayapura Asia/Seoul Asia/Tokyo Asia/Yakutsk Pacific/Palau Australia/Adelaide Australia/Darwin Antarctica/DumontDUrville Asia/Magadan Asia/Vladivostok Australia/Brisbane Australia/Hobart Australia/Sydney Pacific/Chuuk Pacific/Guam Pacific/Port_Moresby Pacific/Efate Pacific/Guadalcanal Pacific/Kosrae Pacific/Norfolk Pacific/Noumea Pacific/Pohnpei Asia/Kamchatka Pacific/Auckland Pacific/Fiji Pacific/Funafuti Pacific/Kwajalein Pacific/Majuro Pacific/Nauru Pacific/Tarawa Pacific/Wake Pacific/Wallis Pacific/Apia Pacific/Enderbury Pacific/Fakaofo Pacific/Tongatapu Pacific/Kiritimati]
	TimeZone *string `json:"TimeZone,omitempty"`

	// Schedule a task on a specific week of the month. Valid values are 1 through 5. Value of 5 means last week of the month. WeekOfMonth may not be set when dayOfMonth is specified.
	//
	WeekOfMonth int64 `json:"WeekOfMonth,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *OnpremSchedule) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		DayOfMonth int64 `json:"DayOfMonth,omitempty"`

		DayOfWeek int64 `json:"DayOfWeek,omitempty"`

		MonthOfYear int64 `json:"MonthOfYear,omitempty"`

		RepeatInterval int64 `json:"RepeatInterval,omitempty"`

		TimeOfDay int64 `json:"TimeOfDay,omitempty"`

		TimeZone *string `json:"TimeZone,omitempty"`

		WeekOfMonth int64 `json:"WeekOfMonth,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.DayOfMonth = dataAO0.DayOfMonth

	m.DayOfWeek = dataAO0.DayOfWeek

	m.MonthOfYear = dataAO0.MonthOfYear

	m.RepeatInterval = dataAO0.RepeatInterval

	m.TimeOfDay = dataAO0.TimeOfDay

	m.TimeZone = dataAO0.TimeZone

	m.WeekOfMonth = dataAO0.WeekOfMonth

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m OnpremSchedule) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		DayOfMonth int64 `json:"DayOfMonth,omitempty"`

		DayOfWeek int64 `json:"DayOfWeek,omitempty"`

		MonthOfYear int64 `json:"MonthOfYear,omitempty"`

		RepeatInterval int64 `json:"RepeatInterval,omitempty"`

		TimeOfDay int64 `json:"TimeOfDay,omitempty"`

		TimeZone *string `json:"TimeZone,omitempty"`

		WeekOfMonth int64 `json:"WeekOfMonth,omitempty"`
	}

	dataAO0.DayOfMonth = m.DayOfMonth

	dataAO0.DayOfWeek = m.DayOfWeek

	dataAO0.MonthOfYear = m.MonthOfYear

	dataAO0.RepeatInterval = m.RepeatInterval

	dataAO0.TimeOfDay = m.TimeOfDay

	dataAO0.TimeZone = m.TimeZone

	dataAO0.WeekOfMonth = m.WeekOfMonth

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this onprem schedule
func (m *OnpremSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTimeZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var onpremScheduleTypeTimeZonePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pacific/Niue","Pacific/Pago_Pago","Pacific/Honolulu","Pacific/Rarotonga","Pacific/Tahiti","Pacific/Marquesas","America/Anchorage","Pacific/Gambier","America/Los_Angeles","America/Tijuana","America/Vancouver","America/Whitehorse","Pacific/Pitcairn","America/Dawson_Creek","America/Denver","America/Edmonton","America/Hermosillo","America/Mazatlan","America/Phoenix","America/Yellowknife","America/Belize","America/Chicago","America/Costa_Rica","America/El_Salvador","America/Guatemala","America/Managua","America/Mexico_City","America/Regina","America/Tegucigalpa","America/Winnipeg","Pacific/Galapagos","America/Bogota","America/Cancun","America/Cayman","America/Guayaquil","America/Havana","America/Iqaluit","America/Jamaica","America/Lima","America/Nassau","America/New_York","America/Panama","America/Port-au-Prince","America/Rio_Branco","America/Toronto","Pacific/Easter","America/Caracas","America/Asuncion","America/Barbados","America/Boa_Vista","America/Campo_Grande","America/Cuiaba","America/Curacao","America/Grand_Turk","America/Guyana","America/Halifax","America/La_Paz","America/Manaus","America/Martinique","America/Port_of_Spain","America/Porto_Velho","America/Puerto_Rico","America/Santo_Domingo","America/Thule","Atlantic/Bermuda","America/St_Johns","America/Araguaina","America/Argentina/Buenos_Aires","America/Bahia","America/Belem","America/Cayenne","America/Fortaleza","America/Godthab","America/Maceio","America/Miquelon","America/Montevideo","America/Paramaribo","America/Recife","America/Santiago","America/Sao_Paulo","Antarctica/Palmer","Antarctica/Rothera","Atlantic/Stanley","America/Noronha","Atlantic/South_Georgia","America/Scoresbysund","Atlantic/Azores","Atlantic/Cape_Verde","Africa/Abidjan","Africa/Accra","Africa/Bissau","Africa/Casablanca","Africa/El_Aaiun","Africa/Monrovia","America/Danmarkshavn","Atlantic/Canary","Atlantic/Faroe","Atlantic/Reykjavik","Etc/GMT","Europe/Dublin","Europe/Lisbon","Europe/London","Africa/Algiers","Africa/Ceuta","Africa/Lagos","Africa/Ndjamena","Africa/Tunis","Africa/Windhoek","Europe/Amsterdam","Europe/Andorra","Europe/Belgrade","Europe/Berlin","Europe/Brussels","Europe/Budapest","Europe/Copenhagen","Europe/Gibraltar","Europe/Luxembourg","Europe/Madrid","Europe/Malta","Europe/Monaco","Europe/Oslo","Europe/Paris","Europe/Prague","Europe/Rome","Europe/Stockholm","Europe/Tirane","Europe/Vienna","Europe/Warsaw","Europe/Zurich","Africa/Cairo","Africa/Johannesburg","Africa/Maputo","Africa/Tripoli","Asia/Amman","Asia/Beirut","Asia/Damascus","Asia/Gaza","Asia/Jerusalem","Asia/Nicosia","Europe/Athens","Europe/Bucharest","Europe/Chisinau","Europe/Helsinki","Europe/Istanbul","Europe/Kaliningrad","Europe/Kiev","Europe/Riga","Europe/Sofia","Europe/Tallinn","Europe/Vilnius","Africa/Khartoum","Africa/Nairobi","Antarctica/Syowa","Asia/Baghdad","Asia/Qatar","Asia/Riyadh","Europe/Minsk","Europe/Moscow","Asia/Tehran","Asia/Baku","Asia/Dubai","Asia/Tbilisi","Asia/Yerevan","Europe/Samara","Indian/Mahe","Indian/Mauritius","Indian/Reunion","Asia/Kabul","Antarctica/Mawson","Asia/Aqtau","Asia/Aqtobe","Asia/Ashgabat","Asia/Dushanbe","Asia/Karachi","Asia/Tashkent","Asia/Yekaterinburg","Indian/Kerguelen","Indian/Maldives","Asia/Calcutta","Asia/Colombo","Asia/Katmandu","Antarctica/Vostok","Asia/Almaty","Asia/Bishkek","Asia/Dhaka","Asia/Omsk","Asia/Thimphu","Indian/Chagos","Asia/Rangoon","Indian/Cocos","Antarctica/Davis","Asia/Bangkok","Asia/Hovd","Asia/Jakarta","Asia/Krasnoyarsk","Asia/Saigon","Indian/Christmas","Antarctica/Casey","Asia/Brunei","Asia/Choibalsan","Asia/Hong_Kong","Asia/Irkutsk","Asia/Kuala_Lumpur","Asia/Macau","Asia/Makassar","Asia/Manila","Asia/Shanghai","Asia/Singapore","Asia/Taipei","Asia/Ulaanbaatar","Australia/Perth","Asia/Pyongyang","Asia/Dili","Asia/Jayapura","Asia/Seoul","Asia/Tokyo","Asia/Yakutsk","Pacific/Palau","Australia/Adelaide","Australia/Darwin","Antarctica/DumontDUrville","Asia/Magadan","Asia/Vladivostok","Australia/Brisbane","Australia/Hobart","Australia/Sydney","Pacific/Chuuk","Pacific/Guam","Pacific/Port_Moresby","Pacific/Efate","Pacific/Guadalcanal","Pacific/Kosrae","Pacific/Norfolk","Pacific/Noumea","Pacific/Pohnpei","Asia/Kamchatka","Pacific/Auckland","Pacific/Fiji","Pacific/Funafuti","Pacific/Kwajalein","Pacific/Majuro","Pacific/Nauru","Pacific/Tarawa","Pacific/Wake","Pacific/Wallis","Pacific/Apia","Pacific/Enderbury","Pacific/Fakaofo","Pacific/Tongatapu","Pacific/Kiritimati"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		onpremScheduleTypeTimeZonePropEnum = append(onpremScheduleTypeTimeZonePropEnum, v)
	}
}

// property enum
func (m *OnpremSchedule) validateTimeZoneEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, onpremScheduleTypeTimeZonePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OnpremSchedule) validateTimeZone(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeZone) { // not required
		return nil
	}

	// value enum
	if err := m.validateTimeZoneEnum("TimeZone", "body", *m.TimeZone); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OnpremSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OnpremSchedule) UnmarshalBinary(b []byte) error {
	var res OnpremSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
