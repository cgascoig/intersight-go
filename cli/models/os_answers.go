// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OsAnswers Os:Answers
//
// This MO captures the values for the most common set of fields in OS specific
// answer files. The values provided in this MO are used to construct the OS specific
// answer files (kickstart, seed, unattended xml) by replacing the fields/placeholders
// in selected os.ConfigurationFile content with the values of this MO properties.
//
// swagger:model osAnswers
type OsAnswers struct {

	// If the source of the answers is a static file, the content of the file is stored as value
	// in this property.
	//
	// The value is mandatory only when the 'Source' property has been set to 'File'.
	//
	//
	AnswerFile string `json:"AnswerFile,omitempty"`

	// Hostname to be configured for the server in the OS. Hostname property is required
	// when the 'Source' property has been set to 'Template'.
	//
	// Please note that this property will be ignored for the answer instance used
	// inside the os.InstallTemplate MO since this property must have unique value for
	// each server and is irrelevant in a reusable os.InstallTemplate MO. The value of
	// this property specified in os.Install MO will be considered for the installation.
	//
	//
	Hostname string `json:"Hostname,omitempty"`

	// IP configuration type. Values are Static or Dynamic when the Source property is set to Template.
	//
	// In case of static IP configuration, IP address, gateway and other details need
	// to be populated. In case of dynamic the IP configuration is obtained dynamically
	// from DHCP.
	//
	//
	// Enum: [static dynamic]
	IPConfigType *string `json:"IpConfigType,omitempty"`

	// In case of static IP configuration, IP address, netmask and gateway details are
	// provided.
	//
	// Please note that this property will be ignored for the answer instance used
	// inside the os.InstallTemplate MO since this property must have unique value for
	// each server and is irrelevant in a reusable os.InstallTemplate MO. The value of
	// this property specified in os.Install MO will be considered for the installation.
	//
	//
	IPV4Config interface{} `json:"IpV4Config,omitempty"`

	// Indicates whether the value of the 'answerFile' property has been set.
	//
	// Read Only: true
	IsAnswerFileSet *bool `json:"IsAnswerFileSet,omitempty"`

	// is root password set
	IsRootPasswordSet bool `json:"IsRootPasswordSet,omitempty"`

	// IP address of the name server to be configured in the OS in case the 'Source'
	// property has been set to 'Template'.
	//
	//
	Nameserver string `json:"Nameserver,omitempty"`

	// Password to be set for root/administrator user in case the 'Source'
	// property has been set to 'Template'.
	//
	//
	RootPassword string `json:"RootPassword,omitempty"`

	// Answer values can be provided from three sources - Embedded in OS image, static file,
	// or as placeholder values for an answer file template.
	//
	// Source of the answers is given as value, Embedded/File/Template.
	// 'Embedded' option indicates that the answer file is embedded within the OS Image. 'File'
	// option indicates that the answers are provided as a file. 'Template' indicates that the
	// placeholders in the selected os.ConfigurationFile MO are replaced with values provided
	// as os.Answers MO.
	//
	//
	// Enum: [Embedded File]
	Source *string `json:"Source,omitempty"`

	// The timezone to be configured in the OS.
	//
	//
	// Enum: [Pacific/Niue Pacific/Pago_Pago Pacific/Honolulu Pacific/Rarotonga Pacific/Tahiti Pacific/Marquesas America/Anchorage Pacific/Gambier America/Los_Angeles America/Tijuana America/Vancouver America/Whitehorse Pacific/Pitcairn America/Dawson_Creek America/Denver America/Edmonton America/Hermosillo America/Mazatlan America/Phoenix America/Yellowknife America/Belize America/Chicago America/Costa_Rica America/El_Salvador America/Guatemala America/Managua America/Mexico_City America/Regina America/Tegucigalpa America/Winnipeg Pacific/Galapagos America/Bogota America/Cancun America/Cayman America/Guayaquil America/Havana America/Iqaluit America/Jamaica America/Lima America/Nassau America/New_York America/Panama America/Port-au-Prince America/Rio_Branco America/Toronto Pacific/Easter America/Caracas America/Asuncion America/Barbados America/Boa_Vista America/Campo_Grande America/Cuiaba America/Curacao America/Grand_Turk America/Guyana America/Halifax America/La_Paz America/Manaus America/Martinique America/Port_of_Spain America/Porto_Velho America/Puerto_Rico America/Santo_Domingo America/Thule Atlantic/Bermuda America/St_Johns America/Araguaina America/Argentina/Buenos_Aires America/Bahia America/Belem America/Cayenne America/Fortaleza America/Godthab America/Maceio America/Miquelon America/Montevideo America/Paramaribo America/Recife America/Santiago America/Sao_Paulo Antarctica/Palmer Antarctica/Rothera Atlantic/Stanley America/Noronha Atlantic/South_Georgia America/Scoresbysund Atlantic/Azores Atlantic/Cape_Verde Africa/Abidjan Africa/Accra Africa/Bissau Africa/Casablanca Africa/El_Aaiun Africa/Monrovia America/Danmarkshavn Atlantic/Canary Atlantic/Faroe Atlantic/Reykjavik Etc/GMT Europe/Dublin Europe/Lisbon Europe/London Africa/Algiers Africa/Ceuta Africa/Lagos Africa/Ndjamena Africa/Tunis Africa/Windhoek Europe/Amsterdam Europe/Andorra Europe/Belgrade Europe/Berlin Europe/Brussels Europe/Budapest Europe/Copenhagen Europe/Gibraltar Europe/Luxembourg Europe/Madrid Europe/Malta Europe/Monaco Europe/Oslo Europe/Paris Europe/Prague Europe/Rome Europe/Stockholm Europe/Tirane Europe/Vienna Europe/Warsaw Europe/Zurich Africa/Cairo Africa/Johannesburg Africa/Maputo Africa/Tripoli Asia/Amman Asia/Beirut Asia/Damascus Asia/Gaza Asia/Jerusalem Asia/Nicosia Europe/Athens Europe/Bucharest Europe/Chisinau Europe/Helsinki Europe/Istanbul Europe/Kaliningrad Europe/Kiev Europe/Riga Europe/Sofia Europe/Tallinn Europe/Vilnius Africa/Khartoum Africa/Nairobi Antarctica/Syowa Asia/Baghdad Asia/Qatar Asia/Riyadh Europe/Minsk Europe/Moscow Asia/Tehran Asia/Baku Asia/Dubai Asia/Tbilisi Asia/Yerevan Europe/Samara Indian/Mahe Indian/Mauritius Indian/Reunion Asia/Kabul Antarctica/Mawson Asia/Aqtau Asia/Aqtobe Asia/Ashgabat Asia/Dushanbe Asia/Karachi Asia/Tashkent Asia/Yekaterinburg Indian/Kerguelen Indian/Maldives Asia/Calcutta Asia/Colombo Asia/Katmandu Antarctica/Vostok Asia/Almaty Asia/Bishkek Asia/Dhaka Asia/Omsk Asia/Thimphu Indian/Chagos Asia/Rangoon Indian/Cocos Antarctica/Davis Asia/Bangkok Asia/Hovd Asia/Jakarta Asia/Krasnoyarsk Asia/Saigon Indian/Christmas Antarctica/Casey Asia/Brunei Asia/Choibalsan Asia/Hong_Kong Asia/Irkutsk Asia/Kuala_Lumpur Asia/Macau Asia/Makassar Asia/Manila Asia/Shanghai Asia/Singapore Asia/Taipei Asia/Ulaanbaatar Australia/Perth Asia/Pyongyang Asia/Dili Asia/Jayapura Asia/Seoul Asia/Tokyo Asia/Yakutsk Pacific/Palau Australia/Adelaide Australia/Darwin Antarctica/DumontDUrville Asia/Magadan Asia/Vladivostok Australia/Brisbane Australia/Hobart Australia/Sydney Pacific/Chuuk Pacific/Guam Pacific/Port_Moresby Pacific/Efate Pacific/Guadalcanal Pacific/Kosrae Pacific/Norfolk Pacific/Noumea Pacific/Pohnpei Asia/Kamchatka Pacific/Auckland Pacific/Fiji Pacific/Funafuti Pacific/Kwajalein Pacific/Majuro Pacific/Nauru Pacific/Tarawa Pacific/Wake Pacific/Wallis Pacific/Apia Pacific/Enderbury Pacific/Fakaofo Pacific/Tongatapu Pacific/Kiritimati]
	TimeZone *string `json:"TimeZone,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *OsAnswers) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		AnswerFile string `json:"AnswerFile,omitempty"`

		Hostname string `json:"Hostname,omitempty"`

		IPConfigType *string `json:"IpConfigType,omitempty"`

		IPV4Config interface{} `json:"IpV4Config,omitempty"`

		IsAnswerFileSet *bool `json:"IsAnswerFileSet,omitempty"`

		IsRootPasswordSet bool `json:"IsRootPasswordSet,omitempty"`

		Nameserver string `json:"Nameserver,omitempty"`

		RootPassword string `json:"RootPassword,omitempty"`

		Source *string `json:"Source,omitempty"`

		TimeZone *string `json:"TimeZone,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.AnswerFile = dataAO0.AnswerFile

	m.Hostname = dataAO0.Hostname

	m.IPConfigType = dataAO0.IPConfigType

	m.IPV4Config = dataAO0.IPV4Config

	m.IsAnswerFileSet = dataAO0.IsAnswerFileSet

	m.IsRootPasswordSet = dataAO0.IsRootPasswordSet

	m.Nameserver = dataAO0.Nameserver

	m.RootPassword = dataAO0.RootPassword

	m.Source = dataAO0.Source

	m.TimeZone = dataAO0.TimeZone

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m OsAnswers) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		AnswerFile string `json:"AnswerFile,omitempty"`

		Hostname string `json:"Hostname,omitempty"`

		IPConfigType *string `json:"IpConfigType,omitempty"`

		IPV4Config interface{} `json:"IpV4Config,omitempty"`

		IsAnswerFileSet *bool `json:"IsAnswerFileSet,omitempty"`

		IsRootPasswordSet bool `json:"IsRootPasswordSet,omitempty"`

		Nameserver string `json:"Nameserver,omitempty"`

		RootPassword string `json:"RootPassword,omitempty"`

		Source *string `json:"Source,omitempty"`

		TimeZone *string `json:"TimeZone,omitempty"`
	}

	dataAO0.AnswerFile = m.AnswerFile

	dataAO0.Hostname = m.Hostname

	dataAO0.IPConfigType = m.IPConfigType

	dataAO0.IPV4Config = m.IPV4Config

	dataAO0.IsAnswerFileSet = m.IsAnswerFileSet

	dataAO0.IsRootPasswordSet = m.IsRootPasswordSet

	dataAO0.Nameserver = m.Nameserver

	dataAO0.RootPassword = m.RootPassword

	dataAO0.Source = m.Source

	dataAO0.TimeZone = m.TimeZone

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this os answers
func (m *OsAnswers) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPConfigType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var osAnswersTypeIPConfigTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["static","dynamic"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		osAnswersTypeIPConfigTypePropEnum = append(osAnswersTypeIPConfigTypePropEnum, v)
	}
}

// property enum
func (m *OsAnswers) validateIPConfigTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, osAnswersTypeIPConfigTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OsAnswers) validateIPConfigType(formats strfmt.Registry) error {

	if swag.IsZero(m.IPConfigType) { // not required
		return nil
	}

	// value enum
	if err := m.validateIPConfigTypeEnum("IpConfigType", "body", *m.IPConfigType); err != nil {
		return err
	}

	return nil
}

var osAnswersTypeSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Embedded","File"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		osAnswersTypeSourcePropEnum = append(osAnswersTypeSourcePropEnum, v)
	}
}

// property enum
func (m *OsAnswers) validateSourceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, osAnswersTypeSourcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OsAnswers) validateSource(formats strfmt.Registry) error {

	if swag.IsZero(m.Source) { // not required
		return nil
	}

	// value enum
	if err := m.validateSourceEnum("Source", "body", *m.Source); err != nil {
		return err
	}

	return nil
}

var osAnswersTypeTimeZonePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pacific/Niue","Pacific/Pago_Pago","Pacific/Honolulu","Pacific/Rarotonga","Pacific/Tahiti","Pacific/Marquesas","America/Anchorage","Pacific/Gambier","America/Los_Angeles","America/Tijuana","America/Vancouver","America/Whitehorse","Pacific/Pitcairn","America/Dawson_Creek","America/Denver","America/Edmonton","America/Hermosillo","America/Mazatlan","America/Phoenix","America/Yellowknife","America/Belize","America/Chicago","America/Costa_Rica","America/El_Salvador","America/Guatemala","America/Managua","America/Mexico_City","America/Regina","America/Tegucigalpa","America/Winnipeg","Pacific/Galapagos","America/Bogota","America/Cancun","America/Cayman","America/Guayaquil","America/Havana","America/Iqaluit","America/Jamaica","America/Lima","America/Nassau","America/New_York","America/Panama","America/Port-au-Prince","America/Rio_Branco","America/Toronto","Pacific/Easter","America/Caracas","America/Asuncion","America/Barbados","America/Boa_Vista","America/Campo_Grande","America/Cuiaba","America/Curacao","America/Grand_Turk","America/Guyana","America/Halifax","America/La_Paz","America/Manaus","America/Martinique","America/Port_of_Spain","America/Porto_Velho","America/Puerto_Rico","America/Santo_Domingo","America/Thule","Atlantic/Bermuda","America/St_Johns","America/Araguaina","America/Argentina/Buenos_Aires","America/Bahia","America/Belem","America/Cayenne","America/Fortaleza","America/Godthab","America/Maceio","America/Miquelon","America/Montevideo","America/Paramaribo","America/Recife","America/Santiago","America/Sao_Paulo","Antarctica/Palmer","Antarctica/Rothera","Atlantic/Stanley","America/Noronha","Atlantic/South_Georgia","America/Scoresbysund","Atlantic/Azores","Atlantic/Cape_Verde","Africa/Abidjan","Africa/Accra","Africa/Bissau","Africa/Casablanca","Africa/El_Aaiun","Africa/Monrovia","America/Danmarkshavn","Atlantic/Canary","Atlantic/Faroe","Atlantic/Reykjavik","Etc/GMT","Europe/Dublin","Europe/Lisbon","Europe/London","Africa/Algiers","Africa/Ceuta","Africa/Lagos","Africa/Ndjamena","Africa/Tunis","Africa/Windhoek","Europe/Amsterdam","Europe/Andorra","Europe/Belgrade","Europe/Berlin","Europe/Brussels","Europe/Budapest","Europe/Copenhagen","Europe/Gibraltar","Europe/Luxembourg","Europe/Madrid","Europe/Malta","Europe/Monaco","Europe/Oslo","Europe/Paris","Europe/Prague","Europe/Rome","Europe/Stockholm","Europe/Tirane","Europe/Vienna","Europe/Warsaw","Europe/Zurich","Africa/Cairo","Africa/Johannesburg","Africa/Maputo","Africa/Tripoli","Asia/Amman","Asia/Beirut","Asia/Damascus","Asia/Gaza","Asia/Jerusalem","Asia/Nicosia","Europe/Athens","Europe/Bucharest","Europe/Chisinau","Europe/Helsinki","Europe/Istanbul","Europe/Kaliningrad","Europe/Kiev","Europe/Riga","Europe/Sofia","Europe/Tallinn","Europe/Vilnius","Africa/Khartoum","Africa/Nairobi","Antarctica/Syowa","Asia/Baghdad","Asia/Qatar","Asia/Riyadh","Europe/Minsk","Europe/Moscow","Asia/Tehran","Asia/Baku","Asia/Dubai","Asia/Tbilisi","Asia/Yerevan","Europe/Samara","Indian/Mahe","Indian/Mauritius","Indian/Reunion","Asia/Kabul","Antarctica/Mawson","Asia/Aqtau","Asia/Aqtobe","Asia/Ashgabat","Asia/Dushanbe","Asia/Karachi","Asia/Tashkent","Asia/Yekaterinburg","Indian/Kerguelen","Indian/Maldives","Asia/Calcutta","Asia/Colombo","Asia/Katmandu","Antarctica/Vostok","Asia/Almaty","Asia/Bishkek","Asia/Dhaka","Asia/Omsk","Asia/Thimphu","Indian/Chagos","Asia/Rangoon","Indian/Cocos","Antarctica/Davis","Asia/Bangkok","Asia/Hovd","Asia/Jakarta","Asia/Krasnoyarsk","Asia/Saigon","Indian/Christmas","Antarctica/Casey","Asia/Brunei","Asia/Choibalsan","Asia/Hong_Kong","Asia/Irkutsk","Asia/Kuala_Lumpur","Asia/Macau","Asia/Makassar","Asia/Manila","Asia/Shanghai","Asia/Singapore","Asia/Taipei","Asia/Ulaanbaatar","Australia/Perth","Asia/Pyongyang","Asia/Dili","Asia/Jayapura","Asia/Seoul","Asia/Tokyo","Asia/Yakutsk","Pacific/Palau","Australia/Adelaide","Australia/Darwin","Antarctica/DumontDUrville","Asia/Magadan","Asia/Vladivostok","Australia/Brisbane","Australia/Hobart","Australia/Sydney","Pacific/Chuuk","Pacific/Guam","Pacific/Port_Moresby","Pacific/Efate","Pacific/Guadalcanal","Pacific/Kosrae","Pacific/Norfolk","Pacific/Noumea","Pacific/Pohnpei","Asia/Kamchatka","Pacific/Auckland","Pacific/Fiji","Pacific/Funafuti","Pacific/Kwajalein","Pacific/Majuro","Pacific/Nauru","Pacific/Tarawa","Pacific/Wake","Pacific/Wallis","Pacific/Apia","Pacific/Enderbury","Pacific/Fakaofo","Pacific/Tongatapu","Pacific/Kiritimati"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		osAnswersTypeTimeZonePropEnum = append(osAnswersTypeTimeZonePropEnum, v)
	}
}

// property enum
func (m *OsAnswers) validateTimeZoneEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, osAnswersTypeTimeZonePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OsAnswers) validateTimeZone(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeZone) { // not required
		return nil
	}

	// value enum
	if err := m.validateTimeZoneEnum("TimeZone", "body", *m.TimeZone); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OsAnswers) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsAnswers) UnmarshalBinary(b []byte) error {
	var res OsAnswers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
