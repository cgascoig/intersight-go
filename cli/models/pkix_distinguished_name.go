// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PkixDistinguishedName Pkix:Distinguished Name
//
// The identifier for the owner of an X.509 certificate and the authority that issued the certificate.
//
// swagger:model pkixDistinguishedName
type PkixDistinguishedName struct {

	// A required component that identifies a person or an object.
	//
	// Read Only: true
	CommonName string `json:"CommonName,omitempty"`

	// Identifier for the country in which the entity resides.
	//
	// Read Only: true
	Country []string `json:"Country"`

	// Identifier for the place where the entry resides. The locality can be a city, county, township, or other geographic region.
	//
	// Read Only: true
	Locality []string `json:"Locality"`

	// Identifier for the organization in which the entity resides.
	//
	// Read Only: true
	Organization []string `json:"Organization"`

	// Identifier for a unit within the organization.
	//
	// Read Only: true
	OrganizationalUnit []string `json:"OrganizationalUnit"`

	// Identifier for the state or province of the entity.
	//
	// Read Only: true
	State []string `json:"State"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PkixDistinguishedName) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		CommonName string `json:"CommonName,omitempty"`

		Country []string `json:"Country"`

		Locality []string `json:"Locality"`

		Organization []string `json:"Organization"`

		OrganizationalUnit []string `json:"OrganizationalUnit"`

		State []string `json:"State"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.CommonName = dataAO0.CommonName

	m.Country = dataAO0.Country

	m.Locality = dataAO0.Locality

	m.Organization = dataAO0.Organization

	m.OrganizationalUnit = dataAO0.OrganizationalUnit

	m.State = dataAO0.State

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PkixDistinguishedName) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		CommonName string `json:"CommonName,omitempty"`

		Country []string `json:"Country"`

		Locality []string `json:"Locality"`

		Organization []string `json:"Organization"`

		OrganizationalUnit []string `json:"OrganizationalUnit"`

		State []string `json:"State"`
	}

	dataAO0.CommonName = m.CommonName

	dataAO0.Country = m.Country

	dataAO0.Locality = m.Locality

	dataAO0.Organization = m.Organization

	dataAO0.OrganizationalUnit = m.OrganizationalUnit

	dataAO0.State = m.State

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this pkix distinguished name
func (m *PkixDistinguishedName) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PkixDistinguishedName) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PkixDistinguishedName) UnmarshalBinary(b []byte) error {
	var res PkixDistinguishedName
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
