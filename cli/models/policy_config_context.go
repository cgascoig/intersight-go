// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PolicyConfigContext Policy:Config Context
//
// Configuration related state and results.
//
// swagger:model policyConfigContext
type PolicyConfigContext struct {

	// Indicates a profile's configuration deploying state. Values -- Assigned, Not-assigned, Associated, Pending-changes, Validating, Configuring, Failed.
	//
	// Read Only: true
	ConfigState string `json:"ConfigState,omitempty"`

	// System action to trigger the appropriate workflow. Values -- No_op, ConfigChange, Deploy, Unbind.
	//
	ControlAction string `json:"ControlAction,omitempty"`

	// Indicates a profile's error state. Values -- Validation-error (Static validation error), Pre-config-error (Runtime validation error), Config-error (Runtime configuration error).
	//
	ErrorState string `json:"ErrorState,omitempty"`

	// Combined state (configState, and operational state of the associated physical resource) to indicate the current state of the profile. Values -- n/a, Power-off, Pending-changes, Configuring, Ok, Failed.
	//
	// Read Only: true
	OperState string `json:"OperState,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PolicyConfigContext) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ConfigState string `json:"ConfigState,omitempty"`

		ControlAction string `json:"ControlAction,omitempty"`

		ErrorState string `json:"ErrorState,omitempty"`

		OperState string `json:"OperState,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.ConfigState = dataAO0.ConfigState

	m.ControlAction = dataAO0.ControlAction

	m.ErrorState = dataAO0.ErrorState

	m.OperState = dataAO0.OperState

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PolicyConfigContext) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		ConfigState string `json:"ConfigState,omitempty"`

		ControlAction string `json:"ControlAction,omitempty"`

		ErrorState string `json:"ErrorState,omitempty"`

		OperState string `json:"OperState,omitempty"`
	}

	dataAO0.ConfigState = m.ConfigState

	dataAO0.ControlAction = m.ControlAction

	dataAO0.ErrorState = m.ErrorState

	dataAO0.OperState = m.OperState

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this policy config context
func (m *PolicyConfigContext) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PolicyConfigContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyConfigContext) UnmarshalBinary(b []byte) error {
	var res PolicyConfigContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
