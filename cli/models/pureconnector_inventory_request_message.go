// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PureconnectorInventoryRequestMessage Pureconnector:Inventory Request Message
//
// Pure inventory request message.
//
// swagger:model pureconnectorInventoryRequestMessage
type PureconnectorInventoryRequestMessage struct {

	// Relative url used to fetch inventory from Pure storage array.
	//
	APIName string `json:"ApiName,omitempty"`

	// Dependent or child inventory jobs.
	//
	DependentJobs []*PureconnectorInventoryRequestMessage `json:"DependentJobs"`

	// Inventory job name. This will be sent back along with inventory response.
	//
	JobName string `json:"JobName,omitempty"`

	// Maximum number of objects to be retrieved in a singel get request. Itis intented for pagination.
	//
	Limit int64 `json:"Limit,omitempty"`

	// Pure storage inventory response topic.It is a topic where device connector sends inventory response to.
	//
	ResponseTopic string `json:"ResponseTopic,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PureconnectorInventoryRequestMessage) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		APIName string `json:"ApiName,omitempty"`

		DependentJobs []*PureconnectorInventoryRequestMessage `json:"DependentJobs"`

		JobName string `json:"JobName,omitempty"`

		Limit int64 `json:"Limit,omitempty"`

		ResponseTopic string `json:"ResponseTopic,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.APIName = dataAO0.APIName

	m.DependentJobs = dataAO0.DependentJobs

	m.JobName = dataAO0.JobName

	m.Limit = dataAO0.Limit

	m.ResponseTopic = dataAO0.ResponseTopic

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PureconnectorInventoryRequestMessage) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		APIName string `json:"ApiName,omitempty"`

		DependentJobs []*PureconnectorInventoryRequestMessage `json:"DependentJobs"`

		JobName string `json:"JobName,omitempty"`

		Limit int64 `json:"Limit,omitempty"`

		ResponseTopic string `json:"ResponseTopic,omitempty"`
	}

	dataAO0.APIName = m.APIName

	dataAO0.DependentJobs = m.DependentJobs

	dataAO0.JobName = m.JobName

	dataAO0.Limit = m.Limit

	dataAO0.ResponseTopic = m.ResponseTopic

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this pureconnector inventory request message
func (m *PureconnectorInventoryRequestMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDependentJobs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PureconnectorInventoryRequestMessage) validateDependentJobs(formats strfmt.Registry) error {

	if swag.IsZero(m.DependentJobs) { // not required
		return nil
	}

	for i := 0; i < len(m.DependentJobs); i++ {
		if swag.IsZero(m.DependentJobs[i]) { // not required
			continue
		}

		if m.DependentJobs[i] != nil {
			if err := m.DependentJobs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DependentJobs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PureconnectorInventoryRequestMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PureconnectorInventoryRequestMessage) UnmarshalBinary(b []byte) error {
	var res PureconnectorInventoryRequestMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
