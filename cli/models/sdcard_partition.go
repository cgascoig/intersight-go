// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SdcardPartition Sdcard:Partition
//
// This adds and configures operating system partitions.
//
// swagger:model sdcardPartition
type SdcardPartition struct {

	// This specifies the type of the partition. Allowed values are OS, Utility.
	//
	// Enum: [OS Utility]
	Type *string `json:"Type,omitempty"`

	// Collection of available virtual drives.
	//
	VirtualDrives []*SdcardVirtualDrive `json:"VirtualDrives"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SdcardPartition) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Type *string `json:"Type,omitempty"`

		VirtualDrives []*SdcardVirtualDrive `json:"VirtualDrives"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Type = dataAO0.Type

	m.VirtualDrives = dataAO0.VirtualDrives

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SdcardPartition) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Type *string `json:"Type,omitempty"`

		VirtualDrives []*SdcardVirtualDrive `json:"VirtualDrives"`
	}

	dataAO0.Type = m.Type

	dataAO0.VirtualDrives = m.VirtualDrives

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this sdcard partition
func (m *SdcardPartition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualDrives(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var sdcardPartitionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OS","Utility"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sdcardPartitionTypeTypePropEnum = append(sdcardPartitionTypeTypePropEnum, v)
	}
}

// property enum
func (m *SdcardPartition) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, sdcardPartitionTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SdcardPartition) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *SdcardPartition) validateVirtualDrives(formats strfmt.Registry) error {

	if swag.IsZero(m.VirtualDrives) { // not required
		return nil
	}

	for i := 0; i < len(m.VirtualDrives); i++ {
		if swag.IsZero(m.VirtualDrives[i]) { // not required
			continue
		}

		if m.VirtualDrives[i] != nil {
			if err := m.VirtualDrives[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("VirtualDrives" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SdcardPartition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SdcardPartition) UnmarshalBinary(b []byte) error {
	var res SdcardPartition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
