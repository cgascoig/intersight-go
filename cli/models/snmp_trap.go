// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnmpTrap Snmp:Trap
//
// Complex type that models a trap message sent from an agent to the manager.
//
// swagger:model snmpTrap
type SnmpTrap struct {

	// Address to which the SNMP trap information is sent.
	//
	Destination string `json:"Destination,omitempty"`

	// Enables/disables the trap on the server If enabled, trap is active on the server.
	//
	Enabled bool `json:"Enabled,omitempty"`

	// Port used by the server to communicate with trap destination. Enter a value between 1-65535.
	//
	Port int64 `json:"Port,omitempty"`

	// Type of trap which decides whether to receive a notification when a trap is received at the destination.
	//
	// Enum: [Trap Inform]
	Type *string `json:"Type,omitempty"`

	// SNMP user for the trap. Applicable only to SNMPv3.
	//
	User string `json:"User,omitempty"`

	// SNMP version used for the trap.
	//
	// Enum: [V3 V2]
	Version *string `json:"Version,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SnmpTrap) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Destination string `json:"Destination,omitempty"`

		Enabled bool `json:"Enabled,omitempty"`

		Port int64 `json:"Port,omitempty"`

		Type *string `json:"Type,omitempty"`

		User string `json:"User,omitempty"`

		Version *string `json:"Version,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Destination = dataAO0.Destination

	m.Enabled = dataAO0.Enabled

	m.Port = dataAO0.Port

	m.Type = dataAO0.Type

	m.User = dataAO0.User

	m.Version = dataAO0.Version

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SnmpTrap) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Destination string `json:"Destination,omitempty"`

		Enabled bool `json:"Enabled,omitempty"`

		Port int64 `json:"Port,omitempty"`

		Type *string `json:"Type,omitempty"`

		User string `json:"User,omitempty"`

		Version *string `json:"Version,omitempty"`
	}

	dataAO0.Destination = m.Destination

	dataAO0.Enabled = m.Enabled

	dataAO0.Port = m.Port

	dataAO0.Type = m.Type

	dataAO0.User = m.User

	dataAO0.Version = m.Version

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this snmp trap
func (m *SnmpTrap) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var snmpTrapTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Trap","Inform"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snmpTrapTypeTypePropEnum = append(snmpTrapTypeTypePropEnum, v)
	}
}

// property enum
func (m *SnmpTrap) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, snmpTrapTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SnmpTrap) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

var snmpTrapTypeVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["V3","V2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snmpTrapTypeVersionPropEnum = append(snmpTrapTypeVersionPropEnum, v)
	}
}

// property enum
func (m *SnmpTrap) validateVersionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, snmpTrapTypeVersionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SnmpTrap) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	// value enum
	if err := m.validateVersionEnum("Version", "body", *m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnmpTrap) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnmpTrap) UnmarshalBinary(b []byte) error {
	var res SnmpTrap
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
