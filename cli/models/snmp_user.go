// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnmpUser Snmp:User
//
// Complex type for a User based security model, for communication between an agent and manager. Applicable only for SNMPv3.
//
// swagger:model snmpUser
type SnmpUser struct {

	// Authorization password for the user.
	//
	AuthPassword string `json:"AuthPassword,omitempty"`

	// Authorization protocol for authenticating the user.
	//
	// Enum: [NA MD5 SHA]
	AuthType *string `json:"AuthType,omitempty"`

	// Indicates whether the value of the 'authPassword' property has been set.
	//
	// Read Only: true
	IsAuthPasswordSet *bool `json:"IsAuthPasswordSet,omitempty"`

	// is privacy password set
	IsPrivacyPasswordSet bool `json:"IsPrivacyPasswordSet,omitempty"`

	// SNMP username. Must have a minimum of 1 and and a maximum of 31 characters.
	//
	Name string `json:"Name,omitempty"`

	// Privacy password for the user.
	//
	PrivacyPassword string `json:"PrivacyPassword,omitempty"`

	// Privacy protocol for the user.
	//
	// Enum: [NA DES AES]
	PrivacyType *string `json:"PrivacyType,omitempty"`

	// Security mechanism used for communication between agent and manager.
	//
	// Enum: [AuthPriv NoAuthNoPriv AuthNoPriv]
	SecurityLevel *string `json:"SecurityLevel,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SnmpUser) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		AuthPassword string `json:"AuthPassword,omitempty"`

		AuthType *string `json:"AuthType,omitempty"`

		IsAuthPasswordSet *bool `json:"IsAuthPasswordSet,omitempty"`

		IsPrivacyPasswordSet bool `json:"IsPrivacyPasswordSet,omitempty"`

		Name string `json:"Name,omitempty"`

		PrivacyPassword string `json:"PrivacyPassword,omitempty"`

		PrivacyType *string `json:"PrivacyType,omitempty"`

		SecurityLevel *string `json:"SecurityLevel,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.AuthPassword = dataAO0.AuthPassword

	m.AuthType = dataAO0.AuthType

	m.IsAuthPasswordSet = dataAO0.IsAuthPasswordSet

	m.IsPrivacyPasswordSet = dataAO0.IsPrivacyPasswordSet

	m.Name = dataAO0.Name

	m.PrivacyPassword = dataAO0.PrivacyPassword

	m.PrivacyType = dataAO0.PrivacyType

	m.SecurityLevel = dataAO0.SecurityLevel

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SnmpUser) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		AuthPassword string `json:"AuthPassword,omitempty"`

		AuthType *string `json:"AuthType,omitempty"`

		IsAuthPasswordSet *bool `json:"IsAuthPasswordSet,omitempty"`

		IsPrivacyPasswordSet bool `json:"IsPrivacyPasswordSet,omitempty"`

		Name string `json:"Name,omitempty"`

		PrivacyPassword string `json:"PrivacyPassword,omitempty"`

		PrivacyType *string `json:"PrivacyType,omitempty"`

		SecurityLevel *string `json:"SecurityLevel,omitempty"`
	}

	dataAO0.AuthPassword = m.AuthPassword

	dataAO0.AuthType = m.AuthType

	dataAO0.IsAuthPasswordSet = m.IsAuthPasswordSet

	dataAO0.IsPrivacyPasswordSet = m.IsPrivacyPasswordSet

	dataAO0.Name = m.Name

	dataAO0.PrivacyPassword = m.PrivacyPassword

	dataAO0.PrivacyType = m.PrivacyType

	dataAO0.SecurityLevel = m.SecurityLevel

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this snmp user
func (m *SnmpUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivacyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var snmpUserTypeAuthTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NA","MD5","SHA"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snmpUserTypeAuthTypePropEnum = append(snmpUserTypeAuthTypePropEnum, v)
	}
}

// property enum
func (m *SnmpUser) validateAuthTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, snmpUserTypeAuthTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SnmpUser) validateAuthType(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthTypeEnum("AuthType", "body", *m.AuthType); err != nil {
		return err
	}

	return nil
}

var snmpUserTypePrivacyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NA","DES","AES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snmpUserTypePrivacyTypePropEnum = append(snmpUserTypePrivacyTypePropEnum, v)
	}
}

// property enum
func (m *SnmpUser) validatePrivacyTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, snmpUserTypePrivacyTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SnmpUser) validatePrivacyType(formats strfmt.Registry) error {

	if swag.IsZero(m.PrivacyType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePrivacyTypeEnum("PrivacyType", "body", *m.PrivacyType); err != nil {
		return err
	}

	return nil
}

var snmpUserTypeSecurityLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AuthPriv","NoAuthNoPriv","AuthNoPriv"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snmpUserTypeSecurityLevelPropEnum = append(snmpUserTypeSecurityLevelPropEnum, v)
	}
}

// property enum
func (m *SnmpUser) validateSecurityLevelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, snmpUserTypeSecurityLevelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SnmpUser) validateSecurityLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validateSecurityLevelEnum("SecurityLevel", "body", *m.SecurityLevel); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnmpUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnmpUser) UnmarshalBinary(b []byte) error {
	var res SnmpUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
