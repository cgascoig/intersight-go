// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StorageVirtualDriveConfig Virtual Drive
//
// This type models a single virtual drive that needs to be created through this policy.
//
// swagger:model storageVirtualDriveConfig
type StorageVirtualDriveConfig struct {

	// This property holds the access policy that host has on this virtual drive.
	//
	// Enum: [Default ReadWrite ReadOnly Blocked]
	AccessPolicy *string `json:"AccessPolicy,omitempty"`

	// This flag enables the use of this virtual drive as a boot drive.
	//
	BootDrive bool `json:"BootDrive,omitempty"`

	// Disk group policy that has the disk group in which this virtual drive needs to be created.
	//
	// Read Only: true
	DiskGroupName string `json:"DiskGroupName,omitempty"`

	// Disk group policy that has the disk group in which this virtual drive needs to be created.
	//
	DiskGroupPolicy string `json:"DiskGroupPolicy,omitempty"`

	// This property expect disk cache policy.
	//
	// Enum: [Default NoChange Enable Disable]
	DriveCache *string `json:"DriveCache,omitempty"`

	// This flag enables this virtual drive to use all the available space in the disk group. When this flag is configured, the size property is ignored.
	//
	ExpandToAvailable bool `json:"ExpandToAvailable,omitempty"`

	// This property expects the desired IO mode - direct IO or cached IO.
	//
	// Enum: [Default Direct Cached]
	IoPolicy *string `json:"IoPolicy,omitempty"`

	// The name of the virtual drive. The name can be between 1 and 15 alphanumeric characters. Spaces or any special characters other than - (hyphen), _ (underscore), : (colon), and . (period) are not allowed.
	//
	Name string `json:"Name,omitempty"`

	// This property holds the read ahead mode to be used.
	//
	// Enum: [Default ReadAhead NoReadAhead]
	ReadPolicy *string `json:"ReadPolicy,omitempty"`

	// Virtual drive size in MB. This is a required field unless the 'Expand to Available' option is enabled.
	//
	Size int64 `json:"Size,omitempty"`

	// This property holds the write mode used to write the data in this virtual drive.
	//
	// Enum: [Default WriteThrough WriteBackGoodBbu AlwaysWriteBack]
	WritePolicy *string `json:"WritePolicy,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StorageVirtualDriveConfig) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		AccessPolicy *string `json:"AccessPolicy,omitempty"`

		BootDrive bool `json:"BootDrive,omitempty"`

		DiskGroupName string `json:"DiskGroupName,omitempty"`

		DiskGroupPolicy string `json:"DiskGroupPolicy,omitempty"`

		DriveCache *string `json:"DriveCache,omitempty"`

		ExpandToAvailable bool `json:"ExpandToAvailable,omitempty"`

		IoPolicy *string `json:"IoPolicy,omitempty"`

		Name string `json:"Name,omitempty"`

		ReadPolicy *string `json:"ReadPolicy,omitempty"`

		Size int64 `json:"Size,omitempty"`

		WritePolicy *string `json:"WritePolicy,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.AccessPolicy = dataAO0.AccessPolicy

	m.BootDrive = dataAO0.BootDrive

	m.DiskGroupName = dataAO0.DiskGroupName

	m.DiskGroupPolicy = dataAO0.DiskGroupPolicy

	m.DriveCache = dataAO0.DriveCache

	m.ExpandToAvailable = dataAO0.ExpandToAvailable

	m.IoPolicy = dataAO0.IoPolicy

	m.Name = dataAO0.Name

	m.ReadPolicy = dataAO0.ReadPolicy

	m.Size = dataAO0.Size

	m.WritePolicy = dataAO0.WritePolicy

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StorageVirtualDriveConfig) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		AccessPolicy *string `json:"AccessPolicy,omitempty"`

		BootDrive bool `json:"BootDrive,omitempty"`

		DiskGroupName string `json:"DiskGroupName,omitempty"`

		DiskGroupPolicy string `json:"DiskGroupPolicy,omitempty"`

		DriveCache *string `json:"DriveCache,omitempty"`

		ExpandToAvailable bool `json:"ExpandToAvailable,omitempty"`

		IoPolicy *string `json:"IoPolicy,omitempty"`

		Name string `json:"Name,omitempty"`

		ReadPolicy *string `json:"ReadPolicy,omitempty"`

		Size int64 `json:"Size,omitempty"`

		WritePolicy *string `json:"WritePolicy,omitempty"`
	}

	dataAO0.AccessPolicy = m.AccessPolicy

	dataAO0.BootDrive = m.BootDrive

	dataAO0.DiskGroupName = m.DiskGroupName

	dataAO0.DiskGroupPolicy = m.DiskGroupPolicy

	dataAO0.DriveCache = m.DriveCache

	dataAO0.ExpandToAvailable = m.ExpandToAvailable

	dataAO0.IoPolicy = m.IoPolicy

	dataAO0.Name = m.Name

	dataAO0.ReadPolicy = m.ReadPolicy

	dataAO0.Size = m.Size

	dataAO0.WritePolicy = m.WritePolicy

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storage virtual drive config
func (m *StorageVirtualDriveConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDriveCache(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIoPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWritePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storageVirtualDriveConfigTypeAccessPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Default","ReadWrite","ReadOnly","Blocked"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageVirtualDriveConfigTypeAccessPolicyPropEnum = append(storageVirtualDriveConfigTypeAccessPolicyPropEnum, v)
	}
}

// property enum
func (m *StorageVirtualDriveConfig) validateAccessPolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storageVirtualDriveConfigTypeAccessPolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StorageVirtualDriveConfig) validateAccessPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.AccessPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateAccessPolicyEnum("AccessPolicy", "body", *m.AccessPolicy); err != nil {
		return err
	}

	return nil
}

var storageVirtualDriveConfigTypeDriveCachePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Default","NoChange","Enable","Disable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageVirtualDriveConfigTypeDriveCachePropEnum = append(storageVirtualDriveConfigTypeDriveCachePropEnum, v)
	}
}

// property enum
func (m *StorageVirtualDriveConfig) validateDriveCacheEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storageVirtualDriveConfigTypeDriveCachePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StorageVirtualDriveConfig) validateDriveCache(formats strfmt.Registry) error {

	if swag.IsZero(m.DriveCache) { // not required
		return nil
	}

	// value enum
	if err := m.validateDriveCacheEnum("DriveCache", "body", *m.DriveCache); err != nil {
		return err
	}

	return nil
}

var storageVirtualDriveConfigTypeIoPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Default","Direct","Cached"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageVirtualDriveConfigTypeIoPolicyPropEnum = append(storageVirtualDriveConfigTypeIoPolicyPropEnum, v)
	}
}

// property enum
func (m *StorageVirtualDriveConfig) validateIoPolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storageVirtualDriveConfigTypeIoPolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StorageVirtualDriveConfig) validateIoPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.IoPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateIoPolicyEnum("IoPolicy", "body", *m.IoPolicy); err != nil {
		return err
	}

	return nil
}

var storageVirtualDriveConfigTypeReadPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Default","ReadAhead","NoReadAhead"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageVirtualDriveConfigTypeReadPolicyPropEnum = append(storageVirtualDriveConfigTypeReadPolicyPropEnum, v)
	}
}

// property enum
func (m *StorageVirtualDriveConfig) validateReadPolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storageVirtualDriveConfigTypeReadPolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StorageVirtualDriveConfig) validateReadPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.ReadPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateReadPolicyEnum("ReadPolicy", "body", *m.ReadPolicy); err != nil {
		return err
	}

	return nil
}

var storageVirtualDriveConfigTypeWritePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Default","WriteThrough","WriteBackGoodBbu","AlwaysWriteBack"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageVirtualDriveConfigTypeWritePolicyPropEnum = append(storageVirtualDriveConfigTypeWritePolicyPropEnum, v)
	}
}

// property enum
func (m *StorageVirtualDriveConfig) validateWritePolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storageVirtualDriveConfigTypeWritePolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StorageVirtualDriveConfig) validateWritePolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.WritePolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateWritePolicyEnum("WritePolicy", "body", *m.WritePolicy); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageVirtualDriveConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageVirtualDriveConfig) UnmarshalBinary(b []byte) error {
	var res StorageVirtualDriveConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
