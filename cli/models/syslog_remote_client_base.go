// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SyslogRemoteClientBase Syslog:Remote Client Base
//
// Lists properties that are common to all remote logging clients. It serves as a base class for all remote logging clients.
//
// swagger:model syslogRemoteClientBase
type SyslogRemoteClientBase struct {

	// Enables/disables remote logging for the endpoint If enabled, log messages will be sent to the syslog server mentioned in the Hostname/IP Address field.
	//
	Enabled bool `json:"Enabled,omitempty"`

	// Hostname or IP Address of the syslog server where log should be stored.
	//
	Hostname string `json:"Hostname,omitempty"`

	// Lowest level of messages to be included in the remote log.
	//
	// Enum: [warning emergency alert critical error notice informational debug]
	MinSeverity *string `json:"MinSeverity,omitempty"`

	// Port number used for logging on syslog server.
	//
	Port int64 `json:"Port,omitempty"`

	// Transport layer protocol for transmission of log messages to syslog server.
	//
	// Enum: [udp tcp]
	Protocol *string `json:"Protocol,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SyslogRemoteClientBase) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Enabled bool `json:"Enabled,omitempty"`

		Hostname string `json:"Hostname,omitempty"`

		MinSeverity *string `json:"MinSeverity,omitempty"`

		Port int64 `json:"Port,omitempty"`

		Protocol *string `json:"Protocol,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Enabled = dataAO0.Enabled

	m.Hostname = dataAO0.Hostname

	m.MinSeverity = dataAO0.MinSeverity

	m.Port = dataAO0.Port

	m.Protocol = dataAO0.Protocol

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SyslogRemoteClientBase) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Enabled bool `json:"Enabled,omitempty"`

		Hostname string `json:"Hostname,omitempty"`

		MinSeverity *string `json:"MinSeverity,omitempty"`

		Port int64 `json:"Port,omitempty"`

		Protocol *string `json:"Protocol,omitempty"`
	}

	dataAO0.Enabled = m.Enabled

	dataAO0.Hostname = m.Hostname

	dataAO0.MinSeverity = m.MinSeverity

	dataAO0.Port = m.Port

	dataAO0.Protocol = m.Protocol

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this syslog remote client base
func (m *SyslogRemoteClientBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMinSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var syslogRemoteClientBaseTypeMinSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["warning","emergency","alert","critical","error","notice","informational","debug"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		syslogRemoteClientBaseTypeMinSeverityPropEnum = append(syslogRemoteClientBaseTypeMinSeverityPropEnum, v)
	}
}

// property enum
func (m *SyslogRemoteClientBase) validateMinSeverityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, syslogRemoteClientBaseTypeMinSeverityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SyslogRemoteClientBase) validateMinSeverity(formats strfmt.Registry) error {

	if swag.IsZero(m.MinSeverity) { // not required
		return nil
	}

	// value enum
	if err := m.validateMinSeverityEnum("MinSeverity", "body", *m.MinSeverity); err != nil {
		return err
	}

	return nil
}

var syslogRemoteClientBaseTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["udp","tcp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		syslogRemoteClientBaseTypeProtocolPropEnum = append(syslogRemoteClientBaseTypeProtocolPropEnum, v)
	}
}

// property enum
func (m *SyslogRemoteClientBase) validateProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, syslogRemoteClientBaseTypeProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SyslogRemoteClientBase) validateProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("Protocol", "body", *m.Protocol); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SyslogRemoteClientBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SyslogRemoteClientBase) UnmarshalBinary(b []byte) error {
	var res SyslogRemoteClientBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
