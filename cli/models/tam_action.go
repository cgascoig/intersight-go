// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TamAction Tam:Action
//
// An action is used to react when an object satifies the condition specified in alert query. For e.g. an action in case of an object matching a fieldNotice query would be to create an alert instance of type 'fieldNotice' for the affected object.
//
// swagger:model tamAction
type TamAction struct {

	// Type of the managed object that should be marked with an instance of the Alert (when operation type is create) or that should have an alert instance removed (when operation type is remove).
	//
	AffectedObjectType string `json:"AffectedObjectType,omitempty"`

	// Alert type is used to denote the category of an Intersight alert (FieldNotice, equipment Fault etc.)
	//
	// Enum: [psirt fieldNotice]
	AlertType *string `json:"AlertType,omitempty"`

	// Identifiers represents the filter criteria (property names and values) used to identify an Intersight managed object of type specified in affectedObjectType property. An instance of an alert is then create on (or removed from) the identified managed object.
	//
	Identifiers []*TamIdentifiers `json:"Identifiers"`

	// Operation type for the alert action. An action is used to carry out the process of "reacting" to an alert condition. For e.g.in case of a fieldNotice alert, the intention may be to create a new alert (if the condition matches and there is no existing alert) or to remove an existing alert when the alert condition has been remedied.
	//
	// Enum: [create remove]
	OperationType *string `json:"OperationType,omitempty"`

	// Set of SparkSQL queries used determine if a given alert is applicable or not. Refer to https://spark.apache.org/sql/ for more details.
	//
	Queries []*TamQueryEntry `json:"Queries"`

	// Type of Intersight alert. An alert in Intersight could be one of several kinds (FieldNotice, PSIRT etc.). This property is primarily used for filtering alerts based on the type.
	//
	// Enum: [restApi]
	Type *string `json:"Type,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TamAction) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		AffectedObjectType string `json:"AffectedObjectType,omitempty"`

		AlertType *string `json:"AlertType,omitempty"`

		Identifiers []*TamIdentifiers `json:"Identifiers"`

		OperationType *string `json:"OperationType,omitempty"`

		Queries []*TamQueryEntry `json:"Queries"`

		Type *string `json:"Type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.AffectedObjectType = dataAO0.AffectedObjectType

	m.AlertType = dataAO0.AlertType

	m.Identifiers = dataAO0.Identifiers

	m.OperationType = dataAO0.OperationType

	m.Queries = dataAO0.Queries

	m.Type = dataAO0.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TamAction) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		AffectedObjectType string `json:"AffectedObjectType,omitempty"`

		AlertType *string `json:"AlertType,omitempty"`

		Identifiers []*TamIdentifiers `json:"Identifiers"`

		OperationType *string `json:"OperationType,omitempty"`

		Queries []*TamQueryEntry `json:"Queries"`

		Type *string `json:"Type,omitempty"`
	}

	dataAO0.AffectedObjectType = m.AffectedObjectType

	dataAO0.AlertType = m.AlertType

	dataAO0.Identifiers = m.Identifiers

	dataAO0.OperationType = m.OperationType

	dataAO0.Queries = m.Queries

	dataAO0.Type = m.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this tam action
func (m *TamAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentifiers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tamActionTypeAlertTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["psirt","fieldNotice"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tamActionTypeAlertTypePropEnum = append(tamActionTypeAlertTypePropEnum, v)
	}
}

// property enum
func (m *TamAction) validateAlertTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tamActionTypeAlertTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TamAction) validateAlertType(formats strfmt.Registry) error {

	if swag.IsZero(m.AlertType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAlertTypeEnum("AlertType", "body", *m.AlertType); err != nil {
		return err
	}

	return nil
}

func (m *TamAction) validateIdentifiers(formats strfmt.Registry) error {

	if swag.IsZero(m.Identifiers) { // not required
		return nil
	}

	for i := 0; i < len(m.Identifiers); i++ {
		if swag.IsZero(m.Identifiers[i]) { // not required
			continue
		}

		if m.Identifiers[i] != nil {
			if err := m.Identifiers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Identifiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var tamActionTypeOperationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["create","remove"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tamActionTypeOperationTypePropEnum = append(tamActionTypeOperationTypePropEnum, v)
	}
}

// property enum
func (m *TamAction) validateOperationTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tamActionTypeOperationTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TamAction) validateOperationType(formats strfmt.Registry) error {

	if swag.IsZero(m.OperationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperationTypeEnum("OperationType", "body", *m.OperationType); err != nil {
		return err
	}

	return nil
}

func (m *TamAction) validateQueries(formats strfmt.Registry) error {

	if swag.IsZero(m.Queries) { // not required
		return nil
	}

	for i := 0; i < len(m.Queries); i++ {
		if swag.IsZero(m.Queries[i]) { // not required
			continue
		}

		if m.Queries[i] != nil {
			if err := m.Queries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Queries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var tamActionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["restApi"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tamActionTypeTypePropEnum = append(tamActionTypeTypePropEnum, v)
	}
}

// property enum
func (m *TamAction) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tamActionTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TamAction) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TamAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TamAction) UnmarshalBinary(b []byte) error {
	var res TamAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
