// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TamAdvisory Tam:Advisory
//
// An Intersight Advisory. An advisory represents an identification of a potential issue and may also include  a recommendation for resolving the said issue. Advisories may be of different kind and severity. for e.g. It could be a security vulnerability or a performance issue or a hardware issue with different recommendations for resolving them.
//
// swagger:model tamAdvisory
type TamAdvisory struct {
	MoBaseMo

	// Brief description of the advisory details.
	//
	Description string `json:"Description,omitempty"`

	// A user defined name for the Intersight Advisory.
	//
	Name string `json:"Name,omitempty"`

	// Severity level of the Intersight Advisory.
	//
	// Enum: [critical high medium info]
	Severity *string `json:"Severity,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TamAdvisory) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MoBaseMo
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MoBaseMo = aO0

	// AO1
	var dataAO1 struct {
		Description string `json:"Description,omitempty"`

		Name string `json:"Name,omitempty"`

		Severity *string `json:"Severity,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Description = dataAO1.Description

	m.Name = dataAO1.Name

	m.Severity = dataAO1.Severity

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TamAdvisory) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MoBaseMo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Description string `json:"Description,omitempty"`

		Name string `json:"Name,omitempty"`

		Severity *string `json:"Severity,omitempty"`
	}

	dataAO1.Description = m.Description

	dataAO1.Name = m.Name

	dataAO1.Severity = m.Severity

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this tam advisory
func (m *TamAdvisory) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MoBaseMo
	if err := m.MoBaseMo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tamAdvisoryTypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["critical","high","medium","info"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tamAdvisoryTypeSeverityPropEnum = append(tamAdvisoryTypeSeverityPropEnum, v)
	}
}

// property enum
func (m *TamAdvisory) validateSeverityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tamAdvisoryTypeSeverityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TamAdvisory) validateSeverity(formats strfmt.Registry) error {

	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	// value enum
	if err := m.validateSeverityEnum("Severity", "body", *m.Severity); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TamAdvisory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TamAdvisory) UnmarshalBinary(b []byte) error {
	var res TamAdvisory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
