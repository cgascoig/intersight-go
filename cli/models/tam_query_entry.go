// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TamQueryEntry Tam:Query Entry
//
// Contains a set of queries, each with an integer priority. the queries are executed in the order of specified priority. The result of each query is used as an input to the query next in priority order.
//
// swagger:model tamQueryEntry
type TamQueryEntry struct {

	// Name is used to unique identify and result of the given query which can be used by subsequent queries as input data source.
	//
	Name string `json:"Name,omitempty"`

	// An integer value depicting the priority of the query among the queries that are part of the same QueryEntry collection.
	//
	Priority int64 `json:"Priority,omitempty"`

	// A SparkSQL query to be used on a given data source.
	//
	Query string `json:"Query,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TamQueryEntry) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Name string `json:"Name,omitempty"`

		Priority int64 `json:"Priority,omitempty"`

		Query string `json:"Query,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Name = dataAO0.Name

	m.Priority = dataAO0.Priority

	m.Query = dataAO0.Query

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TamQueryEntry) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Name string `json:"Name,omitempty"`

		Priority int64 `json:"Priority,omitempty"`

		Query string `json:"Query,omitempty"`
	}

	dataAO0.Name = m.Name

	dataAO0.Priority = m.Priority

	dataAO0.Query = m.Query

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this tam query entry
func (m *TamQueryEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *TamQueryEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TamQueryEntry) UnmarshalBinary(b []byte) error {
	var res TamQueryEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
