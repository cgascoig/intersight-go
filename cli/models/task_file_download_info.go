// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskFileDownloadInfo Task:File Download Info
//
// Specifies a download path or location currently supports S3 currently.
//
// swagger:model taskFileDownloadInfo
type TaskFileDownloadInfo struct {

	// When the type of the download is inline, it will read the file from the contents here.
	//
	Contents string `json:"Contents,omitempty"`

	// The path of the download from the specified source location and if type is S3, then this is the object key.
	//
	Path string `json:"Path,omitempty"`

	// The source of the download location and if type is S3, then this is the bucket name.
	//
	Source string `json:"Source,omitempty"`

	// The type of download location is captured in type.
	//
	// Enum: [S3 Local Inline]
	Type *string `json:"Type,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TaskFileDownloadInfo) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Contents string `json:"Contents,omitempty"`

		Path string `json:"Path,omitempty"`

		Source string `json:"Source,omitempty"`

		Type *string `json:"Type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Contents = dataAO0.Contents

	m.Path = dataAO0.Path

	m.Source = dataAO0.Source

	m.Type = dataAO0.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TaskFileDownloadInfo) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Contents string `json:"Contents,omitempty"`

		Path string `json:"Path,omitempty"`

		Source string `json:"Source,omitempty"`

		Type *string `json:"Type,omitempty"`
	}

	dataAO0.Contents = m.Contents

	dataAO0.Path = m.Path

	dataAO0.Source = m.Source

	dataAO0.Type = m.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this task file download info
func (m *TaskFileDownloadInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var taskFileDownloadInfoTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["S3","Local","Inline"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskFileDownloadInfoTypeTypePropEnum = append(taskFileDownloadInfoTypeTypePropEnum, v)
	}
}

// property enum
func (m *TaskFileDownloadInfo) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, taskFileDownloadInfoTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TaskFileDownloadInfo) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskFileDownloadInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskFileDownloadInfo) UnmarshalBinary(b []byte) error {
	var res TaskFileDownloadInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
