// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TestcryptUser Testcrypt:User
//
// User Mo to test secure property.
//
// swagger:model testcryptUser
type TestcryptUser struct {

	// is password set
	IsPasswordSet bool `json:"IsPasswordSet,omitempty"`

	// Password associated with username, to be stored in the database encrypted.
	//
	Password string `json:"Password,omitempty"`

	// The name of the user whose credentials are being set.
	//
	Username string `json:"Username,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TestcryptUser) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		IsPasswordSet bool `json:"IsPasswordSet,omitempty"`

		Password string `json:"Password,omitempty"`

		Username string `json:"Username,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.IsPasswordSet = dataAO0.IsPasswordSet

	m.Password = dataAO0.Password

	m.Username = dataAO0.Username

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TestcryptUser) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		IsPasswordSet bool `json:"IsPasswordSet,omitempty"`

		Password string `json:"Password,omitempty"`

		Username string `json:"Username,omitempty"`
	}

	dataAO0.IsPasswordSet = m.IsPasswordSet

	dataAO0.Password = m.Password

	dataAO0.Username = m.Username

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this testcrypt user
func (m *TestcryptUser) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *TestcryptUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestcryptUser) UnmarshalBinary(b []byte) error {
	var res TestcryptUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
