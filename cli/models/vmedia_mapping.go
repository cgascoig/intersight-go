// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VmediaMapping Vmedia:Mapping
// swagger:model vmediaMapping
type VmediaMapping struct {

	// Type of Authentication protocol when CIFS is used for communication with the remote server.
	//
	// Enum: [none ntlm ntlmi ntlmv2 ntlmv2i ntlmssp ntlmsspi]
	AuthenticationProtocol *string `json:"AuthenticationProtocol,omitempty"`

	// Type of remote Virtual Media device.
	//
	// Enum: [cdd hdd]
	DeviceType *string `json:"DeviceType,omitempty"`

	// IP address or hostname of the remote server.
	//
	HostName string `json:"HostName,omitempty"`

	// is password set
	IsPasswordSet bool `json:"IsPasswordSet,omitempty"`

	// Mount options for the Virtual Media mapping. The field can be left blank or filled in a comma separated list with the following options.\n For NFS, supported options are ro, rw, nolock, noexec, soft, port=VALUE, timeo=VALUE, retry=VALUE.\n For CIFS, supported options are soft, nounix, noserverino, guest.\n For HTTP/HTTPS, the only supported option is noauto.
	//
	MountOptions string `json:"MountOptions,omitempty"`

	// Protocol to use to communicate with the remote server.
	//
	// Enum: [nfs cifs http https]
	MountProtocol *string `json:"MountProtocol,omitempty"`

	// Password associated with the username.
	//
	Password string `json:"Password,omitempty"`

	// Name of the remote file. It should be of .img format for HDD Virtual Media mapping and .iso format for CDD Virtual Media mapping.
	//
	RemoteFile string `json:"RemoteFile,omitempty"`

	// Path to the location of the image on the remote server. Preferred format is /path/.
	//
	RemotePath string `json:"RemotePath,omitempty"`

	// Username to log in to the remote server.
	//
	Username string `json:"Username,omitempty"`

	// Identity of the image for Virtual Media mapping.
	//
	VolumeName string `json:"VolumeName,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VmediaMapping) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		AuthenticationProtocol *string `json:"AuthenticationProtocol,omitempty"`

		DeviceType *string `json:"DeviceType,omitempty"`

		HostName string `json:"HostName,omitempty"`

		IsPasswordSet bool `json:"IsPasswordSet,omitempty"`

		MountOptions string `json:"MountOptions,omitempty"`

		MountProtocol *string `json:"MountProtocol,omitempty"`

		Password string `json:"Password,omitempty"`

		RemoteFile string `json:"RemoteFile,omitempty"`

		RemotePath string `json:"RemotePath,omitempty"`

		Username string `json:"Username,omitempty"`

		VolumeName string `json:"VolumeName,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.AuthenticationProtocol = dataAO0.AuthenticationProtocol

	m.DeviceType = dataAO0.DeviceType

	m.HostName = dataAO0.HostName

	m.IsPasswordSet = dataAO0.IsPasswordSet

	m.MountOptions = dataAO0.MountOptions

	m.MountProtocol = dataAO0.MountProtocol

	m.Password = dataAO0.Password

	m.RemoteFile = dataAO0.RemoteFile

	m.RemotePath = dataAO0.RemotePath

	m.Username = dataAO0.Username

	m.VolumeName = dataAO0.VolumeName

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VmediaMapping) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		AuthenticationProtocol *string `json:"AuthenticationProtocol,omitempty"`

		DeviceType *string `json:"DeviceType,omitempty"`

		HostName string `json:"HostName,omitempty"`

		IsPasswordSet bool `json:"IsPasswordSet,omitempty"`

		MountOptions string `json:"MountOptions,omitempty"`

		MountProtocol *string `json:"MountProtocol,omitempty"`

		Password string `json:"Password,omitempty"`

		RemoteFile string `json:"RemoteFile,omitempty"`

		RemotePath string `json:"RemotePath,omitempty"`

		Username string `json:"Username,omitempty"`

		VolumeName string `json:"VolumeName,omitempty"`
	}

	dataAO0.AuthenticationProtocol = m.AuthenticationProtocol

	dataAO0.DeviceType = m.DeviceType

	dataAO0.HostName = m.HostName

	dataAO0.IsPasswordSet = m.IsPasswordSet

	dataAO0.MountOptions = m.MountOptions

	dataAO0.MountProtocol = m.MountProtocol

	dataAO0.Password = m.Password

	dataAO0.RemoteFile = m.RemoteFile

	dataAO0.RemotePath = m.RemotePath

	dataAO0.Username = m.Username

	dataAO0.VolumeName = m.VolumeName

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this vmedia mapping
func (m *VmediaMapping) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMountProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var vmediaMappingTypeAuthenticationProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","ntlm","ntlmi","ntlmv2","ntlmv2i","ntlmssp","ntlmsspi"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmediaMappingTypeAuthenticationProtocolPropEnum = append(vmediaMappingTypeAuthenticationProtocolPropEnum, v)
	}
}

// property enum
func (m *VmediaMapping) validateAuthenticationProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vmediaMappingTypeAuthenticationProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VmediaMapping) validateAuthenticationProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthenticationProtocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthenticationProtocolEnum("AuthenticationProtocol", "body", *m.AuthenticationProtocol); err != nil {
		return err
	}

	return nil
}

var vmediaMappingTypeDeviceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cdd","hdd"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmediaMappingTypeDeviceTypePropEnum = append(vmediaMappingTypeDeviceTypePropEnum, v)
	}
}

// property enum
func (m *VmediaMapping) validateDeviceTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vmediaMappingTypeDeviceTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VmediaMapping) validateDeviceType(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDeviceTypeEnum("DeviceType", "body", *m.DeviceType); err != nil {
		return err
	}

	return nil
}

var vmediaMappingTypeMountProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["nfs","cifs","http","https"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmediaMappingTypeMountProtocolPropEnum = append(vmediaMappingTypeMountProtocolPropEnum, v)
	}
}

// property enum
func (m *VmediaMapping) validateMountProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vmediaMappingTypeMountProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VmediaMapping) validateMountProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.MountProtocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateMountProtocolEnum("MountProtocol", "body", *m.MountProtocol); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VmediaMapping) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmediaMapping) UnmarshalBinary(b []byte) error {
	var res VmediaMapping
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
