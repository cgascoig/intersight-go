// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VnicEthInterruptSettings Interrupt Settings
//
// Interrupt settings for the virtual ethernet interface.
//
// swagger:model vnicEthInterruptSettings
type VnicEthInterruptSettings struct {

	// The time to wait between interrupts or the idle period that must be encountered before an interrupt is sent. To turn off interrupt coalescing, enter 0 (zero) in this field.
	//
	CoalescingTime int64 `json:"CoalescingTime,omitempty"`

	// Interrupt Coalescing Type. This can be one of the following:- MIN  — The system waits for the time specified in the Coalescing Time field before sending another interrupt event IDLE — The system does not send an interrupt until there is a period of no activity lasting as least as long as the time specified in the Coalescing Time field.
	//
	// Enum: [MIN IDLE]
	CoalescingType *string `json:"CoalescingType,omitempty"`

	// The number of interrupt resources to allocate. Typical value is be equal to the number of completion queue resources.
	//
	Count int64 `json:"Count,omitempty"`

	// Preferred driver interrupt mode. This can be one of the following:- MSIx — Message Signaled Interrupts (MSI) with the optional extension. MSI   — MSI only. INTx  — PCI INTx interrupts. MSIx is the recommended option.
	//
	// Enum: [MSIx MSI INTx]
	Mode *string `json:"Mode,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VnicEthInterruptSettings) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		CoalescingTime int64 `json:"CoalescingTime,omitempty"`

		CoalescingType *string `json:"CoalescingType,omitempty"`

		Count int64 `json:"Count,omitempty"`

		Mode *string `json:"Mode,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.CoalescingTime = dataAO0.CoalescingTime

	m.CoalescingType = dataAO0.CoalescingType

	m.Count = dataAO0.Count

	m.Mode = dataAO0.Mode

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VnicEthInterruptSettings) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		CoalescingTime int64 `json:"CoalescingTime,omitempty"`

		CoalescingType *string `json:"CoalescingType,omitempty"`

		Count int64 `json:"Count,omitempty"`

		Mode *string `json:"Mode,omitempty"`
	}

	dataAO0.CoalescingTime = m.CoalescingTime

	dataAO0.CoalescingType = m.CoalescingType

	dataAO0.Count = m.Count

	dataAO0.Mode = m.Mode

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this vnic eth interrupt settings
func (m *VnicEthInterruptSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCoalescingType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var vnicEthInterruptSettingsTypeCoalescingTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MIN","IDLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vnicEthInterruptSettingsTypeCoalescingTypePropEnum = append(vnicEthInterruptSettingsTypeCoalescingTypePropEnum, v)
	}
}

// property enum
func (m *VnicEthInterruptSettings) validateCoalescingTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vnicEthInterruptSettingsTypeCoalescingTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VnicEthInterruptSettings) validateCoalescingType(formats strfmt.Registry) error {

	if swag.IsZero(m.CoalescingType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCoalescingTypeEnum("CoalescingType", "body", *m.CoalescingType); err != nil {
		return err
	}

	return nil
}

var vnicEthInterruptSettingsTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MSIx","MSI","INTx"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vnicEthInterruptSettingsTypeModePropEnum = append(vnicEthInterruptSettingsTypeModePropEnum, v)
	}
}

// property enum
func (m *VnicEthInterruptSettings) validateModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vnicEthInterruptSettingsTypeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VnicEthInterruptSettings) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("Mode", "body", *m.Mode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VnicEthInterruptSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VnicEthInterruptSettings) UnmarshalBinary(b []byte) error {
	var res VnicEthInterruptSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
