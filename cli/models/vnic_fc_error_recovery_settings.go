// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// VnicFcErrorRecoverySettings Error Recovery Settings
//
// Fibre Channel Error Recovery Settings.
//
// swagger:model vnicFcErrorRecoverySettings
type VnicFcErrorRecoverySettings struct {

	// Enables Fibre Channel Error recovery.
	//
	Enabled bool `json:"Enabled,omitempty"`

	// The number of times an I/O request to a port is retried because the port is busy before the system decides the port is unavailable.
	//
	IoRetryCount int64 `json:"IoRetryCount,omitempty"`

	// The number of seconds the adapter waits before aborting the pending command and resending the same IO request.
	//
	IoRetryTimeout int64 `json:"IoRetryTimeout,omitempty"`

	// The number of milliseconds the port should actually be down before it is marked down and fabric connectivity is lost.
	//
	LinkDownTimeout int64 `json:"LinkDownTimeout,omitempty"`

	// The number of milliseconds a remote Fibre Channel port should be offline before informing the SCSI upper layer that the port is unavailable. For a server with a VIC adapter running ESXi, the recommended value is 10000. For a server with a port used to boot a Windows OS from the SAN, the recommended value is 5000 milliseconds.
	//
	PortDownTimeout int64 `json:"PortDownTimeout,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VnicFcErrorRecoverySettings) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Enabled bool `json:"Enabled,omitempty"`

		IoRetryCount int64 `json:"IoRetryCount,omitempty"`

		IoRetryTimeout int64 `json:"IoRetryTimeout,omitempty"`

		LinkDownTimeout int64 `json:"LinkDownTimeout,omitempty"`

		PortDownTimeout int64 `json:"PortDownTimeout,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Enabled = dataAO0.Enabled

	m.IoRetryCount = dataAO0.IoRetryCount

	m.IoRetryTimeout = dataAO0.IoRetryTimeout

	m.LinkDownTimeout = dataAO0.LinkDownTimeout

	m.PortDownTimeout = dataAO0.PortDownTimeout

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VnicFcErrorRecoverySettings) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Enabled bool `json:"Enabled,omitempty"`

		IoRetryCount int64 `json:"IoRetryCount,omitempty"`

		IoRetryTimeout int64 `json:"IoRetryTimeout,omitempty"`

		LinkDownTimeout int64 `json:"LinkDownTimeout,omitempty"`

		PortDownTimeout int64 `json:"PortDownTimeout,omitempty"`
	}

	dataAO0.Enabled = m.Enabled

	dataAO0.IoRetryCount = m.IoRetryCount

	dataAO0.IoRetryTimeout = m.IoRetryTimeout

	dataAO0.LinkDownTimeout = m.LinkDownTimeout

	dataAO0.PortDownTimeout = m.PortDownTimeout

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this vnic fc error recovery settings
func (m *VnicFcErrorRecoverySettings) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *VnicFcErrorRecoverySettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VnicFcErrorRecoverySettings) UnmarshalBinary(b []byte) error {
	var res VnicFcErrorRecoverySettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
