// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// VnicPlacementSettings Placement Settings
//
// Placement Settings for the virtual interface.
//
// swagger:model vnicPlacementSettings
type VnicPlacementSettings struct {

	// PCIe Slot where the VIC adapter is installed. Supported values are (1-15) and MLOM.
	//
	ID string `json:"Id,omitempty"`

	// The PCI Link used as transport for the virtual interface. All VIC adapters have a single PCI link except VIC 1385 which has two.
	//
	PciLink int64 `json:"PciLink,omitempty"`

	// Adapter port on which the virtual interface will be created.
	//
	Uplink int64 `json:"Uplink,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VnicPlacementSettings) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ID string `json:"Id,omitempty"`

		PciLink int64 `json:"PciLink,omitempty"`

		Uplink int64 `json:"Uplink,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.ID = dataAO0.ID

	m.PciLink = dataAO0.PciLink

	m.Uplink = dataAO0.Uplink

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VnicPlacementSettings) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		ID string `json:"Id,omitempty"`

		PciLink int64 `json:"PciLink,omitempty"`

		Uplink int64 `json:"Uplink,omitempty"`
	}

	dataAO0.ID = m.ID

	dataAO0.PciLink = m.PciLink

	dataAO0.Uplink = m.Uplink

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this vnic placement settings
func (m *VnicPlacementSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *VnicPlacementSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VnicPlacementSettings) UnmarshalBinary(b []byte) error {
	var res VnicPlacementSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
