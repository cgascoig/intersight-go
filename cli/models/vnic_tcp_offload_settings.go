// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// VnicTCPOffloadSettings TCP Offload
//
// The TCP offload settings decide whether to offload the TCP related network functions from the CPU to the network hardware or not. These options help reduce the CPU overhead and increase the network throughput.
//
// swagger:model vnicTcpOffloadSettings
type VnicTCPOffloadSettings struct {

	// Enables the reassembly of segmented packets in hardware before sending them to the CPU.
	//
	LargeReceive bool `json:"LargeReceive,omitempty"`

	// Enables the CPU to send large packets to the hardware for segmentation.
	//
	LargeSend bool `json:"LargeSend,omitempty"`

	// When enabled, the CPU sends all packet checksums to the hardware for validation.
	//
	RxChecksum bool `json:"RxChecksum,omitempty"`

	// When enabled, the CPU sends all packets to the hardware so that the checksum can be calculated.
	//
	TxChecksum bool `json:"TxChecksum,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *VnicTCPOffloadSettings) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		LargeReceive bool `json:"LargeReceive,omitempty"`

		LargeSend bool `json:"LargeSend,omitempty"`

		RxChecksum bool `json:"RxChecksum,omitempty"`

		TxChecksum bool `json:"TxChecksum,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.LargeReceive = dataAO0.LargeReceive

	m.LargeSend = dataAO0.LargeSend

	m.RxChecksum = dataAO0.RxChecksum

	m.TxChecksum = dataAO0.TxChecksum

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m VnicTCPOffloadSettings) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		LargeReceive bool `json:"LargeReceive,omitempty"`

		LargeSend bool `json:"LargeSend,omitempty"`

		RxChecksum bool `json:"RxChecksum,omitempty"`

		TxChecksum bool `json:"TxChecksum,omitempty"`
	}

	dataAO0.LargeReceive = m.LargeReceive

	dataAO0.LargeSend = m.LargeSend

	dataAO0.RxChecksum = m.RxChecksum

	dataAO0.TxChecksum = m.TxChecksum

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this vnic Tcp offload settings
func (m *VnicTCPOffloadSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *VnicTCPOffloadSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VnicTCPOffloadSettings) UnmarshalBinary(b []byte) error {
	var res VnicTCPOffloadSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
