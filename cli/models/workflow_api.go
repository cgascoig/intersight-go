// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkflowAPI API
//
// Intersight Orchestrator supports generic API workflow tasks that can execute
// an API given the request body and response parser specification.
//
// API type models a single API request within a batch of requests that get
// executed within a single workflow task.
//
// swagger:model workflowApi
type WorkflowAPI struct {

	// The optional request body that is sent as part of this API request.
	//
	// The request body can contain a golang template that can be populated with task input
	// parameters and previous API output parameters.
	//
	//
	Body string `json:"Body,omitempty"`

	// Intersight Orchestrator, with the support of response parser specification,
	// can extract the values from API responses and map them to task output parameters.
	// The value extraction is supported for response content types XML and JSON.
	//
	// The type of the content that gets passed as payload and response in this
	// API.
	//
	//
	// Enum: [json xml]
	ContentType *string `json:"ContentType,omitempty"`

	// The expected state expression, if provided, allows the Intersight Orchestrator
	// to mark a task status as success/fail by checking the extracted API
	// values against a set of expected values.
	//
	// The expected state is given as a golang template that has to evaluate to a
	// final content true/false.
	//
	// This property is deprecated in favour of Outcomes property.
	//
	//
	ExpectedState string `json:"ExpectedState,omitempty"`

	// A reference name for this API request within the batch API request.
	//
	// This name shall be used to map the API output parameters to subsequent
	// API input parameters within a batch API task.
	//
	//
	Name string `json:"Name,omitempty"`

	// All the possible outcomes of this API are captured here. Outcomes property
	// is a collection property of type workflow.Outcome objects.
	//
	// The outcomes can be mapped to the message to be shown. The outcomes are
	// evaluated in the order they are given. At the end of the outcomes list,
	// an catchall success/fail outcome can be added with condition as 'true'.
	//
	// This is an optional
	// property and if not specified the task will be marked as success.
	//
	//
	Outcomes interface{} `json:"Outcomes,omitempty"`

	// The optional grammar specification for parsing the response to extract the
	// required values.
	//
	// The specification should have extraction specification specified for
	// all the API output parameters.
	//
	//
	ResponseSpec interface{} `json:"ResponseSpec,omitempty"`

	// The duration in seconds by which the API response is expected from the API target.
	//
	// If the end point does not respond for the API request within this timeout
	// duration, the task will be marked as failed.
	//
	//
	Timeout int64 `json:"Timeout,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkflowAPI) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Body string `json:"Body,omitempty"`

		ContentType *string `json:"ContentType,omitempty"`

		ExpectedState string `json:"ExpectedState,omitempty"`

		Name string `json:"Name,omitempty"`

		Outcomes interface{} `json:"Outcomes,omitempty"`

		ResponseSpec interface{} `json:"ResponseSpec,omitempty"`

		Timeout int64 `json:"Timeout,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Body = dataAO0.Body

	m.ContentType = dataAO0.ContentType

	m.ExpectedState = dataAO0.ExpectedState

	m.Name = dataAO0.Name

	m.Outcomes = dataAO0.Outcomes

	m.ResponseSpec = dataAO0.ResponseSpec

	m.Timeout = dataAO0.Timeout

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkflowAPI) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Body string `json:"Body,omitempty"`

		ContentType *string `json:"ContentType,omitempty"`

		ExpectedState string `json:"ExpectedState,omitempty"`

		Name string `json:"Name,omitempty"`

		Outcomes interface{} `json:"Outcomes,omitempty"`

		ResponseSpec interface{} `json:"ResponseSpec,omitempty"`

		Timeout int64 `json:"Timeout,omitempty"`
	}

	dataAO0.Body = m.Body

	dataAO0.ContentType = m.ContentType

	dataAO0.ExpectedState = m.ExpectedState

	dataAO0.Name = m.Name

	dataAO0.Outcomes = m.Outcomes

	dataAO0.ResponseSpec = m.ResponseSpec

	dataAO0.Timeout = m.Timeout

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this workflow Api
func (m *WorkflowAPI) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContentType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var workflowApiTypeContentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["json","xml"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workflowApiTypeContentTypePropEnum = append(workflowApiTypeContentTypePropEnum, v)
	}
}

// property enum
func (m *WorkflowAPI) validateContentTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, workflowApiTypeContentTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WorkflowAPI) validateContentType(formats strfmt.Registry) error {

	if swag.IsZero(m.ContentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateContentTypeEnum("ContentType", "body", *m.ContentType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowAPI) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowAPI) UnmarshalBinary(b []byte) error {
	var res WorkflowAPI
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
