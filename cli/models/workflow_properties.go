// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkflowProperties Workflow:Properties
//
// Properties for the task definition like the inputs, outputs, timeout and retry policies. Tasks are the building blocks for workflows.
//
// swagger:model workflowProperties
type WorkflowProperties struct {

	// The schema expected for input parameters for this task.
	//
	InputDefinition []*WorkflowBaseDataType `json:"InputDefinition"`

	// The schema expected for output parameters for this task.
	//
	OutputDefinition []*WorkflowBaseDataType `json:"OutputDefinition"`

	// The number of times a task should be tried before marking as failed.
	//
	RetryCount int64 `json:"RetryCount,omitempty"`

	// The delay in seconds after which the the task is re-tried.
	//
	RetryDelay int64 `json:"RetryDelay,omitempty"`

	// The retry policy for the task.
	//
	// Enum: [Fixed]
	RetryPolicy *string `json:"RetryPolicy,omitempty"`

	// The timeout value in seconds after which task will be marked as timed out. Max allowed value is 7 days.
	//
	Timeout int64 `json:"Timeout,omitempty"`

	// The timeout policy for the task.
	//
	// Enum: [Timeout Retry]
	TimeoutPolicy *string `json:"TimeoutPolicy,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkflowProperties) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		InputDefinition []*WorkflowBaseDataType `json:"InputDefinition"`

		OutputDefinition []*WorkflowBaseDataType `json:"OutputDefinition"`

		RetryCount int64 `json:"RetryCount,omitempty"`

		RetryDelay int64 `json:"RetryDelay,omitempty"`

		RetryPolicy *string `json:"RetryPolicy,omitempty"`

		Timeout int64 `json:"Timeout,omitempty"`

		TimeoutPolicy *string `json:"TimeoutPolicy,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.InputDefinition = dataAO0.InputDefinition

	m.OutputDefinition = dataAO0.OutputDefinition

	m.RetryCount = dataAO0.RetryCount

	m.RetryDelay = dataAO0.RetryDelay

	m.RetryPolicy = dataAO0.RetryPolicy

	m.Timeout = dataAO0.Timeout

	m.TimeoutPolicy = dataAO0.TimeoutPolicy

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkflowProperties) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		InputDefinition []*WorkflowBaseDataType `json:"InputDefinition"`

		OutputDefinition []*WorkflowBaseDataType `json:"OutputDefinition"`

		RetryCount int64 `json:"RetryCount,omitempty"`

		RetryDelay int64 `json:"RetryDelay,omitempty"`

		RetryPolicy *string `json:"RetryPolicy,omitempty"`

		Timeout int64 `json:"Timeout,omitempty"`

		TimeoutPolicy *string `json:"TimeoutPolicy,omitempty"`
	}

	dataAO0.InputDefinition = m.InputDefinition

	dataAO0.OutputDefinition = m.OutputDefinition

	dataAO0.RetryCount = m.RetryCount

	dataAO0.RetryDelay = m.RetryDelay

	dataAO0.RetryPolicy = m.RetryPolicy

	dataAO0.Timeout = m.Timeout

	dataAO0.TimeoutPolicy = m.TimeoutPolicy

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this workflow properties
func (m *WorkflowProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInputDefinition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputDefinition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetryPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeoutPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowProperties) validateInputDefinition(formats strfmt.Registry) error {

	if swag.IsZero(m.InputDefinition) { // not required
		return nil
	}

	for i := 0; i < len(m.InputDefinition); i++ {
		if swag.IsZero(m.InputDefinition[i]) { // not required
			continue
		}

		if m.InputDefinition[i] != nil {
			if err := m.InputDefinition[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("InputDefinition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkflowProperties) validateOutputDefinition(formats strfmt.Registry) error {

	if swag.IsZero(m.OutputDefinition) { // not required
		return nil
	}

	for i := 0; i < len(m.OutputDefinition); i++ {
		if swag.IsZero(m.OutputDefinition[i]) { // not required
			continue
		}

		if m.OutputDefinition[i] != nil {
			if err := m.OutputDefinition[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OutputDefinition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var workflowPropertiesTypeRetryPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Fixed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workflowPropertiesTypeRetryPolicyPropEnum = append(workflowPropertiesTypeRetryPolicyPropEnum, v)
	}
}

// property enum
func (m *WorkflowProperties) validateRetryPolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, workflowPropertiesTypeRetryPolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WorkflowProperties) validateRetryPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.RetryPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateRetryPolicyEnum("RetryPolicy", "body", *m.RetryPolicy); err != nil {
		return err
	}

	return nil
}

var workflowPropertiesTypeTimeoutPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Timeout","Retry"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workflowPropertiesTypeTimeoutPolicyPropEnum = append(workflowPropertiesTypeTimeoutPolicyPropEnum, v)
	}
}

// property enum
func (m *WorkflowProperties) validateTimeoutPolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, workflowPropertiesTypeTimeoutPolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WorkflowProperties) validateTimeoutPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeoutPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateTimeoutPolicyEnum("TimeoutPolicy", "body", *m.TimeoutPolicy); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowProperties) UnmarshalBinary(b []byte) error {
	var res WorkflowProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
