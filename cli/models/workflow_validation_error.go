// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// WorkflowValidationError Workflow:Validation Error
//
// Used to show validation errors for the workflow or for the task within the workflow.
//
// swagger:model workflowValidationError
type WorkflowValidationError struct {

	// Description of the error.
	//
	// Read Only: true
	ErrorLog string `json:"ErrorLog,omitempty"`

	// When populated this refers to the input or output field within the workflow or task.
	//
	// Read Only: true
	Field string `json:"Field,omitempty"`

	// The task name on which the error is found, when empty the error applies to the top level workflow.
	//
	// Read Only: true
	TaskName string `json:"TaskName,omitempty"`

	// When populated this refers to the transition connection that has a problem. When this field has value OnSuccess it means the transition connection OnSuccess for the task has an issue.
	//
	// Read Only: true
	TransitionName string `json:"TransitionName,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkflowValidationError) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ErrorLog string `json:"ErrorLog,omitempty"`

		Field string `json:"Field,omitempty"`

		TaskName string `json:"TaskName,omitempty"`

		TransitionName string `json:"TransitionName,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.ErrorLog = dataAO0.ErrorLog

	m.Field = dataAO0.Field

	m.TaskName = dataAO0.TaskName

	m.TransitionName = dataAO0.TransitionName

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkflowValidationError) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		ErrorLog string `json:"ErrorLog,omitempty"`

		Field string `json:"Field,omitempty"`

		TaskName string `json:"TaskName,omitempty"`

		TransitionName string `json:"TransitionName,omitempty"`
	}

	dataAO0.ErrorLog = m.ErrorLog

	dataAO0.Field = m.Field

	dataAO0.TaskName = m.TaskName

	dataAO0.TransitionName = m.TransitionName

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this workflow validation error
func (m *WorkflowValidationError) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowValidationError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowValidationError) UnmarshalBinary(b []byte) error {
	var res WorkflowValidationError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
