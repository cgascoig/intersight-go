// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// X509Certificate X509:Certificate
//
// The representation of an X.509 certificate.
//
// swagger:model x509Certificate
type X509Certificate struct {

	// The X.509 distinguished name of the issuer of this certificate.
	//
	// Read Only: true
	Issuer *PkixDistinguishedName `json:"Issuer,omitempty"`

	// The date on which the certificate's validity period ends.
	//
	// Read Only: true
	// Format: date-time
	NotAfter strfmt.DateTime `json:"NotAfter,omitempty"`

	// The date on which the certificate's validity period begins.
	//
	// Read Only: true
	// Format: date-time
	NotBefore strfmt.DateTime `json:"NotBefore,omitempty"`

	// The base64 encoded certificate in PEM format.
	//
	PemCertificate string `json:"PemCertificate,omitempty"`

	// The computed SHA-256 fingerprint of the certificate. Equivalent to 'openssl x509 -fingerprint -sha256'.
	//
	// Read Only: true
	Sha256Fingerprint string `json:"Sha256Fingerprint,omitempty"`

	// Signature algorithm, as specified in [RFC 5280](https://tools.ietf.org/html/rfc5280).
	//
	// Read Only: true
	SignatureAlgorithm string `json:"SignatureAlgorithm,omitempty"`

	// The X.509 distinguished name of the subject of this certificate.
	//
	// Read Only: true
	Subject *PkixDistinguishedName `json:"Subject,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *X509Certificate) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Issuer *PkixDistinguishedName `json:"Issuer,omitempty"`

		NotAfter strfmt.DateTime `json:"NotAfter,omitempty"`

		NotBefore strfmt.DateTime `json:"NotBefore,omitempty"`

		PemCertificate string `json:"PemCertificate,omitempty"`

		Sha256Fingerprint string `json:"Sha256Fingerprint,omitempty"`

		SignatureAlgorithm string `json:"SignatureAlgorithm,omitempty"`

		Subject *PkixDistinguishedName `json:"Subject,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Issuer = dataAO0.Issuer

	m.NotAfter = dataAO0.NotAfter

	m.NotBefore = dataAO0.NotBefore

	m.PemCertificate = dataAO0.PemCertificate

	m.Sha256Fingerprint = dataAO0.Sha256Fingerprint

	m.SignatureAlgorithm = dataAO0.SignatureAlgorithm

	m.Subject = dataAO0.Subject

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m X509Certificate) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Issuer *PkixDistinguishedName `json:"Issuer,omitempty"`

		NotAfter strfmt.DateTime `json:"NotAfter,omitempty"`

		NotBefore strfmt.DateTime `json:"NotBefore,omitempty"`

		PemCertificate string `json:"PemCertificate,omitempty"`

		Sha256Fingerprint string `json:"Sha256Fingerprint,omitempty"`

		SignatureAlgorithm string `json:"SignatureAlgorithm,omitempty"`

		Subject *PkixDistinguishedName `json:"Subject,omitempty"`
	}

	dataAO0.Issuer = m.Issuer

	dataAO0.NotAfter = m.NotAfter

	dataAO0.NotBefore = m.NotBefore

	dataAO0.PemCertificate = m.PemCertificate

	dataAO0.Sha256Fingerprint = m.Sha256Fingerprint

	dataAO0.SignatureAlgorithm = m.SignatureAlgorithm

	dataAO0.Subject = m.Subject

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this x509 certificate
func (m *X509Certificate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotAfter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotBefore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *X509Certificate) validateIssuer(formats strfmt.Registry) error {

	if swag.IsZero(m.Issuer) { // not required
		return nil
	}

	if m.Issuer != nil {
		if err := m.Issuer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Issuer")
			}
			return err
		}
	}

	return nil
}

func (m *X509Certificate) validateNotAfter(formats strfmt.Registry) error {

	if swag.IsZero(m.NotAfter) { // not required
		return nil
	}

	if err := validate.FormatOf("NotAfter", "body", "date-time", m.NotAfter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *X509Certificate) validateNotBefore(formats strfmt.Registry) error {

	if swag.IsZero(m.NotBefore) { // not required
		return nil
	}

	if err := validate.FormatOf("NotBefore", "body", "date-time", m.NotBefore.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *X509Certificate) validateSubject(formats strfmt.Registry) error {

	if swag.IsZero(m.Subject) { // not required
		return nil
	}

	if m.Subject != nil {
		if err := m.Subject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Subject")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *X509Certificate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *X509Certificate) UnmarshalBinary(b []byte) error {
	var res X509Certificate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
